<?xml version="1.0" encoding="UTF-8"?>
<project name="Jillion" default="unit.tests" basedir=".">
	<!--Used to set the required version of Java that RUNS the jars -->
	<property name="jdk.version" value="1.8" />
	<property name="version" value="5.0" />
	<property name="project-name" value="Jillion" />
	<property name="bin" value ="bin_ant"/>
	<property name="reports" value ="reports"/>
	<property name="src" value ="src"/>
	<property name="test" value ="test"/>
	<property name ="test-lib" value="test-lib"/>
	
	<property name="experimental" value ="experimental"/>
		<property name ="experimental-test" value="experimental-test"/>
	
	<property name ="analysis" value="build-lib"/>
  
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
            <classpath>
              <fileset dir="${analysis}/pmd"/>
           </classpath>
    </taskdef>
	
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
            <classpath>
            	<fileset dir="${analysis}" includes="**/*.jar"/>
          </classpath>
    </taskdef>
    
	<taskdef resource="emma_ant.properties" >
        <classpath>
            <fileset dir="${analysis}/emma"/>
   		</classpath>
    </taskdef>
	
    <taskdef resource="checkstyletask.properties"
         classpath="${analysis}/checkstyle-5.7-all.jar"/>

    <taskdef name="testability" classname="com.google.ant.TestabilityTask">
        <classpath>
            <fileset dir="${analysis}/testability-explorer"/>
        </classpath>
    </taskdef>

   
	        
	<taskdef name="javancss"
            classname="javancss.JavancssAntTask">
            <classpath>
                <fileset dir="${analysis}/javancss"/>
            </classpath>
    </taskdef>

	<path id="javadoc.sourcepath">
        <pathelement location="${src}"/>
    </path>

	<path id ="test.classpath">
		<fileset dir="${test-lib}" includes="**/*.jar"/>		
		<fileset dir="${analysis}" includes="**/*.jar"/>
		<pathelement path= "${bin}"/>
		</path>
	
	<path id="svnant.classpth">
		<fileset dir="${analysis}/svn" includes="**/*.jar"/>
	  </path>
	
	<taskdef name="svn" classname="com.googlecode.svntask.SvnTask" classpathref="svnant.classpth"/>
	
	
	
	<target name="revision" 
			description = "sets the property 'revision' to the svn revision can be later used with ${revision}">
		<svn>
						<info path="." revisionProperty="revision" />
					</svn>
	</target>
	<!--
	<target name="revision" 
		description = "sets the property 'revision' to the svn revision can be later used with ${revision}">
		 svntask.xml  now in root dir of svntask.dkatzel.svn1.7.jar --> 
	<!--
		<typedef resource="svntask.xml">
		            <classpath>
		                    <fileset dir="${analysis}/svn"/>
		            </classpath>
		    </typedef>	
		<svn>
				<info path="." revisionProperty="revision" />
			</svn>
		</target>
	-->
	<target name="bin"
	         description="Compile Java source and test files" depends="source.only.bin">
		<!-- source already compiled so only compile tests -->
		<javac debug="true" 
			source="${jdk.version}" target="${jdk.version}"
			destdir="${bin}"  classpathref="test.classpath" includeantruntime="false">
					<src path="${test}"/>
			<src path="${experimental}"/>
			<src path="${experimental-test}"/>
			
			
	  	</javac>
		
		<copy todir="${bin}">
			<fileset dir="${test}" excludes="**/*.java"/>
			<fileset dir="${experimental}" excludes="**/*.java"/>
			<fileset dir="${experimental-test}" excludes="**/*.java"/>
		</copy>

	 </target>
	
	<target name="source.only.bin"
		         description="Compile only Java source files" depends="clean">
			<mkdir dir="${bin}"/>
			<!-- copile source separately so we can instrument with emma simply
				 this avoids the need for emma filters-->
			<!-- debug = true required for emma reports to see line coverage and link to source-->
			<javac debug="true" destdir="${bin}"  
				source="${jdk.version}" target="${jdk.version}"
				classpathref="test.classpath" 
				includeantruntime="false">
				<src path="${src}"/>
				<compilerarg line="-Xlint:all"/>
		  	</javac>
			<emma enabled="${emma.enabled}" >
				
								      <instr instrpath="${bin}"
								             mode="overwrite"
								      		merge="false"
								      	filter ="+org.jcvi.jillion*"
								      >
						      		</instr>
						  	    </emma>
			<copy todir="${bin}">
				<fileset dir="${src}" excludes="**/*.java"/>
			</copy>

		 </target>
		
	
	
	<target name="emma" description="turns on EMMA's on-the-fly instrumentation mode" >
	    <property name="emma.enabled" value="true" />
		<!-- delete old coverage files -->
		<delete dir="coverage"></delete>
		<delete dir="emma"></delete>
		<delete file="coverage.ec"></delete>
		<delete file="coverage.em"></delete>
		<delete file="coverage.xml"></delete>
	  </target>
	
	<target name="clean"
         description="Clean generated files">
		<delete dir="${bin}"/>
 	</target>


	

	<target name="pmd" description ="runs pmd on source code">
	   <pmd rulesetfiles="jillion-pmd-ruleset.xml">

		<formatter type="xml" toFile="pmd.xml"/>
	          <fileset dir="${src}">
	              <include name="**/*.java"/>
	          </fileset>
	      </pmd>
	  </target>

	<target name="findbugs" description ="runs findbugs" depends="source.only.bin">
	    <findbugs home="${analysis}/findbugs"
	              output="xml"
	              outputFile="findbugs.xml">
	      <auxClasspath refid = "test.classpath" />
	      <sourcePath path="${src}" />
	      <class location="${bin}" />
	    
	    </findbugs>
  </target>
	
	<target name ="unit.tests" depends ="bin">
			<junit haltonfailure="no" showoutput="yes"
				errorproperty="unit.test.failed"
				failureproperty="unit.test.failed"
				fork="true">		
				<formatter type="xml"/>
				
			  <test name="org.jcvi.AllUnitTests"/>
				<classpath refid = "test.classpath" />
			</junit>
		
		
		
		
		
		
		
		
		
		
		<fail if= "unit.test.failed">
			Unit tests failed.
		</fail>
		
		</target>
	
	<target name = "report.emma" description = "generates emma report for instrumented classes">
		<emma enabled="${emma.enabled}" > 
			<report>
				<sourcepath>
				          <dirset dir="${src}" />
				</sourcepath>
				<infileset dir="." includes="*.em, *.ec" />
	 	 		<xml outfile = "coverage.xml"/>
				<html outfile="coverage.html"
					    		depth="method"
				                columns="name,class,method,block,line"/>
		 	</report>
		</emma>
	</target>
	
	
	
	<target name="javadoc" description = "generate javadoc from source">
		<delete dir="javadoc" verbose ="true"/>
		<!-- Need to tell javadoc how to use new Java 8 tags 
		@implSpec @implNote and @apiNote
		which are currently only used internally by JDK (as of 8u5)-->
					
		<javadoc packagenames ="org.jcvi.jillion.*"	
			excludepackagenames = "org.jcvi.jillion.internal.*"
				sourcepathref = "javadoc.sourcepath"
				author ="true"
				destdir = "javadoc"
				windowtitle = "${project-name} API"
				linksource= "yes"
				overview="${src}/overview-summary.html"
			    additionalparam="-tag implSpec:a:&quot;Implementation specification:&quot; -tag implNote:a:&quot;Implementation Note:&quot; -tag apiNote:a:&quot;API Note:&quot;"
			access="public"/>					

		</target>
	
	<target name = "checkstyle" description = "generates checkstyle report on source">
		<checkstyle config="${analysis}/checkStyle_docs/checkstyle_checks.modified.xml"
			failOnViolation="false"
			classpathref="test.classpath">
			
		  <fileset dir="${src}" includes="**/*.java"/>
		  <formatter type="xml" toFile="checkstyle_errors.xml"/>
		</checkstyle>
		</target>
	
	<target name="testability" depends="jar">
		<testability filter= "org.jcvi" print ="xml" resultfile="testabilityexplorer.xml">

			<classpath>
		    	<fileset dir=".">
		    		<include name ="${project-name}-${version}-r${revision}.jar" />
				</fileset>
		    </classpath>
	   </testability>	   
	</target>
	
	<target name="jar-include-experimental" description="jar of all code including experimental code" depends= "revision, bin">
			
			    <jar jarfile="${project-name}-${version}-r${revision}-exp.jar">
			        <fileset dir="${bin}"/>	
			    	<manifest>
			    		<attribute name ="Sealed" value ="true"/>
			    	</manifest>
			    </jar>
		</target>
	
	<target name="jar" description="jar of all source files" depends= "revision, source.only.bin">
		
		    <jar jarfile="${project-name}-${version}-r${revision}.jar">
		        <fileset dir="${bin}"/>	
		    	<manifest>
		    		<attribute name ="Sealed" value ="true"/>
		    	</manifest>
		    </jar>
	</target>
	
	<target name="release" description="jar of all source files" depends= "source.only.bin">
			
			    <jar jarfile="${project-name}-${version}.jar">
			        <fileset dir="${bin}">
			        	<exclude name="**/*jillion_experimental*/*.java"/>
			        	</fileset>
			    	<manifest>
			    		<attribute name ="Sealed" value ="true"/>
			    	</manifest>
			    </jar>
		</target>
	
	<target name ="javancss" description ="run javancss on source">
		<javancss  srcdir="${src}" includes ="**/*.java"
		            generateReport="true"
		            outputfile="javancss_metrics.xml"
		            format="xml"/>

	</target>
	

	<target name="jdepend" description= "runs JDepend on source" depends = "source.only.bin">

	  <jdepend  format="xml" outputfile="jdepend-report.xml">
	      <exclude name="java.*"/>
	      <exclude name="javax.*"/>
	  		<classespath>
	  	        <pathelement location="${bin}"/>
	  	    </classespath>
	  	
	  </jdepend>
	</target>
</project>