<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="org.jcvi.jillion.FastUnitTests" time="44.866" tests="11692" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.144-b01"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/home/snettem/git/Jillion"/>
    <property name="java.runtime.version" value="1.8.0_144-b01"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/home/snettem/workspace/Jillion_WorkSpace/.metadata/.plugins/org.eclipse.m2e.launching/launches/m2conf7253004581074955687.tmp"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="4.10.0-28-generic"/>
    <property name="user.home" value="/home/snettem"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="user.name" value="snettem"/>
    <property name="java.class.path" value="/home/snettem/Software/eclipse/plugins/org.eclipse.m2e.maven.runtime_1.5.2.20150413-2214/jars/plexus-classworlds-2.5.1.jar"/>
    <property name="org.slf4j.simpleLogger.defaultLogLevel" value="info"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-oracle/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher -B clean install"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_144"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="/home/snettem/git/Jillion/EMBEDDED"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="parseStringAbbreviationCodeLowercase[0]" classname="org.jcvi.jillion.core.TestDirection" time="0.003"/>
  <testcase name="parseStringZeroShouldBeForward[0]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringUppercase[0]" classname="org.jcvi.jillion.core.TestDirection" time="0.001"/>
  <testcase name="parseStringOneShouldBeReverse[0]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringAbbreviationCodeUppercase[0]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseTRStringAbbreviation[0]" classname="org.jcvi.jillion.core.TestDirection" time="0.001"/>
  <testcase name="getCode[0]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringNegativeShouldBeReverse[0]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseTFStringAbbreviation[0]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="oppositeDirection[0]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringPositiveShouldBeForward[0]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringLowercase[0]" classname="org.jcvi.jillion.core.TestDirection" time="0.002"/>
  <testcase name="parseStringAbbreviationCodeLowercase[1]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringZeroShouldBeForward[1]" classname="org.jcvi.jillion.core.TestDirection" time="0.001"/>
  <testcase name="parseStringUppercase[1]" classname="org.jcvi.jillion.core.TestDirection" time="0.003"/>
  <testcase name="parseStringOneShouldBeReverse[1]" classname="org.jcvi.jillion.core.TestDirection" time="0.003"/>
  <testcase name="parseStringAbbreviationCodeUppercase[1]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseTRStringAbbreviation[1]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="getCode[1]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringNegativeShouldBeReverse[1]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseTFStringAbbreviation[1]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="oppositeDirection[1]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringPositiveShouldBeForward[1]" classname="org.jcvi.jillion.core.TestDirection" time="0"/>
  <testcase name="parseStringLowercase[1]" classname="org.jcvi.jillion.core.TestDirection" time="0.002"/>
  <testcase name="testSubRangeOf_realRangeVsEmptyRange_isSubRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="removeFromCache" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testzeroToResidueCoordinateSystem" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEndsBefore_sameEnd" classname="org.jcvi.jillion.core.TestRange" time="0.005"/>
  <testcase name="emptyRangeWithNegativeIntValueCoordinate" classname="org.jcvi.jillion.core.TestRange" time="0.005"/>
  <testcase name="buildInclusiveRange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="intWithLongLength" classname="org.jcvi.jillion.core.TestRange" time="0.005"/>
  <testcase name="unsignedShortWithIntLength" classname="org.jcvi.jillion.core.TestRange" time="0.002"/>
  <testcase name="testStartsBefore_false" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="signedShortRange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="shortWithIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_nullRangeShouldThrowNPE" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testIntersectsWithNullShouldThrowNPE" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="validCommaParse" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testInstersects_emptyRange_shouldReturnFalse" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeIntoClustersWhenRangeIsLongerThanClusterDistanceShouldSplit" classname="org.jcvi.jillion.core.TestRange" time="0.006"/>
  <testcase name="iterateToMaxLong" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="mergeIntoClustersReSplitHugeRangeToMakeMoreEfficentClusters" classname="org.jcvi.jillion.core.TestRange" time="0.004"/>
  <testcase name="testBuildRangeOfLength_emptyRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="byteRangeWithIntLength" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="mergeThreeRanges" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="complementNoIntersectionShouldReturnOriginalRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEquals_differentLeftDifferentRightDiffSystem_notEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedShortWithUnsignedIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="longWithIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="growRight" classname="org.jcvi.jillion.core.TestRange" time="0.004"/>
  <testcase name="complementOfRangeThatDoesntFullCoverThisRangeButGoesBeyondShouldBeLimitedToThisRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeIntoClustersEmptyListShouldReturnEmptyList" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="invalidDotParseShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.TestRange" time="0.002"/>
  <testcase name="toStringLambdaUsingCoordinateSystem" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testSubRangeOf_leftIsLessRightIsSame_isNotSubRange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testIntersection_null" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersection_self" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_emptyRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEquals_sameRef" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="shrinkLeft" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="createRangeWithLengthThatIsTooBigShouldThrowException" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="shortWithUnsignedIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeThreeConsecutiveRanges" classname="org.jcvi.jillion.core.TestRange" time="0.004"/>
  <testcase name="getBeinNullCoordinateSystemShouldThrowNPE" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEndsBefore" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="ofSingleWithCoordinateSystem" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSize" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="mergeEmpty" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="longWithUnsignedShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testToString" classname="org.jcvi.jillion.core.TestRange" time="0.004"/>
  <testcase name="testSubRangeOf_leftIsLessRightIsLess_isNotSubRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testResidueBaseEmptyRangeConstruction" classname="org.jcvi.jillion.core.TestRange" time="0.002"/>
  <testcase name="unsignedLongWithLongLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersects_barelyIntersectsEnd" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="builderEnd2LessThanBeginShouldThrowException" classname="org.jcvi.jillion.core.TestRange" time="0.004"/>
  <testcase name="shrink" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="splitInto2Ranges" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testSubRangeOf_leftIsSameRightIsMore_isNotSubRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="intWithIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeRightClusteredRanges" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testStartsBefore_sameRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testStartsBefore_sameStart" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testEquals_null_notEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersection_empty" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersection_subrange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedByteWithLongLength" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="buildRangeWithNullCoordinateSystemShouldThrowNPE" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testZeroBaseConstructor" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_leftIsSameRightIsSame_isSubRange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="getEndNullCoordinateSystemShouldThrowNPE" classname="org.jcvi.jillion.core.TestRange" time="0.005"/>
  <testcase name="testEndsBefore_false" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testResidueBaseConstructor" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_leftIsLessRightIsMore_isNotSubRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testDefaultCoordinateSpecificBuildEmptyRangeConstruction" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="emptyRangeWithNegativeCoordinate" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEquals_sameLeftSameRightDiffSystem_notEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="buildRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="createRangeWithNegativeLengthShouldThrowException" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedIntWithIntLength" classname="org.jcvi.jillion.core.TestRange" time="0.002"/>
  <testcase name="twoEmptyByteRangesWithSameCoordianteAreEqual" classname="org.jcvi.jillion.core.TestRange" time="0.002"/>
  <testcase name="mergeTwoRangesNoOverlapShouldReturnTwoRanges" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="shortWithUnsignedShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="copyBuilder" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="shortWithShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testToStringNullCoordinateSystemShouldThrowNPE" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementSubsumingRangeShouldReturnEmpty" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedByteWithUnsignedIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_leftIsSameRightIsLess_isSubRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEquals_sameLeftDifferentRight_notEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="emptyRangeWithLongValueCoordinate" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="longWithUnsignedIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_emptyRangeVsEmptyRange_isSubRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="splitWithZeroLengthShouldThrowException" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_leftIsMoreRightIsSame_isSubRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="twoEmptyIntRangesWithDifferentCoordinatesAreNotEqual" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="unsignedIntWithUnsignedIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedShortWithShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementOfSubRangeShouldReturn2DisjointRanges" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testToStringSpacedBasedCoordinate" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSpaceBaseEmptyRangeConstruction" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="grow" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="longRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="splitUnderMaxSplitLengthShouldReturnListContainingSameRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_leftIsMoreRightIsLess_isSubRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="forEachPrimitiveSpaceBased" classname="org.jcvi.jillion.core.TestRange" time="0.002"/>
  <testcase name="testStartsBefore" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="forEachPrimitiveResidueCoordinates" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="invalidCommaParseShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.TestRange" time="0.002"/>
  <testcase name="testIntersection_onePointIntersectEnd" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersects_barelyIntersectsStart" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="twoEmptyByteRangesWithDifferentCoordinatesAreNotEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEquals_sameLeftDifferentRightDiffSystem_notEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementCollectionHalfOfRangeShouldReturnOtherHalf" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testToStringResidueBasedCoordinate" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEquals_diffObj_notEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="buildEmptyRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="toStringLambdaDefaultsToZeroBased" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="complementOfSuperRangeShouldReturnEmptyList" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="intersectionCausesLengthOfNegativeShouldReturnEmptyRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="intWithUnsignedIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEquals_sameValuesDifferentRef" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="mergeTwoAdjacentButNotOverlappingRangesShouldMergeIntoOne" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="validDotParse" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeThreeClusteredRanges" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testBuildRangeOfLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="growLeft" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeClusteredRangesAbutmentShouldStillMerge" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSubRangeOf_leftIsMoreRightIsMore_isNotSubRange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testStartsBefore_emptyRange_shouldReturnFalse" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="byteRangeWithLongLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="intRange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="ofLengthConstructor" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeOneRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSize_leftAndRightAreZero_sizeIsOne" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testEquals_differentLeftDifferentRightDiffSystem_equal" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeThreeRangesThirdRangeConnectsTwoRangeIslands" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="buildInclusiveRangesEmptyListShouldReturnEmptyRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="byteRangeWithUnsignedByteLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementCollectionEmptyListShouldReturnFullRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedIntWithLongLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="shortWithLongLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="splitInto4Ranges" classname="org.jcvi.jillion.core.TestRange" time="0.003"/>
  <testcase name="shiftLeft" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testIntersection_superrange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testStartsBefore_null" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="shrinkRight" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEndsBefore_null" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeIntoClusters3OverLappingRanges" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeIntoClustersOneRangeShouldReturnSameRange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testEquals_sameLeftDifferentRightDiffSystem_equal" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="invalidParseNotARangeAtAll" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeLeftClusteredRanges" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="unsignedByteWithShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersects_subRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementCollectionThrowsNPEIfCollectionIsNull" classname="org.jcvi.jillion.core.TestRange" time="0.002"/>
  <testcase name="testEquals_differentLeftSameRight_notEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testDefaultBuildEmptyRangeConstruction" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedByteWithUnsignedShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedIntWithUnsignedShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementCollectionSameRangeShouldReturnEmptyList" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="toStringLambdaWithCoordinateSystemUsingCoordinateSystem" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testIntersects_sameRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSize_sameLeftAndRight_sizeIsOne" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testSpaceBaseConstructor" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedLongWithIntLength" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="emptyRangeWithNegativeShortValueCoordinate" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedByteWithIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="byteRangeWithUnsignedIntLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testInvalidRangeConstruction" classname="org.jcvi.jillion.core.TestRange" time="0.003"/>
  <testcase name="invalidDashParseShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="intWithUnsignedShortLength" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testIntersection_onePointIntersectStart" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedShortWithLongLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testzeroToSpaceCoordinateSystem" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="longWithShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testToStringZeroBased" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementOfLeftSideShouldReturnArrayOfOneElementContainingRightSide" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedShortWithUnsignedShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testEquals_differentLeftDifferentRight_notEqual" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="byteRangeWithByteLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="emptyRangeWithShortValueCoordinate" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="unsignedIntWithShortLength" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="buildRangeWithCoordinateSystem" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeIntoClusters2RangesFartherAwayThanMaxClusterDistanceSame2Ranges" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeTwoRanges" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="signedByteRange" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="intWithShortLength" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="mergeClusteredRangesBeyondClusterShouldNotMerge" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementCollectionMultipleRangesMergeIntoSingleSameRangeShouldReturnEmpty" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="byteRangeWithShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testBuildRangeOfLength_negativeRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="validDashParse" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testEndsBefore_sameRange" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="shiftRight" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="mergeIntoClusters2OverLappingRanges" classname="org.jcvi.jillion.core.TestRange" time="0.004"/>
  <testcase name="byteRangeWithUnsignedShortLength" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="builderCopyConstructorWithNullRangeShouldThrowNPE" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="complementOfRightSideShouldReturnArrayOfOneElementContainingLeftSide" classname="org.jcvi.jillion.core.TestRange" time="0.004"/>
  <testcase name="testEndsBefore_emptyRange_shouldReturnFalse" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersects" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersection_nointersection" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="emptyRangeWithIntValueCoordinate" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testConstructor" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="testIntersects_doesntReallyIntersect" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="forEachPrimitive" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeWithNegativeClusterDistanceShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.TestRange" time="0.004"/>
  <testcase name="testIntersection_normal" classname="org.jcvi.jillion.core.TestRange" time="0"/>
  <testcase name="mergeThreeRangesOnlyTwoMerge" classname="org.jcvi.jillion.core.TestRange" time="0.001"/>
  <testcase name="testConstructor_leftGreaterThanRight_shouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.TestRange" time="0.032"/>
  <testcase name="complimentLongMaxWithLargerRangeShouldBeEmpty" classname="org.jcvi.jillion.core.TestRangeWithEdgeCases" time="0"/>
  <testcase name="intersectionLongMax" classname="org.jcvi.jillion.core.TestRangeWithEdgeCases" time="0"/>
  <testcase name="intersectionLongMin" classname="org.jcvi.jillion.core.TestRangeWithEdgeCases" time="0"/>
  <testcase name="complimentLongMinWithSmallerRangeShouldBeNonEmpty" classname="org.jcvi.jillion.core.TestRangeWithEdgeCases" time="0"/>
  <testcase name="complimentLongMaxWithSmallerRangeShouldBeNonEmpty" classname="org.jcvi.jillion.core.TestRangeWithEdgeCases" time="0"/>
  <testcase name="complimentLongMinWithLargerRangeShouldBeEmpty" classname="org.jcvi.jillion.core.TestRangeWithEdgeCases" time="0"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.core.TestByteRange" time="0"/>
  <testcase name="notEqualToNoRange" classname="org.jcvi.jillion.core.TestByteRange" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.core.TestByteRange" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.TestByteRange" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.TestByteRange" time="0.002"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.core.TestEmptyByteRange" time="0"/>
  <testcase name="notEqualToNoRange" classname="org.jcvi.jillion.core.TestEmptyByteRange" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.core.TestEmptyByteRange" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.TestEmptyByteRange" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.TestEmptyByteRange" time="0.003"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.core.TestEmptyIntRange" time="0"/>
  <testcase name="notEqualToNoRange" classname="org.jcvi.jillion.core.TestEmptyIntRange" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.core.TestEmptyIntRange" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.TestEmptyIntRange" time="0.001"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.TestEmptyIntRange" time="0.002"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.core.TestEmptyLongRange" time="0"/>
  <testcase name="notEqualToNoRange" classname="org.jcvi.jillion.core.TestEmptyLongRange" time="0.001"/>
  <testcase name="getters" classname="org.jcvi.jillion.core.TestEmptyLongRange" time="0.005"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.TestEmptyLongRange" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.TestEmptyLongRange" time="0.003"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.core.TestEmptyShortRange" time="0.001"/>
  <testcase name="notEqualToNoRange" classname="org.jcvi.jillion.core.TestEmptyShortRange" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.core.TestEmptyShortRange" time="0.001"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.TestEmptyShortRange" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.TestEmptyShortRange" time="0.001"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.core.TestIntRange" time="0"/>
  <testcase name="notEqualToNoRange" classname="org.jcvi.jillion.core.TestIntRange" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.core.TestIntRange" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.TestIntRange" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.TestIntRange" time="0"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.core.TestShortRange" time="0"/>
  <testcase name="notEqualToNoRange" classname="org.jcvi.jillion.core.TestShortRange" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.core.TestShortRange" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.TestShortRange" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.TestShortRange" time="0"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.core.TestLongRange" time="0"/>
  <testcase name="notEqualToNoRange" classname="org.jcvi.jillion.core.TestLongRange" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.core.TestLongRange" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.TestLongRange" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.TestLongRange" time="0.001"/>
  <testcase name="parseStringOneNegativeValuesDash" classname="org.jcvi.jillion.core.TestDirectedRange" time="0.001"/>
  <testcase name="parseStringOneNegativeValuesDots" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="sameValuesAreEqual" classname="org.jcvi.jillion.core.TestDirectedRange" time="0.001"/>
  <testcase name="parseStringComma" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringStringDash" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="composite" classname="org.jcvi.jillion.core.TestDirectedRange" time="0.001"/>
  <testcase name="parseCoordsWithCoordinateSystem" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringBothNegativeValuesComma" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseCoords" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseBothNegativeValuesDash" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseBothNegativeValuesDots" classname="org.jcvi.jillion.core.TestDirectedRange" time="0.001"/>
  <testcase name="parseCoordsAsStringWithCoordinateSystem" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringOneNegativeValuesComma" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseComma" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseReverseCoordsAsStringWithCoordinateSystem" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseReverseCoordsAsString" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="differentDirectionsAreNotEqual" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="nullRangeShouldThrowException" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseReverseCoords" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="noDirectionShouldDefaultToForward" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseDash" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseDots" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseCoordsAsString" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseOneNegativeValuesDash" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseOneNegativeValuesDots" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="differentRangesAreNotEqual" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringInvalidRangeShouldThrowException" classname="org.jcvi.jillion.core.TestDirectedRange" time="0.002"/>
  <testcase name="sameReferencesAreEqual" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="nullDirectionShouldThrowException" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseOneNegativeValuesComma" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringNullRangeShouldThrowException" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringReverseBothNegativeValuesComma" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="notEqualToNonDirectedRange" classname="org.jcvi.jillion.core.TestDirectedRange" time="0.001"/>
  <testcase name="parseReverseCoordsWithCoordinateSystem" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringBothNegativeValuesDash" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="parseStringBothNegativeValuesDots" classname="org.jcvi.jillion.core.TestDirectedRange" time="0.001"/>
  <testcase name="parseStringDots" classname="org.jcvi.jillion.core.TestDirectedRange" time="0"/>
  <testcase name="testCompare_emptyDefaultVsNegative" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_identicalStop" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_simple" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_nullLastParam" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_nullBothParam" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_negativeEmpty" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_identicalStart" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_emptyNegativeVsHighConstant" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_self" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0.001"/>
  <testcase name="testCompare_inverseCommutativity" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_defaultEmpty" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_emptyDefaultVsHighConstant" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_highConstantEmpty" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_nullFirstParam" classname="org.jcvi.jillion.core.TestRangeArrivalComparator" time="0"/>
  <testcase name="testCompare_emptyDefaultVsNegative" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_identicalStop" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_simple" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0.001"/>
  <testcase name="testCompare_nullLastParam" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_nullBothParam" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_negativeEmpty" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_identicalStart" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_emptyNegativeVsHighConstant" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0.001"/>
  <testcase name="testCompare_self" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_inverseCommutativity" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0.001"/>
  <testcase name="testCompare_defaultEmpty" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_emptyDefaultVsHighConstant" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_highConstantEmpty" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0"/>
  <testcase name="testCompare_nullFirstParam" classname="org.jcvi.jillion.core.TestRangeDepartureComparator" time="0.001"/>
  <testcase name="testIsSubRangeOf" classname="org.jcvi.jillion.core.TestEmptyRange" time="0"/>
  <testcase name="testEndsBefore" classname="org.jcvi.jillion.core.TestEmptyRange" time="0"/>
  <testcase name="testSize" classname="org.jcvi.jillion.core.TestEmptyRange" time="0"/>
  <testcase name="testStartsBefore" classname="org.jcvi.jillion.core.TestEmptyRange" time="0"/>
  <testcase name="testIntersection" classname="org.jcvi.jillion.core.TestEmptyRange" time="0"/>
  <testcase name="testIsEmpty" classname="org.jcvi.jillion.core.TestEmptyRange" time="0"/>
  <testcase name="testIntersects" classname="org.jcvi.jillion.core.TestEmptyRange" time="0"/>
  <testcase name="twoOverlappingRanges" classname="org.jcvi.jillion.core.TestRangeComplementFrom" time="0"/>
  <testcase name="oneSideOverhangsShouldReturnThatSide" classname="org.jcvi.jillion.core.TestRangeComplementFrom" time="0"/>
  <testcase name="complementWithItselfShouldReturnEmpty" classname="org.jcvi.jillion.core.TestRangeComplementFrom" time="0.001"/>
  <testcase name="complementEmptyShouldReturnEmpty" classname="org.jcvi.jillion.core.TestRangeComplementFrom" time="0"/>
  <testcase name="oneLargeRangeShouldGetSplit" classname="org.jcvi.jillion.core.TestRangeComplementFrom" time="0"/>
  <testcase name="removeShouldthrowUnsupportedOperationException" classname="org.jcvi.jillion.core.TestRangeIterator" time="0"/>
  <testcase name="testEndIsMaxEmptyRange" classname="org.jcvi.jillion.core.TestRangeIterator" time="0"/>
  <testcase name="iteratorOverRange" classname="org.jcvi.jillion.core.TestRangeIterator" time="0"/>
  <testcase name="testEndIsInMax" classname="org.jcvi.jillion.core.TestRangeIterator" time="0"/>
  <testcase name="iterate" classname="org.jcvi.jillion.core.TestRangeIterator" time="0"/>
  <testcase name="sort" classname="org.jcvi.jillion.core.TestRangeComparatorShortestToLongest" time="0"/>
  <testcase name="sort" classname="org.jcvi.jillion.core.TestRangeComparatorLongestToShortest" time="0"/>
  <testcase name="SomeBitsWithinAndBeyondMergeMaxDistance" classname="org.jcvi.jillion.core.TestBitSetAsRanges" time="0"/>
  <testcase name="exactlyMaxMergeDistance" classname="org.jcvi.jillion.core.TestBitSetAsRanges" time="0"/>
  <testcase name="lotsOfBits" classname="org.jcvi.jillion.core.TestBitSetAsRanges" time="0.006"/>
  <testcase name="oneBit" classname="org.jcvi.jillion.core.TestBitSetAsRanges" time="0"/>
  <testcase name="emptyBitset" classname="org.jcvi.jillion.core.TestBitSetAsRanges" time="0"/>
  <testcase name="twoNonConsecutiveBits" classname="org.jcvi.jillion.core.TestBitSetAsRanges" time="0"/>
  <testcase name="twoConsecutiveBits" classname="org.jcvi.jillion.core.TestBitSetAsRanges" time="0"/>
  <testcase name="twoNonConsecutiveBitsButWithinMergeMaxDistance" classname="org.jcvi.jillion.core.TestBitSetAsRanges" time="0"/>
  <testcase name="unsortedArrayShouldthrowException" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0.016"/>
  <testcase name="reverseSortedArrayShouldthrowException" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0"/>
  <testcase name="SomeBitsWithinAndBeyondMergeMaxDistance" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0"/>
  <testcase name="exactlyMaxMergeDistance" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0.001"/>
  <testcase name="lotsOfBits" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0"/>
  <testcase name="oneBit" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0"/>
  <testcase name="emptyBitset" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0"/>
  <testcase name="twoNonConsecutiveBits" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0"/>
  <testcase name="twoConsecutiveBits" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0.001"/>
  <testcase name="twoNonConsecutiveBitsButWithinMergeMaxDistance" classname="org.jcvi.jillion.core.TestIntArrayAsRanges" time="0"/>
  <testcase name="sameClassNotEqualShouldThrowAssertionError" classname="org.jcvi.jillion.core.testUtil.TestTestUtilEqualAndHashcodeSame" time="0.001"/>
  <testcase name="differentClassShouldThrowAssertionError" classname="org.jcvi.jillion.core.testUtil.TestTestUtilEqualAndHashcodeSame" time="0"/>
  <testcase name="sameReference" classname="org.jcvi.jillion.core.testUtil.TestTestUtilEqualAndHashcodeSame" time="0.001"/>
  <testcase name="sameValue" classname="org.jcvi.jillion.core.testUtil.TestTestUtilEqualAndHashcodeSame" time="0"/>
  <testcase name="differentEqualsButHashCodes" classname="org.jcvi.jillion.core.testUtil.TestTestUtilNotEqualAndHashcodeDifferent" time="0.003"/>
  <testcase name="sameClassNotEqual" classname="org.jcvi.jillion.core.testUtil.TestTestUtilNotEqualAndHashcodeDifferent" time="0.001"/>
  <testcase name="sameValueShouldThrowAssertionError" classname="org.jcvi.jillion.core.testUtil.TestTestUtilNotEqualAndHashcodeDifferent" time="0"/>
  <testcase name="differentClass" classname="org.jcvi.jillion.core.testUtil.TestTestUtilNotEqualAndHashcodeDifferent" time="0"/>
  <testcase name="sameReferenceShouldThrowAssertionError" classname="org.jcvi.jillion.core.testUtil.TestTestUtilNotEqualAndHashcodeDifferent" time="0"/>
  <testcase name="twoEmptyFilesAreEqual" classname="org.jcvi.jillion.core.testUtil.TestTestUtil_assertFileContentsAreEqual" time="0.01"/>
  <testcase name="copyOfFileIsEqualToItself" classname="org.jcvi.jillion.core.testUtil.TestTestUtil_assertFileContentsAreEqual" time="0.002"/>
  <testcase name="sameFileIsEqualToItself" classname="org.jcvi.jillion.core.testUtil.TestTestUtil_assertFileContentsAreEqual" time="0"/>
  <testcase name="shouldThrowNoSuchElementExceptionIfAlreadyIterated" classname="org.jcvi.jillion.core.util.iter.TestSingleElementIterator" time="0"/>
  <testcase name="iterate" classname="org.jcvi.jillion.core.util.iter.TestSingleElementIterator" time="0"/>
  <testcase name="emptyArray" classname="org.jcvi.jillion.core.util.TestArrayUtil_IntArray" time="0.001"/>
  <testcase name="oneElementArray" classname="org.jcvi.jillion.core.util.TestArrayUtil_IntArray" time="0"/>
  <testcase name="twoElementsArray" classname="org.jcvi.jillion.core.util.TestArrayUtil_IntArray" time="0.001"/>
  <testcase name="firstNullSecondNotNullShouldNotBeSimilar" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="firstAndSecondEqualShouldBeSimilar" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="bothNullFirstIsNotNull" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="bothNullNeitherIsNull" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="canNotBeNull" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="canNotBeNullShouldThowNullPointerIfIsNull" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="firstAndSecondNotEqualShouldNotBeSimilar" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="bothNullSecondIsNotNull" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="bothNullShouldBeSimilar" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0"/>
  <testcase name="bothNull" classname="org.jcvi.jillion.core.util.TestObjectsUtil" time="0.001"/>
  <testcase name="constructor" classname="org.jcvi.jillion.core.util.TestRunLength" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.core.util.TestRunLength" time="0"/>
  <testcase name="differentValueShouldNotEqual" classname="org.jcvi.jillion.core.util.TestRunLength" time="0"/>
  <testcase name="differentLengthShouldNotEqual" classname="org.jcvi.jillion.core.util.TestRunLength" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.util.TestRunLength" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.core.util.TestRunLength" time="0"/>
  <testcase name="equalsSameValue" classname="org.jcvi.jillion.core.util.TestRunLength" time="0"/>
  <testcase name="nullValueShouldNotEqual" classname="org.jcvi.jillion.core.util.TestRunLength" time="0"/>
  <testcase name="initalState" classname="org.jcvi.jillion.core.util.TestLRUCache" time="0.003"/>
  <testcase name="remove" classname="org.jcvi.jillion.core.util.TestLRUCache" time="0"/>
  <testcase name="insertOverflowShouldRemoveEldest" classname="org.jcvi.jillion.core.util.TestLRUCache" time="0"/>
  <testcase name="valueThatIsWeaklyReachableGetsRemoved" classname="org.jcvi.jillion.core.util.TestWeakReferenceLRUCache" time="0.587"/>
  <testcase name="removesLeastRecentlyUsedStrongReference" classname="org.jcvi.jillion.core.util.TestWeakReferenceLRUCache" time="0.604"/>
  <testcase name="removeDoesNothing" classname="org.jcvi.jillion.core.util.iter.TestEmptyIterator" time="0.001"/>
  <testcase name="hasNextReturnsFalse" classname="org.jcvi.jillion.core.util.iter.TestEmptyIterator" time="0"/>
  <testcase name="nextThrowsNoSuchElementException" classname="org.jcvi.jillion.core.util.iter.TestEmptyIterator" time="0"/>
  <testcase name="shouldthrowNoSuchElementExceptionWhenEmpty" classname="org.jcvi.jillion.core.util.TestFileIterator" time="0.015"/>
  <testcase name="removeShouldThrowUnsupportedOperationException" classname="org.jcvi.jillion.core.util.TestFileIterator" time="0"/>
  <testcase name="additionalFileFilter" classname="org.jcvi.jillion.core.util.TestFileIterator" time="0.001"/>
  <testcase name="doNotRecurse" classname="org.jcvi.jillion.core.util.TestFileIterator" time="0.001"/>
  <testcase name="shouldthrowNoSuchElementExceptionWhenEmpty" classname="org.jcvi.jillion.core.util.TestDepthFirstFileIterator" time="0.002"/>
  <testcase name="removeShouldThrowUnsupportedOperationException" classname="org.jcvi.jillion.core.util.TestDepthFirstFileIterator" time="0.001"/>
  <testcase name="additionalFileFilter" classname="org.jcvi.jillion.core.util.TestDepthFirstFileIterator" time="0.004"/>
  <testcase name="iterateIncludeDirs" classname="org.jcvi.jillion.core.util.TestDepthFirstFileIterator" time="0.002"/>
  <testcase name="iterateFilesOnly" classname="org.jcvi.jillion.core.util.TestDepthFirstFileIterator" time="0.001"/>
  <testcase name="shouldthrowNoSuchElementExceptionWhenEmpty" classname="org.jcvi.jillion.core.util.TestBreadthFirstFileIterator" time="0.001"/>
  <testcase name="removeShouldThrowUnsupportedOperationException" classname="org.jcvi.jillion.core.util.TestBreadthFirstFileIterator" time="0"/>
  <testcase name="additionalFilter" classname="org.jcvi.jillion.core.util.TestBreadthFirstFileIterator" time="0.001"/>
  <testcase name="iterateIncludeDirs" classname="org.jcvi.jillion.core.util.TestBreadthFirstFileIterator" time="0.001"/>
  <testcase name="iterateFilesOnly" classname="org.jcvi.jillion.core.util.TestBreadthFirstFileIterator" time="0.001"/>
  <testcase name="joinBuilderNoElements" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0.001"/>
  <testcase name="joinBuilderObjectsWithNoGlue" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0"/>
  <testcase name="joinBuilderObjectsWithPrefix" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0"/>
  <testcase name="joinBuilderObjectsWithSuffix" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0"/>
  <testcase name="joinBuilderStringsWithNoGlue" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0"/>
  <testcase name="joinBuilderStringsWithGlue" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0"/>
  <testcase name="transformWrapWithQuotes" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0"/>
  <testcase name="joinBuilderObjectsWithGlue" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0"/>
  <testcase name="transformToUpper" classname="org.jcvi.jillion.core.util.TestJoinedStringBuilder" time="0.001"/>
  <testcase name="collectionReturnLast" classname="org.jcvi.jillion.core.util.TestMultipleWrapper" time="0.005"/>
  <testcase name="nullReturnPolicyShouldThrowNullPointerException" classname="org.jcvi.jillion.core.util.TestMultipleWrapper" time="0.003"/>
  <testcase name="nullDelegateShouldThrowNullPointerException" classname="org.jcvi.jillion.core.util.TestMultipleWrapper" time="0"/>
  <testcase name="collectionReturnFirst" classname="org.jcvi.jillion.core.util.TestMultipleWrapper" time="0"/>
  <testcase name="wrapCollection" classname="org.jcvi.jillion.core.util.TestMultipleWrapper" time="0"/>
  <testcase name="noDelegatesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestMultipleWrapper" time="0"/>
  <testcase name="defaultToReturnFirst" classname="org.jcvi.jillion.core.util.TestMultipleWrapper" time="0.001"/>
  <testcase name="removeShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestChainedIterator" time="0.001"/>
  <testcase name="emptyIterators" classname="org.jcvi.jillion.core.util.iter.TestChainedIterator" time="0"/>
  <testcase name="nullIteratorInListWillThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestChainedIterator" time="0"/>
  <testcase name="whenFirstIteratorFinishedShouldStartIteratingSecond" classname="org.jcvi.jillion.core.util.iter.TestChainedIterator" time="0"/>
  <testcase name="nullParameterInConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestChainedIterator" time="0.001"/>
  <testcase name="closingIteratorShouldMakeIteratorAppearFinished" classname="org.jcvi.jillion.core.util.TestStreamingAdapter" time="0.005"/>
  <testcase name="adaptedIteratorShouldIterateCorrectly" classname="org.jcvi.jillion.core.util.TestStreamingAdapter" time="0"/>
  <testcase name="closingMultipleTimesShouldHaveNoEffect" classname="org.jcvi.jillion.core.util.TestStreamingAdapter" time="0"/>
  <testcase name="closingIteratorShouldMakeIteratorAppearFinished" classname="org.jcvi.jillion.core.util.iter.TestStreamingIterator" time="0.001"/>
  <testcase name="whenFirstIteratorFinishedShouldStartIteratingSecond" classname="org.jcvi.jillion.core.util.iter.TestStreamingIterator" time="0"/>
  <testcase name="closingMultipleTimesShouldHaveNoEffect" classname="org.jcvi.jillion.core.util.iter.TestStreamingIterator" time="0"/>
  <testcase name="emptyUnsortedMapShouldReturnEmptySortedMap" classname="org.jcvi.jillion.core.util.TestMapValueComparator" time="0"/>
  <testcase name="sortWithDuplicatesShouldSortDupsByKey" classname="org.jcvi.jillion.core.util.TestMapValueComparator" time="0.001"/>
  <testcase name="sortByValuesDescendingUsingCustomComparator" classname="org.jcvi.jillion.core.util.TestMapValueComparator" time="0"/>
  <testcase name="sortByValuesAscending" classname="org.jcvi.jillion.core.util.TestMapValueComparator" time="0.001"/>
  <testcase name="sortByValuesDescending" classname="org.jcvi.jillion.core.util.TestMapValueComparator" time="0"/>
  <testcase name="sortByValuesAscendingUsingCustomComparator" classname="org.jcvi.jillion.core.util.TestMapValueComparator" time="0"/>
  <testcase name="multiplePeeks" classname="org.jcvi.jillion.core.util.iter.TestPeekableIterator" time="0.004"/>
  <testcase name="noPeeking" classname="org.jcvi.jillion.core.util.iter.TestPeekableIterator" time="0"/>
  <testcase name="withPeeking" classname="org.jcvi.jillion.core.util.iter.TestPeekableIterator" time="0"/>
  <testcase name="multiplePeeks" classname="org.jcvi.jillion.core.util.iter.TestPeekableStreamingIterator" time="0.001"/>
  <testcase name="noPeeking" classname="org.jcvi.jillion.core.util.iter.TestPeekableStreamingIterator" time="0"/>
  <testcase name="withPeeking" classname="org.jcvi.jillion.core.util.iter.TestPeekableStreamingIterator" time="0"/>
  <testcase name="closing" classname="org.jcvi.jillion.core.util.iter.TestPeekableStreamingIterator" time="0"/>
  <testcase name="closeBeforeExceptionShouldCloseWithoutProblems" classname="org.jcvi.jillion.core.util.iter.TestAbstractBlockingClosableIteratorExceptions" time="0.007"/>
  <testcase name="backgroundThreadThrowsExceptionShouldCatchOnHasNextOrNext" classname="org.jcvi.jillion.core.util.iter.TestAbstractBlockingClosableIteratorExceptions" time="1.011"/>
  <testcase name="iterateOverAllNames" classname="org.jcvi.jillion.core.util.iter.TestAbstractBlockingClosableIteratorExceptions" time="0.004"/>
  <testcase name="twoSeconds" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0.014"/>
  <testcase name="hoursMinsAndSeconds" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0.003"/>
  <testcase name="onlyMillisecondsShouldSay0Seconds" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0"/>
  <testcase name="oneHour" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0.001"/>
  <testcase name="oneDay" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0.002"/>
  <testcase name="oneMin" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0"/>
  <testcase name="severalMins" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0.001"/>
  <testcase name="severalMinsPlusSeconds" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0.002"/>
  <testcase name="oneHourAndSeconds" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0"/>
  <testcase name="oneSecond" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0"/>
  <testcase name="oneHourAndMins" classname="org.jcvi.jillion.core.util.TestDateUtilElapsedTime" time="0"/>
  <testcase name="appendArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0.006"/>
  <testcase name="constructorWithCollection" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="sortedInsertEmptyArraShouldMakeNoChanges" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="modificationsToCopyShouldNotAffectOriginal" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="constructUsingInitialArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="constructorWithNullCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="append" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="appendBeyondCapacityShouldGrowArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="insert" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0.002"/>
  <testcase name="remove" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="constructorWithNullArrayShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="appendOtherGrowableByteArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="constructorWithNullElementInCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0.001"/>
  <testcase name="reverseOddNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="prepend" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="removeRange" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="insertArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0.001"/>
  <testcase name="constructorWithSizeZeroShouldBeAllowed" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="binarySearch" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0.003"/>
  <testcase name="copy" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="modificationsToOriginalShouldNotAffectCopy" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="getCountNoMatchesShouldReturn0" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="sortedInsert" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="sortUnSortedValues" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="sortedRemove" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="insertAtOffsetLengthShouldActLikeAppend" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0.006"/>
  <testcase name="prependArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="sortedInsertOnEmptyGrowableArrayShouldAppend" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="mixOfAllOperations" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="sortedInsertSmallerArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="reverseEvenNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0.001"/>
  <testcase name="sortedInsertSameSizedArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="constructorWithNegativeSizeShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="prependOtherGrowableByteArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="removeEmptyRangeShouldDoNothing" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="getCount" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="sortedInsertLargerArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0.001"/>
  <testcase name="insertOtherGrowableByteArray" classname="org.jcvi.jillion.core.util.TestGrowableByteArray" time="0"/>
  <testcase name="appendArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="constructorWithCollection" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="sortedInsertEmptyArraShouldMakeNoChanges" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="modificationsToCopyShouldNotAffectOriginal" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="constructUsingInitialArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="insertOtherGrowableShortArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="constructorWithNullCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="append" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="appendOtherGrowableShortArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0.001"/>
  <testcase name="appendBeyondCapacityShouldGrowArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="insert" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="remove" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0.003"/>
  <testcase name="constructorWithNullArrayShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="constructorWithNullElementInCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="reverseOddNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0.001"/>
  <testcase name="prepend" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0.003"/>
  <testcase name="removeRange" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="insertArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="constructorWithSizeZeroShouldBeAllowed" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="binarySearch" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0.001"/>
  <testcase name="copy" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="modificationsToOriginalShouldNotAffectCopy" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="getCountNoMatchesShouldReturn0" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="sortedInsert" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="sortUnSortedValues" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="sortedRemove" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="insertAtOffsetLengthShouldActLikeAppend" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="prependArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="sortedInsertOnEmptyGrowableArrayShouldAppend" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="mixOfAllOperations" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="sortedInsertSmallerArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="reverseEvenNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="sortedInsertSameSizedArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="prependOtherGrowableShortArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="constructorWithNegativeSizeShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0.004"/>
  <testcase name="removeEmptyRangeShouldDoNothing" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0.001"/>
  <testcase name="getCount" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="sortedInsertLargerArray" classname="org.jcvi.jillion.core.util.TestGrowableShortArray" time="0"/>
  <testcase name="appendArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="constructorWithCollection" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="sortedInsertEmptyArraShouldMakeNoChanges" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0.001"/>
  <testcase name="modificationsToCopyShouldNotAffectOriginal" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="constructUsingInitialArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="constructorWithNullCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="appendOtherGrowableCharArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="append" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="appendBeyondCapacityShouldGrowArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="insert" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="remove" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="constructorWithNullArrayShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="constructorWithNullElementInCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="reverseOddNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="prepend" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="removeRange" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="insertArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="constructorWithSizeZeroShouldBeAllowed" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="binarySearch" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="copy" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="modificationsToOriginalShouldNotAffectCopy" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0.001"/>
  <testcase name="getCountNoMatchesShouldReturn0" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="sortedInsert" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="sortUnSortedValues" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="sortedRemove" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0.007"/>
  <testcase name="insertAtOffsetLengthShouldActLikeAppend" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="prependOtherGrowableCharArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0.001"/>
  <testcase name="prependArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="sortedInsertOnEmptyGrowableArrayShouldAppend" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0.001"/>
  <testcase name="mixOfAllOperations" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="insertOtherGrowableCharArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="sortedInsertSmallerArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="reverseEvenNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="sortedInsertSameSizedArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0.001"/>
  <testcase name="constructorWithNegativeSizeShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="removeEmptyRangeShouldDoNothing" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="getCount" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0"/>
  <testcase name="sortedInsertLargerArray" classname="org.jcvi.jillion.core.util.TestGrowableCharArray" time="0.002"/>
  <testcase name="appendArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0.001"/>
  <testcase name="constructorWithCollection" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="sortedInsertEmptyArraShouldMakeNoChanges" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="modificationsToCopyShouldNotAffectOriginal" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="constructUsingInitialArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="constructorWithNullCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="append" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0.001"/>
  <testcase name="appendBeyondCapacityShouldGrowArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="insert" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="remove" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="constructorWithNullArrayShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="constructorWithNullElementInCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0.002"/>
  <testcase name="reverseOddNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="prepend" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="removeRange" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="insertOtherGrowableIntArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="insertArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0.001"/>
  <testcase name="constructorWithSizeZeroShouldBeAllowed" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="binarySearch" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0.001"/>
  <testcase name="copy" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="appendOtherGrowableIntArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="modificationsToOriginalShouldNotAffectCopy" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="getCountNoMatchesShouldReturn0" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="sortedInsert" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="prependOtherGrowableIntArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="sortUnSortedValues" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="sortedRemove" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="insertAtOffsetLengthShouldActLikeAppend" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0.004"/>
  <testcase name="prependArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="sortedInsertOnEmptyGrowableArrayShouldAppend" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="mixOfAllOperations" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="sortedInsertSmallerArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="reverseEvenNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="sortedInsertSameSizedArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="constructorWithNegativeSizeShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="removeEmptyRangeShouldDoNothing" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="getCount" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="sortedInsertLargerArray" classname="org.jcvi.jillion.core.util.TestGrowableIntArray" time="0"/>
  <testcase name="appendArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="constructorWithCollection" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="sortedInsertEmptyArraShouldMakeNoChanges" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="modificationsToCopyShouldNotAffectOriginal" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0.001"/>
  <testcase name="constructUsingInitialArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="constructorWithNullCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0.004"/>
  <testcase name="append" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="appendBeyondCapacityShouldGrowArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0.001"/>
  <testcase name="insert" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="remove" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="constructorWithNullArrayShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="constructorWithNullElementInCollectionShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="reverseOddNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="prepend" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="prependOtherGrowableLongArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="removeRange" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="insertArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="constructorWithSizeZeroShouldBeAllowed" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="binarySearch" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="insertOtherGrowableLongArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="copy" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="modificationsToOriginalShouldNotAffectCopy" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="getCountNoMatchesShouldReturn0" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="sortedInsert" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="sortUnSortedValues" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0.001"/>
  <testcase name="sortedRemove" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="insertAtOffsetLengthShouldActLikeAppend" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0.001"/>
  <testcase name="prependArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="sortedInsertOnEmptyGrowableArrayShouldAppend" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="mixOfAllOperations" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="appendOtherGrowableLongArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="sortedInsertSmallerArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="reverseEvenNumberOfValues" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="sortedInsertSameSizedArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="constructorWithNegativeSizeShouldThrowException" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="removeEmptyRangeShouldDoNothing" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="getCount" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="sortedInsertLargerArray" classname="org.jcvi.jillion.core.util.TestGrowableLongArray" time="0"/>
  <testcase name="NegativeLengthConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0.003"/>
  <testcase name="constructorWithNegativeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="constructorWithStartBeyondEndStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0.001"/>
  <testcase name="nullArrayWithLengthConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="nullArrayShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="LengthBeyondArrayConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0.001"/>
  <testcase name="iterateEntireArrayWithSingleArgConstructor" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="nullArrayWithStartAndEndConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="constructorWithNegativeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="ZeroLengthConstructorShouldReturnEmptyArray" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0.001"/>
  <testcase name="constructorWithTooLargeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="constructorWithTooLargeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithEqualStartAndEndConstructorShouldIterateOverOneElement" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestByteArrayIterator" time="0"/>
  <testcase name="NegativeLengthConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="constructorWithNegativeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="constructorWithStartBeyondEndStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="nullArrayWithLengthConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="nullArrayShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="LengthBeyondArrayConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0.001"/>
  <testcase name="iterateEntireArrayWithSingleArgConstructor" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="nullArrayWithStartAndEndConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="constructorWithNegativeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="ZeroLengthConstructorShouldReturnEmptyArray" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="constructorWithTooLargeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="constructorWithTooLargeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0.001"/>
  <testcase name="iterateSubArrayWithEqualStartAndEndConstructorShouldIterateOverOneElement" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestShortArrayIterator" time="0"/>
  <testcase name="NegativeLengthConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0.001"/>
  <testcase name="constructorWithNegativeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="constructorWithStartBeyondEndStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="nullArrayWithLengthConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="nullArrayShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="LengthBeyondArrayConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithSingleArgConstructor" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="nullArrayWithStartAndEndConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="constructorWithNegativeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="ZeroLengthConstructorShouldReturnEmptyArray" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="constructorWithTooLargeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="constructorWithTooLargeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithEqualStartAndEndConstructorShouldIterateOverOneElement" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestCharArrayIterator" time="0"/>
  <testcase name="NegativeLengthConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="constructorWithNegativeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="constructorWithStartBeyondEndStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="nullArrayWithLengthConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="nullArrayShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0.001"/>
  <testcase name="LengthBeyondArrayConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithSingleArgConstructor" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="nullArrayWithStartAndEndConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="constructorWithNegativeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="ZeroLengthConstructorShouldReturnEmptyArray" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="constructorWithTooLargeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="constructorWithTooLargeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithEqualStartAndEndConstructorShouldIterateOverOneElement" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestIntArrayIterator" time="0"/>
  <testcase name="NegativeLengthConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="constructorWithNegativeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="constructorWithStartBeyondEndStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="nullArrayWithLengthConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="nullArrayShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="LengthBeyondArrayConstructorShouldThrowException" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithSingleArgConstructor" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="nullArrayWithStartAndEndConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="constructorWithNegativeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithStartAndEndConstructor" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="ZeroLengthConstructorShouldReturnEmptyArray" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="constructorWithTooLargeStartShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0.001"/>
  <testcase name="constructorWithTooLargeEndShouldThrowExcepption" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithEqualStartAndEndConstructorShouldIterateOverOneElement" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="iterateEntireArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="iterateSubArrayWithLengthConstructor" classname="org.jcvi.jillion.core.util.iter.TestLongArrayIterator" time="0"/>
  <testcase name="arrayOfPositiveSignedValues" classname="org.jcvi.jillion.core.util.TestUnsignedByteArray" time="0.005"/>
  <testcase name="changeValuesInArrayAfterObjCreationShouldNotUpdateValues" classname="org.jcvi.jillion.core.util.TestUnsignedByteArray" time="0.001"/>
  <testcase name="notEqualToOtherClass" classname="org.jcvi.jillion.core.util.TestUnsignedByteArray" time="0"/>
  <testcase name="arrayOfMixOfSignedAndUnsignedValues" classname="org.jcvi.jillion.core.util.TestUnsignedByteArray" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.core.util.TestUnsignedByteArray" time="0"/>
  <testcase name="diffValuesShouldNotBeEquals" classname="org.jcvi.jillion.core.util.TestUnsignedByteArray" time="0"/>
  <testcase name="nullConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.TestUnsignedByteArray" time="0"/>
  <testcase name="sameValuesShouldBeEquals" classname="org.jcvi.jillion.core.util.TestUnsignedByteArray" time="0"/>
  <testcase name="arrayOfPositiveSignedValues" classname="org.jcvi.jillion.core.util.TestUnsignedShortArray" time="0"/>
  <testcase name="notEqualToOtherClass" classname="org.jcvi.jillion.core.util.TestUnsignedShortArray" time="0"/>
  <testcase name="arrayOfMixOfSignedAndUnsignedValues" classname="org.jcvi.jillion.core.util.TestUnsignedShortArray" time="0.001"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.core.util.TestUnsignedShortArray" time="0"/>
  <testcase name="diffValuesShouldNotBeEquals" classname="org.jcvi.jillion.core.util.TestUnsignedShortArray" time="0"/>
  <testcase name="nullConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.TestUnsignedShortArray" time="0"/>
  <testcase name="sameValuesShouldBeEquals" classname="org.jcvi.jillion.core.util.TestUnsignedShortArray" time="0"/>
  <testcase name="changeValuesInArrayAfterObjCreationShouldSeeUpdatedValues" classname="org.jcvi.jillion.core.util.TestUnsignedShortArray" time="0"/>
  <testcase name="arrayOfPositiveSignedValues" classname="org.jcvi.jillion.core.util.TestUnsignedIntArray" time="0.001"/>
  <testcase name="notEqualToOtherClass" classname="org.jcvi.jillion.core.util.TestUnsignedIntArray" time="0"/>
  <testcase name="arrayOfMixOfSignedAndUnsignedValues" classname="org.jcvi.jillion.core.util.TestUnsignedIntArray" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.core.util.TestUnsignedIntArray" time="0"/>
  <testcase name="diffValuesShouldNotBeEquals" classname="org.jcvi.jillion.core.util.TestUnsignedIntArray" time="0"/>
  <testcase name="nullConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.util.TestUnsignedIntArray" time="0"/>
  <testcase name="sameValuesShouldBeEquals" classname="org.jcvi.jillion.core.util.TestUnsignedIntArray" time="0"/>
  <testcase name="changeValuesInArrayAfterObjCreationShouldSeeUpdatedValues" classname="org.jcvi.jillion.core.util.TestUnsignedIntArray" time="0"/>
  <testcase name="noDefensiveCopy" classname="org.jcvi.jillion.core.util.iter.TestArrayIterator" time="0.003"/>
  <testcase name="shouldThrowNoSuchElementExceptionIfNoNext" classname="org.jcvi.jillion.core.util.iter.TestArrayIterator" time="0.001"/>
  <testcase name="defaultConstructorMakesDefensiveCopy" classname="org.jcvi.jillion.core.util.iter.TestArrayIterator" time="0.001"/>
  <testcase name="emptyArray" classname="org.jcvi.jillion.core.util.iter.TestArrayIterator" time="0"/>
  <testcase name="removeShouldThrowUnSupportedOpException" classname="org.jcvi.jillion.core.util.iter.TestArrayIterator" time="0"/>
  <testcase name="nullArrayShouldThrowNPE" classname="org.jcvi.jillion.core.util.iter.TestArrayIterator" time="0"/>
  <testcase name="makeDefensiveCopy" classname="org.jcvi.jillion.core.util.iter.TestArrayIterator" time="0.001"/>
  <testcase name="iterate" classname="org.jcvi.jillion.core.util.iter.TestArrayIterator" time="0"/>
  <testcase name="singleStreamingIterator" classname="org.jcvi.jillion.core.util.iter.TestChainedIteratorSupplier" time="0.002"/>
  <testcase name="downstreamSupplierIsNotCalledUntilNeeded" classname="org.jcvi.jillion.core.util.iter.TestChainedIteratorSupplier" time="0.002"/>
  <testcase name="multipleIterators" classname="org.jcvi.jillion.core.util.iter.TestChainedIteratorSupplier" time="0.001"/>
  <testcase name="closeSingleStreamingIterator" classname="org.jcvi.jillion.core.util.iter.TestChainedIteratorSupplier" time="0"/>
  <testcase name="singleIterator" classname="org.jcvi.jillion.core.util.iter.TestChainedIteratorSupplier" time="0.001"/>
  <testcase name="multipleStreamingIterators" classname="org.jcvi.jillion.core.util.iter.TestChainedIteratorSupplier" time="0.004"/>
  <testcase name="lengthLargerThanIntMaxAddedShouldThrowException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0.008"/>
  <testcase name="negativePercentShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="lengthSmallerThanIntMinAddedShouldThrowException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="allLengthsNotEnoughToMeetPercentageValueShouldReturnEmpty" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0.016"/>
  <testcase name="zeroLengthNGCollectorShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="emptyCollector" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0.009"/>
  <testcase name="onehundredPercentNGShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="negativePercentNGShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="negativeGenomeSizeShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="mergingNonBuilderShouldThrowException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0.036"/>
  <testcase name="onehundredPercentShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="onehundredPercentNGCollectorShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="negativeLengthAddedShouldThrowException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="zeroLengthNGShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="negativePercentNGCollectorShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.util.TestGenomeStatistics" time="0"/>
  <testcase name="longBuilder[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="intXStream[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="XStream[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0.004"/>
  <testcase name="longStream[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0.012"/>
  <testcase name="IntegerStream[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0.001"/>
  <testcase name="intStream[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0.004"/>
  <testcase name="longXStream[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="LongStream[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="intBuilder[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="parallelIntStream[0]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0.016"/>
  <testcase name="longBuilder[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="intXStream[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="XStream[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="longStream[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="IntegerStream[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="intStream[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="longXStream[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="LongStream[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0.001"/>
  <testcase name="intBuilder[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="parallelIntStream[1]" classname="org.jcvi.jillion.core.util.TestN50Computations" time="0"/>
  <testcase name="longBuilder[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="intXStream[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="XStream[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="longStream[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0.001"/>
  <testcase name="IntegerStream[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="intStream[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="longXStream[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="LongStream[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0.001"/>
  <testcase name="intBuilder[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="parallelIntStream[0]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="longBuilder[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="intXStream[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="XStream[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="longStream[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0.001"/>
  <testcase name="IntegerStream[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="intStream[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="longXStream[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0.001"/>
  <testcase name="LongStream[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="intBuilder[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="parallelIntStream[1]" classname="org.jcvi.jillion.core.util.TestN75Computations" time="0"/>
  <testcase name="longBuilder[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="intXStream[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="XStream[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0.007"/>
  <testcase name="longStream[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="IntegerStream[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="intStream[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="longXStream[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="LongStream[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="intBuilder[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="parallelIntStream[0]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0.001"/>
  <testcase name="longBuilder[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="intXStream[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="XStream[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="longStream[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="IntegerStream[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="intStream[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="longXStream[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0.001"/>
  <testcase name="LongStream[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="intBuilder[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="parallelIntStream[1]" classname="org.jcvi.jillion.core.util.TestN90Computations" time="0"/>
  <testcase name="longBuilder[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="intXStream[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0.005"/>
  <testcase name="XStream[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0.001"/>
  <testcase name="longStream[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0.005"/>
  <testcase name="IntegerStream[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="intStream[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0.001"/>
  <testcase name="longXStream[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="LongStream[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0.001"/>
  <testcase name="intBuilder[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="parallelIntStream[0]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="longBuilder[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="intXStream[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="XStream[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="longStream[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="IntegerStream[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="intStream[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="longXStream[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="LongStream[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="intBuilder[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="parallelIntStream[1]" classname="org.jcvi.jillion.core.util.TestNG50Computations" time="0"/>
  <testcase name="longBuilder[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="intXStream[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="XStream[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="longStream[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="IntegerStream[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="intStream[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="longXStream[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="LongStream[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="intBuilder[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="parallelIntStream[0]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="longBuilder[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="intXStream[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="XStream[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="longStream[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="IntegerStream[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="intStream[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="longXStream[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="LongStream[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="intBuilder[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0"/>
  <testcase name="parallelIntStream[1]" classname="org.jcvi.jillion.core.util.TestNG75Computations" time="0.006"/>
  <testcase name="longBuilder[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="intXStream[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="XStream[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="longStream[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="IntegerStream[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0.001"/>
  <testcase name="intStream[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="longXStream[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="LongStream[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0.001"/>
  <testcase name="intBuilder[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="parallelIntStream[0]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="longBuilder[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="intXStream[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="XStream[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0.005"/>
  <testcase name="longStream[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="IntegerStream[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="intStream[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="longXStream[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0.002"/>
  <testcase name="LongStream[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="intBuilder[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0"/>
  <testcase name="parallelIntStream[1]" classname="org.jcvi.jillion.core.util.TestNG90Computations" time="0.001"/>
  <testcase name="completesNormally" classname="org.jcvi.jillion.core.util.TestThrowingStream" time="0.003"/>
  <testcase name="throwAfter2nd" classname="org.jcvi.jillion.core.util.TestThrowingStream" time="0.001"/>
  <testcase name="throwAfter2ndOrdered" classname="org.jcvi.jillion.core.util.TestThrowingStream" time="0.001"/>
  <testcase name="throwCheckedException" classname="org.jcvi.jillion.core.util.TestThrowingStream" time="0"/>
  <testcase name="zeroMaxSizeShouldThrowException" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0"/>
  <testcase name="addOneElement" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0"/>
  <testcase name="addlotsOfRecordsInSortOrder" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0"/>
  <testcase name="tryToAddElementBeyondMaxShouldButElementIsLessThanWorstInQueueShouldDoNothing" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0"/>
  <testcase name="emptyQueue" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0"/>
  <testcase name="negativeMaxSizeShouldThrowException" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0"/>
  <testcase name="customComparator" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0.011"/>
  <testcase name="addlotsOfRecordsInReverseSortOrder" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0"/>
  <testcase name="addOneElementBeyondMaxShouldRemoveSmallest" classname="org.jcvi.jillion.internal.core.util.TestBoundedPriorityQueue" time="0"/>
  <testcase name="closeCloseable" classname="org.jcvi.jillion.core.io.TestIOUtil_closeAndIgnore" time="0.014"/>
  <testcase name="closeNullInputStreamShouldDoNothing" classname="org.jcvi.jillion.core.io.TestIOUtil_closeAndIgnore" time="0"/>
  <testcase name="closeScanner" classname="org.jcvi.jillion.core.io.TestIOUtil_closeAndIgnore" time="0.022"/>
  <testcase name="closingCloseableThrowingIOExceptionShouldBeIgnored" classname="org.jcvi.jillion.core.io.TestIOUtil_closeAndIgnore" time="0.001"/>
  <testcase name="block" classname="org.jcvi.jillion.core.io.TestIOUtil_blockingSkip" time="0.217"/>
  <testcase name="skipPastEOFShouldThrowIOException" classname="org.jcvi.jillion.core.io.TestIOUtil_blockingSkip" time="0.001"/>
  <testcase name="throwsIOException" classname="org.jcvi.jillion.core.io.TestIOUtil_blockingSkip" time="0"/>
  <testcase name="fullSkip" classname="org.jcvi.jillion.core.io.TestIOUtil_blockingSkip" time="0"/>
  <testcase name="skipZeroBytesShouldDoNothing" classname="org.jcvi.jillion.core.io.TestIOUtil_blockingSkip" time="0.004"/>
  <testcase name="didNotReadEnough" classname="org.jcvi.jillion.core.io.TestIOUtil_readByteArray" time="0.001"/>
  <testcase name="valid" classname="org.jcvi.jillion.core.io.TestIOUtil_readByteArray" time="0.001"/>
  <testcase name="didNotReadEnough" classname="org.jcvi.jillion.core.io.TestIOUtil_readShortArray" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.core.io.TestIOUtil_readShortArray" time="0"/>
  <testcase name="convertByte" classname="org.jcvi.jillion.core.io.TestIOUtil_convertSignedToUnsigned" time="0"/>
  <testcase name="convertShort" classname="org.jcvi.jillion.core.io.TestIOUtil_convertSignedToUnsigned" time="0"/>
  <testcase name="convertInt" classname="org.jcvi.jillion.core.io.TestIOUtil_convertSignedToUnsigned" time="0"/>
  <testcase name="put" classname="org.jcvi.jillion.core.io.TestIOUtil_UnsignedByteArray" time="0.048"/>
  <testcase name="read" classname="org.jcvi.jillion.core.io.TestIOUtil_UnsignedByteArray" time="0"/>
  <testcase name="nullDirThrowsNullPointerException" classname="org.jcvi.jillion.core.io.TestIOUtil_deleteDir" time="0"/>
  <testcase name="nestedDeleteFailsShouldThrowIOExceptionAndStopDeleting" classname="org.jcvi.jillion.core.io.TestIOUtil_deleteDir" time="0.083"/>
  <testcase name="nestedDirs" classname="org.jcvi.jillion.core.io.TestIOUtil_deleteDir" time="0.012"/>
  <testcase name="deleteChildren" classname="org.jcvi.jillion.core.io.TestIOUtil_deleteDir" time="0.001"/>
  <testcase name="deleteDir" classname="org.jcvi.jillion.core.io.TestIOUtil_deleteDir" time="0.01"/>
  <testcase name="fileThatDoesNotExistShouldDoNothing" classname="org.jcvi.jillion.core.io.TestIOUtil_deleteDir" time="0"/>
  <testcase name="singleFileGetsDeleted" classname="org.jcvi.jillion.core.io.TestIOUtil_deleteDir" time="0.002"/>
  <testcase name="errorOnDeleteShouldThrowIOException" classname="org.jcvi.jillion.core.io.TestIOUtil_deleteDir" time="0.001"/>
  <testcase name="smallunsignedLong" classname="org.jcvi.jillion.core.io.TestIOUtil_convertToUnsignedByteArray" time="0"/>
  <testcase name="smallUnsignedShortAddPadding" classname="org.jcvi.jillion.core.io.TestIOUtil_convertToUnsignedByteArray" time="0"/>
  <testcase name="unsignedShort" classname="org.jcvi.jillion.core.io.TestIOUtil_convertToUnsignedByteArray" time="0"/>
  <testcase name="unsignedByte" classname="org.jcvi.jillion.core.io.TestIOUtil_convertToUnsignedByteArray" time="0"/>
  <testcase name="unsignedLong" classname="org.jcvi.jillion.core.io.TestIOUtil_convertToUnsignedByteArray" time="0"/>
  <testcase name="unsignedInt" classname="org.jcvi.jillion.core.io.TestIOUtil_convertToUnsignedByteArray" time="0.001"/>
  <testcase name="mkdirAlreadyExists" classname="org.jcvi.jillion.core.io.TestIOUtil_whenMakingDirectories" time="0.001"/>
  <testcase name="mkdirs" classname="org.jcvi.jillion.core.io.TestIOUtil_whenMakingDirectories" time="0"/>
  <testcase name="mkdirFailsShouldThrowIOException" classname="org.jcvi.jillion.core.io.TestIOUtil_whenMakingDirectories" time="0.001"/>
  <testcase name="mkdirsAlreadyExists" classname="org.jcvi.jillion.core.io.TestIOUtil_whenMakingDirectories" time="0"/>
  <testcase name="mkdir" classname="org.jcvi.jillion.core.io.TestIOUtil_whenMakingDirectories" time="0"/>
  <testcase name="mkdirsFailsShouldThrowIOException" classname="org.jcvi.jillion.core.io.TestIOUtil_whenMakingDirectories" time="0.001"/>
  <testcase name="convertUnsignedToSigned[0]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedByteToSignedByte" time="0"/>
  <testcase name="convertUnsignedToSigned[1]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedByteToSignedByte" time="0"/>
  <testcase name="convertUnsignedToSigned[2]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedByteToSignedByte" time="0"/>
  <testcase name="convertUnsignedToSigned[3]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedByteToSignedByte" time="0"/>
  <testcase name="convertUnsignedToSigned[4]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedByteToSignedByte" time="0"/>
  <testcase name="convertUnsignedToSigned[5]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedByteToSignedByte" time="0"/>
  <testcase name="convertUnsignedToSigned[6]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedByteToSignedByte" time="0"/>
  <testcase name="convertUnsignedToSigned[7]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedByteToSignedByte" time="0"/>
  <testcase name="convertUnsignedToSigned[0]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedShortToSignedShort" time="0"/>
  <testcase name="convertUnsignedToSigned[1]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedShortToSignedShort" time="0"/>
  <testcase name="convertUnsignedToSigned[2]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedShortToSignedShort" time="0"/>
  <testcase name="convertUnsignedToSigned[3]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedShortToSignedShort" time="0.001"/>
  <testcase name="convertUnsignedToSigned[4]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedShortToSignedShort" time="0"/>
  <testcase name="convertUnsignedToSigned[5]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedShortToSignedShort" time="0"/>
  <testcase name="convertUnsignedToSigned[6]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedShortToSignedShort" time="0"/>
  <testcase name="convertUnsignedToSigned[7]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedShortToSignedShort" time="0"/>
  <testcase name="convertUnsignedToSigned[0]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="convertUnsignedToSigned[1]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="convertUnsignedToSigned[2]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="convertUnsignedToSigned[3]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="convertUnsignedToSigned[4]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="convertUnsignedToSigned[5]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="convertUnsignedToSigned[6]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="convertUnsignedToSigned[7]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="convertUnsignedToSigned[8]" classname="org.jcvi.jillion.core.io.TestIOUtil_unsignedIntToSignedInt" time="0"/>
  <testcase name="numBits[0]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[0]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[1]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[1]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[2]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[2]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[3]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[3]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[4]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[4]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[5]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[5]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[6]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[6]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[7]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[7]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[8]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[8]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[9]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[9]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[10]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[10]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[11]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[11]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[12]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[12]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[13]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[13]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[14]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[14]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[15]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[15]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[16]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[16]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[17]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[17]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[18]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[18]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[19]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[19]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[20]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[20]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[21]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[21]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[22]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[22]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[23]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[23]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[24]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[24]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[25]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[25]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[26]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[26]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[27]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[27]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[28]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[28]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[29]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[29]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[30]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[30]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[31]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[31]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[32]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[32]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.004"/>
  <testcase name="numBits[33]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[33]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[34]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[34]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[35]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[35]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[36]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[36]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[37]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[37]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[38]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[38]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[39]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[39]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[40]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[40]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[41]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[41]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[42]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[42]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[43]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[43]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[44]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[44]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[45]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[45]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[46]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[46]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[47]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[47]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[48]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[48]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[49]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[49]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[50]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[50]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[51]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[51]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[52]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[52]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[53]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[53]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[54]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[54]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[55]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[55]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[56]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[56]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[57]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[57]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.007"/>
  <testcase name="numBits[58]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[58]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[59]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[59]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[60]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[60]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[61]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[61]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[62]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[62]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[63]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[63]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[64]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[64]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[65]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[65]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[66]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[66]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[67]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[67]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[68]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[68]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[69]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[69]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[70]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[70]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[71]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[71]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[72]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[72]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[73]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[73]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[74]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[74]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[75]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[75]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[76]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[76]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[77]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[77]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[78]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[78]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[79]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[79]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[80]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[80]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[81]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[81]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[82]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[82]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[83]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[83]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[84]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[84]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[85]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[85]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[86]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[86]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[87]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[87]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[88]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[88]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[89]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[89]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[90]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[90]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[91]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[91]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[92]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[92]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[93]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[93]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[94]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[94]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[95]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[95]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[96]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[96]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[97]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[97]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[98]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[98]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[99]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[99]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[100]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[100]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[101]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[101]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[102]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[102]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[103]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[103]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[104]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[104]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.005"/>
  <testcase name="numBits[105]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[105]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[106]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[106]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[107]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[107]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[108]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[108]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[109]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[109]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[110]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[110]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[111]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[111]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[112]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[112]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[113]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[113]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[114]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[114]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[115]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[115]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[116]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[116]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[117]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[117]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[118]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[118]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[119]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[119]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[120]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[120]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[121]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[121]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[122]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[122]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[123]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[123]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[124]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[124]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[125]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[125]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[126]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[126]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[127]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[127]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[128]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[128]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[129]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[129]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[130]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[130]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[131]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[131]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[132]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[132]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[133]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[133]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[134]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[134]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[135]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[135]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[136]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[136]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[137]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[137]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[138]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[138]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[139]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[139]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[140]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[140]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[141]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[141]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[142]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.002"/>
  <testcase name="numBytes[142]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[143]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[143]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[144]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[144]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[145]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[145]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[146]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[146]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[147]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[147]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[148]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[148]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[149]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[149]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[150]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[150]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[151]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[151]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[152]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[152]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[153]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[153]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[154]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[154]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[155]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[155]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[156]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[156]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[157]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[157]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[158]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[158]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[159]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[159]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[160]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[160]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.004"/>
  <testcase name="numBits[161]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[161]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[162]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[162]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[163]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[163]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[164]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[164]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[165]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[165]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[166]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[166]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[167]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[167]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[168]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[168]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[169]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[169]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[170]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[170]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[171]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[171]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[172]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[172]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[173]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[173]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[174]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[174]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[175]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[175]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[176]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[176]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[177]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[177]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[178]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[178]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[179]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[179]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[180]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[180]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[181]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[181]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[182]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[182]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[183]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[183]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[184]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[184]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[185]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[185]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[186]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[186]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.002"/>
  <testcase name="numBits[187]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[187]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[188]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[188]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[189]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[189]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[190]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[190]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[191]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[191]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[192]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[192]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[193]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[193]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[194]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[194]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[195]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[195]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[196]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[196]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[197]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.005"/>
  <testcase name="numBytes[197]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[198]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[198]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[199]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[199]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[200]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[200]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[201]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.003"/>
  <testcase name="numBytes[201]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[202]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[202]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[203]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[203]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[204]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[204]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[205]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[205]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[206]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[206]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[207]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[207]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[208]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[208]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[209]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[209]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[210]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[210]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[211]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[211]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[212]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[212]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[213]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[213]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[214]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[214]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[215]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[215]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[216]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[216]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[217]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[217]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[218]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[218]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[219]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[219]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[220]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[220]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[221]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[221]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[222]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[222]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[223]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[223]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[224]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[224]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[225]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[225]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[226]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[226]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[227]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.005"/>
  <testcase name="numBytes[227]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[228]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[228]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[229]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[229]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[230]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[230]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[231]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[231]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[232]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[232]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[233]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[233]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[234]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[234]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[235]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[235]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[236]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[236]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[237]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[237]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[238]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[238]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[239]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[239]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[240]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[240]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[241]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[241]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[242]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[242]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[243]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[243]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[244]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[244]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[245]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[245]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[246]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[246]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[247]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[247]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[248]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[248]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[249]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[249]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[250]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[250]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[251]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[251]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[252]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[252]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[253]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[253]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[254]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[254]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[255]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[255]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[256]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[256]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[257]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[257]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[258]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[258]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[259]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[259]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[260]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[260]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[261]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.003"/>
  <testcase name="numBytes[261]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[262]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[262]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[263]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[263]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[264]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[264]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[265]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[265]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[266]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[266]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[267]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[267]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[268]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[268]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[269]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[269]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[270]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[270]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[271]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[271]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[272]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[272]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[273]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[273]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[274]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[274]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[275]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[275]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[276]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[276]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[277]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[277]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[278]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[278]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[279]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[279]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[280]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[280]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[281]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[281]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[282]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[282]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[283]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[283]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[284]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[284]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[285]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[285]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[286]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[286]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[287]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[287]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[288]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[288]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[289]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[289]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[290]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[290]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[291]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[291]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[292]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[292]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[293]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[293]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[294]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[294]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[295]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[295]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[296]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[296]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[297]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[297]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[298]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[298]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[299]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[299]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[300]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[300]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[301]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[301]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[302]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[302]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[303]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[303]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[304]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[304]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[305]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[305]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[306]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[306]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[307]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[307]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[308]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[308]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[309]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[309]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[310]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[310]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[311]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[311]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[312]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[312]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[313]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[313]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[314]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[314]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[315]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[315]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[316]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[316]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[317]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[317]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[318]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[318]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[319]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[319]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[320]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[320]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[321]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[321]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[322]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[322]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[323]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[323]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[324]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[324]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[325]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[325]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[326]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[326]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[327]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[327]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[328]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[328]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[329]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[329]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[330]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[330]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[331]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[331]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[332]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[332]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[333]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[333]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[334]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[334]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[335]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[335]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[336]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[336]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[337]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[337]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[338]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[338]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[339]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[339]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[340]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[340]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[341]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[341]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[342]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[342]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[343]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[343]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[344]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[344]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[345]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[345]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[346]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[346]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[347]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[347]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[348]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[348]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[349]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[349]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[350]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[350]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[351]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[351]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[352]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[352]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[353]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[353]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[354]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[354]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[355]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[355]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[356]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[356]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[357]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[357]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[358]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[358]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[359]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[359]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[360]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[360]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[361]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[361]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.002"/>
  <testcase name="numBits[362]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[362]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[363]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[363]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[364]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[364]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[365]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[365]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[366]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[366]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[367]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[367]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[368]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[368]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[369]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.004"/>
  <testcase name="numBytes[369]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[370]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[370]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[371]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[371]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[372]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[372]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[373]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[373]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[374]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.005"/>
  <testcase name="numBytes[374]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[375]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[375]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[376]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[376]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[377]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[377]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[378]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[378]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[379]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[379]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[380]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[380]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[381]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[381]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[382]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[382]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[383]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[383]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[384]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[384]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[385]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[385]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[386]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[386]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[387]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[387]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[388]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[388]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[389]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[389]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[390]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[390]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[391]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[391]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[392]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[392]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.002"/>
  <testcase name="numBits[393]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[393]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[394]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[394]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[395]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[395]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[396]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[396]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[397]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[397]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[398]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.006"/>
  <testcase name="numBytes[398]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[399]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[399]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[400]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[400]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[401]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[401]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[402]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[402]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[403]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[403]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[404]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[404]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[405]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[405]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[406]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[406]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[407]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[407]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[408]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[408]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[409]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[409]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[410]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[410]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[411]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[411]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[412]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[412]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[413]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[413]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[414]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[414]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[415]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[415]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[416]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[416]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[417]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[417]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[418]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[418]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[419]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[419]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[420]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[420]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[421]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[421]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[422]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[422]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[423]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[423]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[424]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[424]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[425]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[425]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[426]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[426]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[427]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[427]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[428]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[428]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[429]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[429]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[430]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[430]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[431]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[431]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[432]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[432]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[433]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[433]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[434]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[434]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[435]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[435]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[436]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[436]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[437]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[437]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[438]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[438]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[439]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[439]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[440]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[440]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[441]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[441]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[442]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[442]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[443]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[443]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[444]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[444]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[445]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[445]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[446]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[446]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[447]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[447]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[448]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[448]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[449]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[449]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[450]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[450]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[451]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[451]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[452]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[452]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[453]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[453]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[454]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[454]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[455]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[455]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[456]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.002"/>
  <testcase name="numBytes[456]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[457]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[457]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[458]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[458]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[459]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[459]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[460]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[460]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[461]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[461]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[462]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[462]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[463]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[463]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[464]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[464]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[465]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[465]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[466]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[466]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[467]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[467]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[468]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[468]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[469]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[469]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[470]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[470]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[471]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[471]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[472]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[472]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[473]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[473]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[474]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[474]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[475]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[475]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[476]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[476]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[477]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[477]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[478]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[478]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[479]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[479]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[480]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[480]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[481]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[481]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[482]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[482]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[483]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[483]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[484]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[484]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[485]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[485]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[486]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[486]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[487]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[487]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[488]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[488]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[489]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[489]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[490]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[490]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[491]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[491]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[492]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[492]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[493]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[493]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[494]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[494]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[495]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[495]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[496]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[496]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[497]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[497]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[498]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[498]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[499]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[499]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[500]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[500]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[501]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[501]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[502]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[502]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.005"/>
  <testcase name="numBits[503]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[503]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[504]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[504]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[505]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[505]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[506]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[506]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[507]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[507]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBits[508]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[508]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[509]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[509]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[510]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[510]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[511]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[511]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[512]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0.001"/>
  <testcase name="numBytes[512]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[513]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[513]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[514]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[514]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBits[515]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="numBytes[515]" classname="org.jcvi.jillion.core.io.TestIOUtil_getUnsignedBitAndByteCount" time="0"/>
  <testcase name="toBitSetShort" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0.001"/>
  <testcase name="toByteArrayShouldThrowNPEIfBitSetIsNull" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="oneByte" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="toBitSetByte" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="toBitSetByteOnlyNeeds2bits" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="multipleBytes" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="toBitSetShouldThrowNPEIfArrayIsNull" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="toByteArrayNegativeBitLengthShouldThrowException" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="oneBitSet" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="noBytes" classname="org.jcvi.jillion.core.io.TestIOUtil_bitSet" time="0"/>
  <testcase name="nullInputStreamShouldThrowNPE" classname="org.jcvi.jillion.core.io.TestIOUtil_copy" time="0.002"/>
  <testcase name="copyLargeFile" classname="org.jcvi.jillion.core.io.TestIOUtil_copy" time="1.532"/>
  <testcase name="nullOutputStreamShouldThrowNPE" classname="org.jcvi.jillion.core.io.TestIOUtil_copy" time="0.001"/>
  <testcase name="copySmallFile" classname="org.jcvi.jillion.core.io.TestIOUtil_copy" time="0"/>
  <testcase name="nullInputStreamShouldThrowNPE" classname="org.jcvi.jillion.core.io.TestIOUtil_toByteArray" time="0"/>
  <testcase name="inputStream" classname="org.jcvi.jillion.core.io.TestIOUtil_toByteArray" time="0"/>
  <testcase name="nullInputStreamShouldThrowNPE" classname="org.jcvi.jillion.core.io.TestIOUtil_toString" time="0"/>
  <testcase name="testToString" classname="org.jcvi.jillion.core.io.TestIOUtil_toString" time="0"/>
  <testcase name="withEncodingNullInputStreamShouldThrowNPE" classname="org.jcvi.jillion.core.io.TestIOUtil_toString" time="0"/>
  <testcase name="testToStringWithNullEncodingShouldUseDefault" classname="org.jcvi.jillion.core.io.TestIOUtil_toString" time="0"/>
  <testcase name="testToStringWithEncoding" classname="org.jcvi.jillion.core.io.TestIOUtil_toString" time="0"/>
  <testcase name="computeNumberOfBits[0]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0.002"/>
  <testcase name="computeNumberOfBits[1]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0.001"/>
  <testcase name="computeNumberOfBits[2]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0"/>
  <testcase name="computeNumberOfBits[3]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0"/>
  <testcase name="computeNumberOfBits[4]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0"/>
  <testcase name="computeNumberOfBits[5]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0.001"/>
  <testcase name="computeNumberOfBits[6]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0"/>
  <testcase name="computeNumberOfBits[7]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0.001"/>
  <testcase name="computeNumberOfBits[8]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0"/>
  <testcase name="computeNumberOfBits[9]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0"/>
  <testcase name="computeNumberOfBits[10]" classname="org.jcvi.jillion.core.io.TestIOUtil_numberOfBitsIn" time="0"/>
  <testcase name="makeTempDirWithSuffix" classname="org.jcvi.jillion.core.io.TestIOUtil_createTempDir" time="0.001"/>
  <testcase name="makeTempDirNoSuffixMakesNameEndingWithDotTmp" classname="org.jcvi.jillion.core.io.TestIOUtil_createTempDir" time="0.001"/>
  <testcase name="relativePathSiblingFile" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0.001"/>
  <testcase name="getBaseNameFromFile" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getBaseNameFromStringFullPath" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getBaseNameFromFileWithNoExtensionShouldReturnEmptyString" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0.001"/>
  <testcase name="relativePathSameFileShouldReturnEmptyString" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getBaseNameFromString" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getExtensionFromStringWithNoExtensionShouldReturnEmptyString" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getExtensionFromFileWithNoExtensionShouldReturnEmptyString" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getExtensionFromFile" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getExtensionFromStringFullPath" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="relativePathToHigherFile" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="relativePathToLowerFile" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getBaseNameFromStringWithNoExtension" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="getExtensionFromString" classname="org.jcvi.jillion.core.io.TestFileUtil" time="0"/>
  <testcase name="differentLengthMagicNumber" classname="org.jcvi.jillion.core.io.TestMagicNumberInputStream" time="0"/>
  <testcase name="peakThenRead" classname="org.jcvi.jillion.core.io.TestMagicNumberInputStream" time="0"/>
  <testcase name="readThenPeak" classname="org.jcvi.jillion.core.io.TestMagicNumberInputStream" time="0"/>
  <testcase name="peak" classname="org.jcvi.jillion.core.io.TestMagicNumberInputStream" time="0"/>
  <testcase name="read" classname="org.jcvi.jillion.core.io.TestMagicNumberInputStream" time="0"/>
  <testcase name="notEnoughBytesToFillMagicNumberShouldThrowIOException" classname="org.jcvi.jillion.core.io.TestMagicNumberInputStream" time="0"/>
  <testcase name="readAndCheckIsOpenEachTime" classname="org.jcvi.jillion.core.io.TestOpenAwareInputStream" time="0"/>
  <testcase name="nullConstructorShouldThrowNPE" classname="org.jcvi.jillion.core.io.TestOpenAwareInputStream" time="0"/>
  <testcase name="readingUntilEOFShouldMakeNotOpen" classname="org.jcvi.jillion.core.io.TestOpenAwareInputStream" time="0"/>
  <testcase name="readArrayEntireStreamWithoutCheckingIsOpen" classname="org.jcvi.jillion.core.io.TestOpenAwareInputStream" time="0"/>
  <testcase name="readEntireStreamWithoutCheckingIsOpen" classname="org.jcvi.jillion.core.io.TestOpenAwareInputStream" time="0"/>
  <testcase name="closingStreamShouldMakeIsOpenReturnFalse" classname="org.jcvi.jillion.core.io.TestOpenAwareInputStream" time="0"/>
  <testcase name="readArrayEntireStreamInChunksWhileCheckingIsOpen" classname="org.jcvi.jillion.core.io.TestOpenAwareInputStream" time="0"/>
  <testcase name="seekToMiddleAndOnlyReadPoritionReadAllAtOnce" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.001"/>
  <testcase name="seektoMiddleReadMultipleChunksTillEOF" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0"/>
  <testcase name="readFullyOneByteAtATime" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.005"/>
  <testcase name="legnthSetToHalfReadFullyOneByteAtATime" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.002"/>
  <testcase name="readFullyReadPastEOF" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.002"/>
  <testcase name="legnthSetToEOFReadFullyAllAtOnce" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.001"/>
  <testcase name="readFullyAllInLargeBlocks" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.002"/>
  <testcase name="seekToMiddleAndOnlyReadPoritionReadFullyOneByteAtATime" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.001"/>
  <testcase name="legnthSetToHalfReadInChunks" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.001"/>
  <testcase name="seekToMiddleAndOnlyReadPoritionReadBeyondEOF" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0"/>
  <testcase name="legnthSetToEOFReadFullyOneByteAtATime" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.001"/>
  <testcase name="seektoMiddleReadTillEOF" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.001"/>
  <testcase name="legnthSetToHalfReadFullyAllAtOnce" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.003"/>
  <testcase name="dontOwnFileCloseKeepFileOpen" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0.001"/>
  <testcase name="readFullyAllAtOnce" classname="org.jcvi.jillion.core.io.TestRandomAccessFileInputStream" time="0"/>
  <testcase name="decodedCorrectly[raw]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0.001"/>
  <testcase name="startFromOffset[raw]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="canBeCalledMultipletimes[raw]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="matchesRaw[raw]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="getRange[raw]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="decodedCorrectly[zip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="startFromOffset[zip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="canBeCalledMultipletimes[zip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0.001"/>
  <testcase name="matchesRaw[zip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="getRange[zip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="decodedCorrectly[gzip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0.003"/>
  <testcase name="startFromOffset[gzip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="canBeCalledMultipletimes[gzip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="matchesRaw[gzip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0.001"/>
  <testcase name="getRange[gzip]" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierForFile" time="0"/>
  <testcase name="emptyFileShouldNotThrowException" classname="org.jcvi.jillion.core.io.TestInputStreamSupplierWithEmptyFile" time="0"/>
  <testcase name="multipleBulkReads[0]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0.001"/>
  <testcase name="read[0]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="readAll[0]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="multipleBulkReads[1]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="read[1]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="readAll[1]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="multipleBulkReads[2]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="read[2]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="readAll[2]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="multipleBulkReads[3]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="read[3]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="readAll[3]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="multipleBulkReads[4]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="read[4]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0.003"/>
  <testcase name="readAll[4]" classname="org.jcvi.jillion.core.io.TestSubLengthInputStream" time="0"/>
  <testcase name="multiLinesSetPositionWindows" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0"/>
  <testcase name="multiLinesSetPositionOS9" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0"/>
  <testcase name="nullInputStreamShouldThrowNPE" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0"/>
  <testcase name="multiLinesOS9" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0.007"/>
  <testcase name="multiLinesWindows" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0"/>
  <testcase name="oneLineOnlyNoEOLWithSetPosition" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0"/>
  <testcase name="multiLinesSetPositionUnix" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0"/>
  <testcase name="multiLinesUnix" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0.001"/>
  <testcase name="oneLineOnlyNoEOL" classname="org.jcvi.jillion.core.io.TestTextLineParser" time="0"/>
  <testcase name="negativeKShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0.001"/>
  <testcase name="smallestOverMaxMBShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="largerThanCachedSizesK" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0.001"/>
  <testcase name="cachedSizesMB" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="largerThanCachedSizesMB" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="overMaxMBShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="overMaxKShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="negativeMBShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="cachedSizesK" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="largestUnderMaxKB" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="largestUnderMaxMB" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0"/>
  <testcase name="smallestOverMaxKBShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.io.TestBufferSize" time="0.001"/>
  <testcase name="pushBackMultipleLine" classname="org.jcvi.jillion.core.io.TestPushBackBufferedReader" time="0"/>
  <testcase name="pushBackFirstLine" classname="org.jcvi.jillion.core.io.TestPushBackBufferedReader" time="0.001"/>
  <testcase name="closeBeforeDone" classname="org.jcvi.jillion.core.io.TestPushBackBufferedReader" time="0"/>
  <testcase name="closeBeforeDoneWithPushBack" classname="org.jcvi.jillion.core.io.TestPushBackBufferedReader" time="0"/>
  <testcase name="noPushBackWorksLikeNormalReader" classname="org.jcvi.jillion.core.io.TestPushBackBufferedReader" time="0"/>
  <testcase name="shitNegativeStrand" classname="org.jcvi.jillion.core.residue.TestFrame" time="0.002"/>
  <testcase name="shitPositiveStrand" classname="org.jcvi.jillion.core.residue.TestFrame" time="0"/>
  <testcase name="isAmbiguity[0]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[0]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[0]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[1]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[1]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[1]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[2]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[2]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[2]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[3]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[3]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[3]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[4]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[4]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[4]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[5]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[5]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[5]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[6]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[6]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[6]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[7]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[7]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[7]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[8]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[8]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[8]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isAmbiguity[9]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="isGap[9]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="reverseCompliment[9]" classname="org.jcvi.jillion.core.residue.nt.TestNucleotide" time="0"/>
  <testcase name="ambiguityMatchBasesThatMakeItUpAndViceVersa" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="equalNucleotidesAlsoMatch" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="B" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0.004"/>
  <testcase name="D" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="H" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="K" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="M" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0.003"/>
  <testcase name="R" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="S" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="V" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="W" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0.001"/>
  <testcase name="Y" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="nMatchesAllNonGap" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="nullShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="nonAmbiguityMatchesItsAmbiguity" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideMatches" time="0"/>
  <testcase name="oddToString" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0.001"/>
  <testcase name="negativeOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0.001"/>
  <testcase name="oddRangedIterator" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="evenEncodesAndDecodes" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0.001"/>
  <testcase name="evenRangedIterator" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="isGap" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="evenIterator" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="oddEncodesAndDecodes" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0.001"/>
  <testcase name="oddIterator" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="getBeyondLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="oddNumberOfBasesEndsWithC" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="testOddNumberOfBasesEveryPossibleFinalBase" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0.002"/>
  <testcase name="evenToString" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="noBases" classname="org.jcvi.jillion.core.residue.nt.TestBasicNucleotideCodec" time="0"/>
  <testcase name="oneBaseAmbiguityShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="negativeOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="oneBase" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="rangedIterator" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0.001"/>
  <testcase name="iteratorLastByteHasOnly1Base" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="encodeWithOneN" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="lastByteHasOnly2Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="lastByteHasOnly3Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0.001"/>
  <testcase name="rangedIteratorLastByteHasOnly1Base" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="encodeWithFourNs" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="getUngappedLength" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="NOffsetsEncodedAsInts" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0.121"/>
  <testcase name="iteratorLastByteHasOnly2Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0.001"/>
  <testcase name="iteratorLastByteHasOnly3Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="getBeyondLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="NOffsetsEncodedAsShorts" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="encodeWithTwoNs" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="hasAmbiguityShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="alwaysSaysNumGapsIs0" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="rangedIteratorLastByteHasOnly2Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0.001"/>
  <testcase name="rangedIteratorLastByteHasOnly3Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="lastByteHasOnly1Base" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="encodeWithTwoConsecutiveNs" classname="org.jcvi.jillion.core.residue.nt.TestAcgtnNucleotideCodec" time="0"/>
  <testcase name="oneBaseAmbiguityShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="encodeWithTwoConsecutiveGaps" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0.001"/>
  <testcase name="gapOffsetsEncodedAsInts" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0.102"/>
  <testcase name="negativeOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0.006"/>
  <testcase name="oneBase" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="rangedIterator" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="gapOffsetsEncodedAsShorts" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="iteratorLastByteHasOnly1Base" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="lastByteHasOnly2Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="lastByteHasOnly3Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="rangedIteratorLastByteHasOnly1Base" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="encodeWithTwoGaps" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="isGap" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="encodeWithOneGap" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="iteratorLastByteHasOnly2Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="iteratorLastByteHasOnly3Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0.001"/>
  <testcase name="getBeyondLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="hasAmbiguityShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="rangedIteratorLastByteHasOnly2Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0.001"/>
  <testcase name="rangedIteratorLastByteHasOnly3Bases" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="lastByteHasOnly1Base" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="encodeWithFourGaps" classname="org.jcvi.jillion.core.residue.nt.TestAcgtGapNucleotideCodec" time="0"/>
  <testcase name="getGappedOffsetWithNegativeValueShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0.001"/>
  <testcase name="getGappedOffsetFor" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toGappedRangeEndTooBigShouldThrowIndexOutOfBounds" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0.002"/>
  <testcase name="getNumberOfGaps" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0.001"/>
  <testcase name="getUngappedOffsetEqualToLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getWithNegativeValueShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toBuilder" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0.001"/>
  <testcase name="decode" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getUngappedOffsetFor" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getNumberOfLeadingGaps" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0.001"/>
  <testcase name="testToString" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="rangedIterator" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toGappedRangeBeginTooBigShouldThrowIndexOutOfBounds" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getGapOffsets" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getGappedOffsetEqualToLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getNumberOfGapsUntil" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="isGap" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getUngappedOffsetBeyondLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getUngappedLength" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getUngappedOffsetWithNegativeValueShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getLength" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toGappedRange" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toGappedRangeNegativeEndRangeShouldThrowIndexOutOfBounds" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toUngappedRangeNegativeBeginRangeShouldThrowIndexOutOfBounds" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0.001"/>
  <testcase name="toUngappedRangeNullRangeShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toGappedRangeNegativeBeginRangeShouldThrowIndexOutOfBounds" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toUngappedRangeNegativeEndRangeShouldThrowIndexOutOfBounds" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="getGappedOffsetBeyondLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toUngappedRange" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toGappedRangeNullRangeShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toUngappedRangeEndTooBigShouldThrowIndexOutOfBounds" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0"/>
  <testcase name="toUngappedRangeBeginTooBigShouldThrowIndexOutOfBounds" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequence" time="0.001"/>
  <testcase name="consedGap" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="extendedAShouldReturnA" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="extendedAShouldReturnC" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="extendedAShouldReturnG" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="extendedAShouldReturnT" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="A" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0.001"/>
  <testcase name="B" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="C" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="D" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="G" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="H" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="K" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="M" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0.001"/>
  <testcase name="N" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="R" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="S" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="T" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="V" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="W" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="Y" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="gap" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyphGetAmbiguity" time="0"/>
  <testcase name="mirrorsGetAmbiguityFor" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGetBasesFor" time="0.001"/>
  <testcase name="noGapsOneDifference" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0.001"/>
  <testcase name="oneGapNoDifferences" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0.001"/>
  <testcase name="exactlyTheSame" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0"/>
  <testcase name="fullSequence" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0.009"/>
  <testcase name="negativeStartOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0.001"/>
  <testcase name="twoGapsNoDifferences" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0"/>
  <testcase name="threeDifferences" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0"/>
  <testcase name="oneDifferences" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0"/>
  <testcase name="sequenceGoesBeyondReferenceShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0"/>
  <testcase name="twoDifferences" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence" time="0.001"/>
  <testcase name="convertGappedToUngappedLastIndexShouldReturnLengthMinusNumberOfGaps" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence_gappedtoUngapped" time="0"/>
  <testcase name="indexOfGapToUngappedIndexShouldReturnIndexMinusNumGaps" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence_gappedtoUngapped" time="0"/>
  <testcase name="convertGappedToUngappedOneGapShouldReturnIndexMinusOne" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence_gappedtoUngapped" time="0"/>
  <testcase name="convertGappedToUngapped_beforeGapsShouldReturnSameNumber" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedNucleotideSequence_gappedtoUngapped" time="0"/>
  <testcase name="lastSnpNIsEncodedCorrectly" classname="org.jcvi.jillion.core.residue.nt.TestVHTNGS_365" time="0"/>
  <testcase name="lastSnpNotNIsEncodedCorrectly" classname="org.jcvi.jillion.core.residue.nt.TestVHTNGS_365" time="0"/>
  <testcase name="convertXToN" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyph_GetGlyphsFor" time="0"/>
  <testcase name="convertGlyph" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideGlyph_GetGlyphsFor" time="0.001"/>
  <testcase name="negativeCapacityShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="setInitialCapacity" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="ungapNoGapsShouldNotAffectSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="toUngappedRangeWithNoGapsShouldReturnSameRange" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.008"/>
  <testcase name="turnOffCompression" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="ungapHasOneGapShouldRemoveGap" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="appendNucleotide" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="ungapSequenceWithNsButHasNoGaps" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteNullRangeShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="isEqualToDifferentSequenceLengthSeqShouldReturnFalse" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="toUngappedRangeDownStreamGapsOnly" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="getUngappedRangeStartsBeyondSeqLengthShouldThrowIndexOutOfBoundsException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trimEmptyDeletesEntireSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.004"/>
  <testcase name="insertSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trimAndAppendSeesDownstreamChangesAndChangesCodecAccordinly" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="reverseEvenNumberOfBases" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replaceBeyondLastOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteEmptyButBeyondLengthShouldDoNothing" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="appendCharArrayWithNullsShouldIgnoreNull" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteRemovesNumGapsCorrectly" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="getUngappedRangeEndsBeyondSeqLengthShouldThrowIndexOutOfBoundsException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="getUngappedRangeRangeBeforeAnyGaps" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="testComplement" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertContentsOfOtherBuilderAtNegativeOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="reverseComplementOddNumberOfBases" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="builderWithOtherSequenceAsPrefixShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="appendContentsOfOtherBuilder" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="changesToCopyDontAffectOriginal" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="appendCharArrayWithWhitespace" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="testToString" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="reverseComplementEvenNumberOfBases" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="prependString" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.005"/>
  <testcase name="appendNullNucleotideShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteMultipleBases" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertContentsOfOtherBuilder2BeyondLastOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replaceGapWithNonGap" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="isEqualToDifferentSequenceShouldReturnFalse" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="getUngappedRangeRangeSpansGaps" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="copySubRangeWithFullRange" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="getUngappedRangeNullRangeShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="reverseOddNumberOfBases" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trimReturnsSameReference" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="getUngappedRangeRangeIsOnGapCoord" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="toUngappedRangeWithConsecutiveInternalGapsShouldGrowEnd" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="differentValuesBeyondTailShouldStillBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="deleteSingleBase" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="appendContentsOfOtherBuilderWithGaps" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="appendNucleotideSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trimEndBeyondLengthShouldAdjustToEnd" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteRangeGoesBeyondLengthShouldDeleteAsMuchAsPossible" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="clearThenAppend" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="differentValuesShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replaceWithNullShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteEmptyShouldDoNothing" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replaceAtNegativeOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="copySubRangeGoesBeforeStartShouldOnlyCopyStartingAtStart" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="isEqualToSameSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="buildWithReference" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertNucleotide" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertArray" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertMultipleBaseSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trim" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="isEqualToNullShouldReturnFalse" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="copySubRange" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteRemovesNumAmbiguitiesCorrectly" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="clear" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trimInsideConstructor" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="reverseComplementPalindromicSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteAllBasesShouldReturnEmptySequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replaceWithN" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertOffsetBeyondLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="singleSequenceInConstructor" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertNucleotideAtNegativeOffsetShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="singleNucleotideSequenceInConstructor" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="getUngappedRangeNoGaps" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="ungapSequenceWithManyGapsBetweenNs" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteRemovesNumNsCorrectly" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="prependSequenceWithNs" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="replaceAmbiguityWithNonAmbiguity" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="zeroCapacityShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertString" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertSequenceWithNs" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="toUngappedRangeWithOnlyUpstreamGapsShouldReturnSameRange" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replaceNWithNonN" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="getNegativeShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="getUngappedRangeRangeIsOnSpanOfGapsCord" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="getUngappedRangeAfterSomeGaps" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertNucleotideAtBeyondLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="getUngappedRangeRangeAfterGaps" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trimWithReference" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="ungapSequenceWithNs" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="isEqualToDifferentOtherSequenceLengthSeqShouldReturnFalse" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="toUngappedRangeWithMultipleInternalGapsShouldGrowEnd" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertContentsOfOtherBuilderBeyondLastOffsetShouldActLikeAppend" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="deleteEmptyButBeyondNegativeShouldDoNothing" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="getBeyondLengthShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trimNegativeBeginShouldAdjustTo0" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteStartingAtNegativeShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="copySubRangeGoesBeyondLengthShouldOnlyCopyTilLength" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="trimEntirelyNegativeRangeShouldRemoveAllBases" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="nothingBuiltShouldReturnEmptySequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="appendString" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertNullNucleotideShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="prependArray" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="toStringShouldReturnSequenceAsString" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="sameRefShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="prependSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="toUngappedRangeWithGapsAllOver" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="mixOfAllOperations" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="countsNumberOfAmbiguitiesCorrectly" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="appendNucleotideList" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="toUngappedRangeWithOnlyInternalGapsShouldGrowEnd" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="copyCopiesFullSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="prependContentsOfOtherBuilder" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertNullNucleotideSequenceShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="singleSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertNucleotideList" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="insertContentsOfOtherBuilder" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replaceWithAmbiguity" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertMultipleBases" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="replaceWithGap" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="ungapHasMultipleGapsShouldRemoveAllGaps" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="getNOffsetsOfReversed" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0.001"/>
  <testcase name="appendCharArray" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="insertContentsOfNullBuilderShouldThrowException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="deleteStartingAfterLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="prependList" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilder" time="0"/>
  <testcase name="shouldNeverEqualNull" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0"/>
  <testcase name="gappySubSequenceShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0"/>
  <testcase name="subSequenceShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0.001"/>
  <testcase name="sameSequenceWithGapsShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0"/>
  <testcase name="sameSequenceWithTrailingGapsShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0"/>
  <testcase name="allGapsShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0"/>
  <testcase name="differentSequenceShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0"/>
  <testcase name="sameSequenceShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0"/>
  <testcase name="allGapsEqualEmpty" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceBuilderIsEqualToIgnoringGaps" time="0"/>
  <testcase name="shouldNeverEqualNull" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0"/>
  <testcase name="gappySubSequenceShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0"/>
  <testcase name="subSequenceShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0"/>
  <testcase name="sameSequenceWithGapsShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0"/>
  <testcase name="sameSequenceWithTrailingGapsShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0.001"/>
  <testcase name="allGapsShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0"/>
  <testcase name="differentSequenceShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0.001"/>
  <testcase name="sameSequenceShouldBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0"/>
  <testcase name="allGapsEqualEmpty" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceIsEqualToIgnoringGaps" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="differentFirstValueShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="testToString" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="differentSecondValueShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="differentThridValueShouldNotBeEqual" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="sameValuesReturnSameReference" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0.004"/>
  <testcase name="nullFirstShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="nucleotideFactoryMethod" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="nullThirdShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="nullSecondShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="notDifferentObject" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.core.residue.nt.TestTriplet" time="0"/>
  <testcase name="backwardsCompatiable" classname="org.jcvi.jillion.core.residue.nt.TestSerializeDefaultNucleotideSequence" time="0.001"/>
  <testcase name="serializeAndDeserializeObject" classname="org.jcvi.jillion.core.residue.nt.TestSerializeDefaultNucleotideSequence" time="0.002"/>
  <testcase name="backwardsCompatiable" classname="org.jcvi.jillion.core.residue.nt.TestSerializeReferenceEncodedNucleotideSequence" time="0.004"/>
  <testcase name="serializeAndDeserializeObject" classname="org.jcvi.jillion.core.residue.nt.TestSerializeReferenceEncodedNucleotideSequence" time="0.002"/>
  <testcase name="iterateRangeWithNegStart" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequenceIteratorSubRange" time="0.003"/>
  <testcase name="iterateRange" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequenceIteratorSubRange" time="0.003"/>
  <testcase name="iterateRangeTooLongShouldThrowIndexOutOfBoundsException" classname="org.jcvi.jillion.core.residue.nt.TestDefaultNucleotideSequenceIteratorSubRange" time="0"/>
  <testcase name="iterateRangeWithNegStart" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedSequenceIteratorSubRange" time="0.001"/>
  <testcase name="iterateRange" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedSequenceIteratorSubRange" time="0.002"/>
  <testcase name="iterateRangeTooLongShouldThrowIndexOutOfBoundsException" classname="org.jcvi.jillion.core.residue.nt.TestReferenceEncodedSequenceIteratorSubRange" time="0.002"/>
  <testcase name="primerSeqWithAmbiguties" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0.004"/>
  <testcase name="nullSeqShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0"/>
  <testcase name="nullCollectionShouldThrowNPE" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0"/>
  <testcase name="twoAmbiguitiesShouldReturnCascadingPermutations" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0.002"/>
  <testcase name="collectionWithDuplicateResultsWillReturnUniqueSet" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0.002"/>
  <testcase name="emptySequenceShouldReturnSetContainingEmptySequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0"/>
  <testcase name="oneAmbiguityThatCouldBe4BasesShouldReturn4Sequences" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0.001"/>
  <testcase name="noAmbiguitiesShouldReturnSameSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0"/>
  <testcase name="oneAmbiguityThatCouldBe3BasesShouldReturn3Sequences" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0"/>
  <testcase name="singletonCollectionWithReturnsSameResultAsPassingInThatOneSequence" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0"/>
  <testcase name="oneAmbiguityThatCouldBe2BasesShouldReturn2Sequences" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequencePermuter" time="0.001"/>
  <testcase name="kmerSizeOfSeqShouldHave1Kmer" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideKmers" time="0.012"/>
  <testcase name="threeMers" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideKmers" time="0.001"/>
  <testcase name="fiveMers" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideKmers" time="0.001"/>
  <testcase name="lessThanKmerShouldHaveNoKmers" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideKmers" time="0.007"/>
  <testcase name="emptySequenceShouldHaveNoKmers" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideKmers" time="0"/>
  <testcase name="twoKmers" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideKmers" time="0.001"/>
  <testcase name="referencedBasedSequenceNoNs" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="referencedBasedSequenceWithNsSameAsRef" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="referencedBasedSequenceWithBaseInsteadOfN" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="referencedBasedSequenceWithExtraNs" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="multipleIslands" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="noNsButGapsShouldReturnEmpty" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="oneIslandOfNs" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="noNsShouldReturnEmpty" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="singleN" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideRangesOfNs" time="0"/>
  <testcase name="sameAsRangesOfNs" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0.004"/>
  <testcase name="exactCharSubRange" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0"/>
  <testcase name="multipleMatches" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0"/>
  <testcase name="wildcard" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0"/>
  <testcase name="braceMatching" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0.001"/>
  <testcase name="subRangeSearchIsSameAsFilteringFullRangeSearch" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0.002"/>
  <testcase name="multipleMatches2" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0.001"/>
  <testcase name="noMatchesReturnsEmptyStream" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0.001"/>
  <testcase name="exactChars" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0.003"/>
  <testcase name="exactMatch" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideSequenceMatches" time="0"/>
  <testcase name="forEach" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideForEach" time="0.001"/>
  <testcase name="forEachRange" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideForEach" time="0.001"/>
  <testcase name="forEachRangeBiConsumer" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideForEach" time="0.002"/>
  <testcase name="forEachBiConsumer" classname="org.jcvi.jillion.core.residue.nt.TestNucleotideForEach" time="0.001"/>
  <testcase name="abbreviation[0]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[0]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[0]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[0]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[1]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0.001"/>
  <testcase name="threeLetterAbreviation[1]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[1]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[1]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[2]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[2]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[2]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[2]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[3]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[3]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[3]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0.003"/>
  <testcase name="getGlyphFor[3]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[4]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[4]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[4]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[4]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[5]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[5]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[5]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[5]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[6]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[6]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[6]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[6]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[7]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[7]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[7]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[7]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[8]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[8]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[8]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[8]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[9]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[9]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[9]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[9]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[10]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[10]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[10]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[10]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[11]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[11]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[11]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[11]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[12]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[12]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0.001"/>
  <testcase name="name[12]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[12]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[13]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[13]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[13]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[13]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[14]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[14]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[14]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[14]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[15]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[15]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[15]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0.001"/>
  <testcase name="getGlyphFor[15]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[16]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[16]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[16]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[16]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[17]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[17]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0.001"/>
  <testcase name="name[17]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[17]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0.004"/>
  <testcase name="abbreviation[18]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[18]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[18]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[18]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="abbreviation[19]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="threeLetterAbreviation[19]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="name[19]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="getGlyphFor[19]" classname="org.jcvi.jillion.core.residue.aa.TestAminoAcid" time="0"/>
  <testcase name="gappedSequence" classname="org.jcvi.jillion.core.residue.aa.TestCompactProteinSequence" time="0.017"/>
  <testcase name="hasPyrrolysine" classname="org.jcvi.jillion.core.residue.aa.TestCompactProteinSequence" time="0"/>
  <testcase name="decode" classname="org.jcvi.jillion.core.residue.aa.TestCompactProteinSequence" time="0"/>
  <testcase name="length" classname="org.jcvi.jillion.core.residue.aa.TestCompactProteinSequence" time="0.002"/>
  <testcase name="noGaps" classname="org.jcvi.jillion.core.residue.aa.TestCompactProteinSequence" time="0.002"/>
  <testcase name="get" classname="org.jcvi.jillion.core.residue.aa.TestCompactProteinSequence" time="0"/>
  <testcase name="singleBase" classname="org.jcvi.jillion.core.residue.aa.TestCompactProteinSequence" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.residue.aa.TestCompactProteinSequence" time="0.02"/>
  <testcase name="hasPyrrolysine" classname="org.jcvi.jillion.core.residue.aa.TestUngappedProteinSequence" time="0.003"/>
  <testcase name="decode" classname="org.jcvi.jillion.core.residue.aa.TestUngappedProteinSequence" time="0"/>
  <testcase name="length" classname="org.jcvi.jillion.core.residue.aa.TestUngappedProteinSequence" time="0.001"/>
  <testcase name="noGaps" classname="org.jcvi.jillion.core.residue.aa.TestUngappedProteinSequence" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.core.residue.aa.TestUngappedProteinSequence" time="0.001"/>
  <testcase name="singleBase" classname="org.jcvi.jillion.core.residue.aa.TestUngappedProteinSequence" time="0"/>
  <testcase name="serialze" classname="org.jcvi.jillion.core.residue.aa.TestUngappedProteinSequence" time="0.002"/>
  <testcase name="trimBeforeStart" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="insertIterable" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.005"/>
  <testcase name="ModificationsToCopyDoNotAffectOriginal" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="clearAndAppend" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.001"/>
  <testcase name="stringConstructorShouldStartWithResiduesGiven" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="ModificationsToOriginalDoNotAffectCopy" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.001"/>
  <testcase name="multipleAppendsAminoAcids" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.002"/>
  <testcase name="parsingStringShouldRemoveWhitespace" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="emptyConstructorShouldStartHaveNoResidues" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="trimEmptyRangeShouldRemoveEntireSequence" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="noGapsInSequence" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.001"/>
  <testcase name="multipleAppendsString" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="insertMultipleViaString" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="ungapWhenNoGapsExistShouldDoNothing" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.001"/>
  <testcase name="trim" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="insertOtherBuilder" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="clear" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.001"/>
  <testcase name="ungap" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="testToStringShouldPrintSequence" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="insertString" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.004"/>
  <testcase name="gapsInSequence" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="reverse" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="appendSingleAminoAcid" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="appendMultipleAminoAcidsAsString" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="trimBeyondEdge" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="appendOtherBuilder" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="insertAminoAcid" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0.001"/>
  <testcase name="appendSingleAminoAcidAsString" classname="org.jcvi.jillion.core.residue.aa.TestProteinSequenceBuilder" time="0"/>
  <testcase name="doesNotContainFilteredRead" classname="org.jcvi.jillion.core.residue.aa.TestDefaultProteinFastaFileDataStore" time="0.017"/>
  <testcase name="getLast" classname="org.jcvi.jillion.core.residue.aa.TestDefaultProteinFastaFileDataStore" time="0.001"/>
  <testcase name="size" classname="org.jcvi.jillion.core.residue.aa.TestDefaultProteinFastaFileDataStore" time="0"/>
  <testcase name="getSecond" classname="org.jcvi.jillion.core.residue.aa.TestDefaultProteinFastaFileDataStore" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.residue.aa.TestDefaultProteinFastaFileDataStore" time="0.004"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.core.residue.aa.TestDefaultProteinFastaFileDataStore" time="0"/>
  <testcase name="getFirst" classname="org.jcvi.jillion.core.residue.aa.TestDefaultProteinFastaFileDataStore" time="0"/>
  <testcase name="doesNotContainFilteredRead" classname="org.jcvi.jillion.core.residue.aa.TestMementoProteinFastaFileDataStore" time="0.01"/>
  <testcase name="getLast" classname="org.jcvi.jillion.core.residue.aa.TestMementoProteinFastaFileDataStore" time="0.001"/>
  <testcase name="size" classname="org.jcvi.jillion.core.residue.aa.TestMementoProteinFastaFileDataStore" time="0"/>
  <testcase name="getSecond" classname="org.jcvi.jillion.core.residue.aa.TestMementoProteinFastaFileDataStore" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.residue.aa.TestMementoProteinFastaFileDataStore" time="0.006"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.core.residue.aa.TestMementoProteinFastaFileDataStore" time="0.002"/>
  <testcase name="getFirst" classname="org.jcvi.jillion.core.residue.aa.TestMementoProteinFastaFileDataStore" time="0"/>
  <testcase name="doesNotContainFilteredRead" classname="org.jcvi.jillion.core.residue.aa.TestIterationOnlyProteinFastaFileDataStore" time="0.005"/>
  <testcase name="getLast" classname="org.jcvi.jillion.core.residue.aa.TestIterationOnlyProteinFastaFileDataStore" time="0.006"/>
  <testcase name="size" classname="org.jcvi.jillion.core.residue.aa.TestIterationOnlyProteinFastaFileDataStore" time="0"/>
  <testcase name="getSecond" classname="org.jcvi.jillion.core.residue.aa.TestIterationOnlyProteinFastaFileDataStore" time="0.002"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.residue.aa.TestIterationOnlyProteinFastaFileDataStore" time="0.004"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.core.residue.aa.TestIterationOnlyProteinFastaFileDataStore" time="0.006"/>
  <testcase name="getFirst" classname="org.jcvi.jillion.core.residue.aa.TestIterationOnlyProteinFastaFileDataStore" time="0.01"/>
  <testcase name="translateFrame0[0]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.048"/>
  <testcase name="translateFrame1[0]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.063"/>
  <testcase name="translateFrame2[0]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.041"/>
  <testcase name="tableNumber[0]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0"/>
  <testcase name="translateFrame0[1]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.003"/>
  <testcase name="translateFrame1[1]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.002"/>
  <testcase name="translateFrame2[1]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.002"/>
  <testcase name="tableNumber[1]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0"/>
  <testcase name="translateFrame0[2]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.004"/>
  <testcase name="translateFrame1[2]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.008"/>
  <testcase name="translateFrame2[2]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.016"/>
  <testcase name="tableNumber[2]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0"/>
  <testcase name="translateFrame0[3]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.02"/>
  <testcase name="translateFrame1[3]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.024"/>
  <testcase name="translateFrame2[3]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.016"/>
  <testcase name="tableNumber[3]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0"/>
  <testcase name="translateFrame0[4]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.032"/>
  <testcase name="translateFrame1[4]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.013"/>
  <testcase name="translateFrame2[4]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0.019"/>
  <testcase name="tableNumber[4]" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTables" time="0"/>
  <testcase name="ctgShouldBeL" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTableDoNotSubstituteStart" time="0"/>
  <testcase name="ctgShouldBeM" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTableDoNotSubstituteStart" time="0"/>
  <testcase name="ttgShouldBeL" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTableDoNotSubstituteStart" time="0.001"/>
  <testcase name="ttgShouldBeM" classname="org.jcvi.jillion.core.residue.aa.TestIupacTranslationTableDoNotSubstituteStart" time="0"/>
  <testcase name="negativeErrorProbabilityShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.qual.TestPhredQualityStaticMethods" time="0"/>
  <testcase name="ErrorProbabilityOfGreaterThan1ShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.qual.TestPhredQualityStaticMethods" time="0"/>
  <testcase name="ErrorProbabilityOf1ShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.qual.TestPhredQualityStaticMethods" time="0"/>
  <testcase name="zeroErrorProbabilityShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.qual.TestPhredQualityStaticMethods" time="0"/>
  <testcase name="errorRate[0]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[0]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0.001"/>
  <testcase name="errorRate[1]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[1]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[2]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[2]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[3]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[3]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[4]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[4]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[5]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[5]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[6]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[6]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[7]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[7]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[8]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0.001"/>
  <testcase name="convertToQuality[8]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[9]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[9]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="errorRate[10]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="convertToQuality[10]" classname="org.jcvi.jillion.core.qual.TestPhredQuality" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedGlyphCodec" time="0"/>
  <testcase name="toArray" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedGlyphCodec" time="0"/>
  <testcase name="decodeLengthOf" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedGlyphCodec" time="0"/>
  <testcase name="decodeIndex" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedGlyphCodec" time="0"/>
  <testcase name="equalsDifferentlyEncodedSequence" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequence" time="0.003"/>
  <testcase name="rangedIterator" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequence" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequence" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequence" time="0"/>
  <testcase name="toArray" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="testToString" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0.001"/>
  <testcase name="rangedIterator" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0.003"/>
  <testcase name="removingFromIterThrowsException" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0.002"/>
  <testcase name="maxQualityOnEmptySequenceShouldReturnEmpty" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0.001"/>
  <testcase name="get" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="minQuality" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0.001"/>
  <testcase name="getLength" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="avgQuality" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="removingFromRangeIterThrowsException" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="avgQualityOnEmptySequenceShouldReturnEmpty" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="minQualityOnEmptySequenceShouldReturnEmptyOptional" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="maxQuality" classname="org.jcvi.jillion.core.qual.TestDefaultQualitySequence" time="0"/>
  <testcase name="toArray" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0.001"/>
  <testcase name="testToString" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0.002"/>
  <testcase name="rangedIterator" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="removingFromIterThrowsException" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="maxQualityOnEmptySequenceShouldReturnEmpty" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0.001"/>
  <testcase name="get" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="minQuality" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="getLength" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0.007"/>
  <testcase name="avgQuality" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="removingFromRangeIterThrowsException" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0.001"/>
  <testcase name="avgQualityOnEmptySequenceShouldReturnEmpty" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="minQualityOnEmptySequenceShouldReturnEmptyOptional" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="maxQuality" classname="org.jcvi.jillion.core.qual.TestRunLengthEncodedQualitySequenceImpl" time="0"/>
  <testcase name="insertOffsetGreatherThanLengthShouldThrowException" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0.001"/>
  <testcase name="getNegativeOffsetShouldThrowIndexOutOfBoundsException" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="appendArray" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="buildEmptySequence" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="clearAndAppend" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="appendByteValue" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="insert" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0.001"/>
  <testcase name="deleteMiddle" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="negativeInsertOffsetShouldThrowException" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="changesToCopyDoNotAffectOther" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0.002"/>
  <testcase name="trimEmptyRangeShouldRemoveEntireSequence" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="mixOfOperations" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="initialArray" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="deleteEnd" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0.001"/>
  <testcase name="prepend" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="deleteBeginning" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="prependAnotherSequenceBuilder" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0.001"/>
  <testcase name="get" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="copy" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="trim" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="clear" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="buildEmptySequenceInitializedtoLength0" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="initialSizeTooSmallShouldGrowAsNeeded" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="useRunLengthEncoding" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="appendIntValue" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="getBeyondLengthShouldThrowIndexOutOfBoundsException" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="prependAnotherSequence" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="trimRangeExtendsBeyondLength" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0.001"/>
  <testcase name="trimRangeExtendsBeyondStart" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="reverse" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0.001"/>
  <testcase name="prependArray" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="insertOffsetOfLengthShouldActLikeAppend" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="appendAnotherSequenceBuilder" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="trimOffLeftEdgeOfSequence" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="appendAnotherSequence" classname="org.jcvi.jillion.core.qual.TestQualitySequenceBuilder" time="0"/>
  <testcase name="testLongerThanShortMax" classname="org.jcvi.jillion.core.qual.TestReallyLongRunLength" time="0.024"/>
  <testcase name="subRange" classname="org.jcvi.jillion.core.qual.TestQualityStatisticsSummary" time="0.009"/>
  <testcase name="lotsOfQualities" classname="org.jcvi.jillion.core.qual.TestQualityStatisticsSummary" time="0.001"/>
  <testcase name="emptySequenceReturnsEmptyOptional" classname="org.jcvi.jillion.core.qual.TestQualityStatisticsSummary" time="0"/>
  <testcase name="oneQuality" classname="org.jcvi.jillion.core.qual.TestQualityStatisticsSummary" time="0.005"/>
  <testcase name="valueLargerThanShortMax" classname="org.jcvi.jillion.core.pos.TestPosition" time="0.031"/>
  <testcase name="flyweightReusesSameValues" classname="org.jcvi.jillion.core.pos.TestPosition" time="0"/>
  <testcase name="creatingNegativeValueShouldThrowException" classname="org.jcvi.jillion.core.pos.TestPosition" time="0.001"/>
  <testcase name="createValidPosition" classname="org.jcvi.jillion.core.pos.TestPosition" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.core.pos.TestDefaultPositionCodec" time="0"/>
  <testcase name="length" classname="org.jcvi.jillion.core.pos.TestDefaultPositionCodec" time="0"/>
  <testcase name="encodeValuesUptoUnsignedShortMax" classname="org.jcvi.jillion.core.pos.TestDefaultPositionCodec" time="0.001"/>
  <testcase name="indexedDecode" classname="org.jcvi.jillion.core.pos.TestDefaultPositionCodec" time="0"/>
  <testcase name="appendValueGreaterThanShortMax" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0.012"/>
  <testcase name="insertOffsetGreatherThanLengthShouldThrowException" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="appendArray" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="append" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="delete" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="insertOtherSequence" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0.001"/>
  <testcase name="insert" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="copyDoesntAffectOriginal" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="trimEmptyRangeShouldRemoveEntireSequence" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="mixOfOperations" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0.001"/>
  <testcase name="createEmpty" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="initialArray" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="insertAtLengthOffsetShouldActLikeAppend" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="prependOtherSequence" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="prepend" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="insertNegativeOffsetShouldThrowException" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="insertArray" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0.003"/>
  <testcase name="prependOtherBuilder" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="getNegativeLengthShouldThrowIndexOutOfBoundsException" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="trim" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="insertOtherBuilder" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="getOffsetBeyondLengthShouldThrowIndexOutOfBoundsException" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="replace" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="reverse" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="prependArray" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="appendOtherSequence" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="originalDoesntAffectCopy" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="appendOtherBuilder" classname="org.jcvi.jillion.core.pos.TestPositionSequenceBuilder" time="0"/>
  <testcase name="alwaysTrue" classname="org.jcvi.jillion.core.datastore.TestEmptyDataStoreFilter" time="0"/>
  <testcase name="wrappedFilterSaysTrueShouldReturnFalse" classname="org.jcvi.jillion.core.datastore.TestInverseDataStoreFilter" time="0.002"/>
  <testcase name="wrappedFilterSaysFalseShouldReturnTrue" classname="org.jcvi.jillion.core.datastore.TestInverseDataStoreFilter" time="0"/>
  <testcase name="idIsNotInIncludeListShouldNotAccept" classname="org.jcvi.jillion.core.datastore.TestDefaultIncludeDataStoreFilter" time="0.004"/>
  <testcase name="idIsInIncludeListShouldAccept" classname="org.jcvi.jillion.core.datastore.TestDefaultIncludeDataStoreFilter" time="0"/>
  <testcase name="idIsInIncludeListShouldNotAccept" classname="org.jcvi.jillion.core.datastore.TestDefaultExcludeDataStoreFilter" time="0.003"/>
  <testcase name="idIsNotInIncludeListShouldAccept" classname="org.jcvi.jillion.core.datastore.TestDefaultExcludeDataStoreFilter" time="0"/>
  <testcase name="nullPatternShouldThrowNPE" classname="org.jcvi.jillion.core.datastore.TestPatternDataStoreFilter" time="0"/>
  <testcase name="matchesCompletely" classname="org.jcvi.jillion.core.datastore.TestPatternDataStoreFilter" time="0"/>
  <testcase name="patternMatchesOnlyInMiddle" classname="org.jcvi.jillion.core.datastore.TestPatternDataStoreFilter" time="0.001"/>
  <testcase name="patternIsOnlyPrefix" classname="org.jcvi.jillion.core.datastore.TestPatternDataStoreFilter" time="0"/>
  <testcase name="nextThrowsDataStoreExceptionShouldThrowIllegalStateException" classname="org.jcvi.jillion.core.datastore.TestDataStoreIterator" time="0.016"/>
  <testcase name="removeThrowsUnsupportedOpException" classname="org.jcvi.jillion.core.datastore.TestDataStoreIterator" time="0"/>
  <testcase name="nextThrowsNoSuchElementException" classname="org.jcvi.jillion.core.datastore.TestDataStoreIterator" time="0.001"/>
  <testcase name="constructorFails" classname="org.jcvi.jillion.core.datastore.TestDataStoreIterator" time="0"/>
  <testcase name="next" classname="org.jcvi.jillion.core.datastore.TestDataStoreIterator" time="0.001"/>
  <testcase name="doesNotHaveNext" classname="org.jcvi.jillion.core.datastore.TestDataStoreIterator" time="0"/>
  <testcase name="hasNext" classname="org.jcvi.jillion.core.datastore.TestDataStoreIterator" time="0"/>
  <testcase name="tooManyGetsCausesLRUToKickedLeastRecentlyUsedFromCache" classname="org.jcvi.jillion.core.datastore.TestCachedDataStore" time="0.021"/>
  <testcase name="getInCacheShouldGetFromCached" classname="org.jcvi.jillion.core.datastore.TestCachedDataStore" time="0"/>
  <testcase name="clearCacheEarly" classname="org.jcvi.jillion.core.datastore.TestCachedDataStore" time="0.001"/>
  <testcase name="getNotInCacheShouldGetFromDelegate" classname="org.jcvi.jillion.core.datastore.TestCachedDataStore" time="0"/>
  <testcase name="closeShouldCloseDelegateAndClearCache" classname="org.jcvi.jillion.core.datastore.TestCachedDataStore" time="0"/>
  <testcase name="gettingAfterCloseShouldThrowIllegalStateException" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapter" time="0"/>
  <testcase name="getIds" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapter" time="0"/>
  <testcase name="foreach" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapter" time="0.004"/>
  <testcase name="contains" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapter" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapter" time="0.001"/>
  <testcase name="size" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapter" time="0"/>
  <testcase name="throwingForeach" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapter" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapter" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapterProxy" time="0.009"/>
  <testcase name="size" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapterProxy" time="0.001"/>
  <testcase name="close" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapterProxy" time="0"/>
  <testcase name="instanceOf" classname="org.jcvi.jillion.core.datastore.TestMapDataStoreAdapterProxy" time="0"/>
  <testcase name="voidMethodShouldGetCalledForAll" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0.001"/>
  <testcase name="closingIteratorShouldCloseAllIterators" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0.001"/>
  <testcase name="getShouldGetFirstValidFirstFirstHasIt" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0"/>
  <testcase name="booleanShouldReturnFirstTrue_lastIsTrue" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0.001"/>
  <testcase name="longMethodShouldSumTotal" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0"/>
  <testcase name="getShouldGetFirstDoesNotContainIdSecondDoes" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0.004"/>
  <testcase name="iteratorShouldIterateOverAll" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0"/>
  <testcase name="booleanShouldReturnFirstTrue_NonAreTrue" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0"/>
  <testcase name="getShouldGetFirstValidAllDoNotContainIdShouldReturnNull" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0.001"/>
  <testcase name="booleanShouldReturnFirstTrue_FirstIsTrue" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0.001"/>
  <testcase name="getFirstDataStorethatContainsIdThrowsExceptionShouldTossUp" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0"/>
  <testcase name="nullDelegatesShouldThrowNullPointerException" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0"/>
  <testcase name="noDelegatesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.core.datastore.TestChainedDataStore" time="0"/>
  <testcase name="nullInputStreamShouldThrowNPE" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0"/>
  <testcase name="stopAfterFirstDeflineRecords" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.002"/>
  <testcase name="stopAfterSecondDefline" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.001"/>
  <testcase name="stopAfterFirstRecord" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.003"/>
  <testcase name="parseEmptyFile" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.003"/>
  <testcase name="skipFirstRecord" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.001"/>
  <testcase name="stopAfterLastRecord" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.001"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0"/>
  <testcase name="parseAllRecords" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.001"/>
  <testcase name="skipLastRecord" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.005"/>
  <testcase name="skipAllRecords" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.001"/>
  <testcase name="nullVisitorShouldThrowNPE" classname="org.jcvi.jillion.fasta.TestFastaParser" time="0.001"/>
  <testcase name="gettersNoComment" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0.005"/>
  <testcase name="gettersNullComment" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="notEqualsDifferentId" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="length" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="nullIdShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="notEqualsDifferentSequence" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0.001"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="notEqualsNotAQualityFasta" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="parseEntireQualitySequenceBody" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="nullSequenceShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0.001"/>
  <testcase name="gettersWithComment" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="differrentFastaRecordShouldNotBeEqual" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="equalsNoComment" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="equalsDifferentComment" classname="org.jcvi.jillion.fasta.qual.TestQualitySequenceFastaRecordBuilder" time="0"/>
  <testcase name="parseFile" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.007"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.016"/>
  <testcase name="closingDataStoreDuringIterationShouldThrowExceptionOnNext" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.165"/>
  <testcase name="closingDataStoreAfterIteratingShouldActLikeNoMoreElements" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.003"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.003"/>
  <testcase name="closingIdIteratorDuringIterationShouldThrowExceptionOnHasNext" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.065"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.006"/>
  <testcase name="close" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.14"/>
  <testcase name="closingDataStoreDuringIterationShouldThrowExceptionOnHasNext" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.072"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.003"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.001"/>
  <testcase name="closingIdIteratorDuringIterationShouldThrowExceptionOnNext" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.038"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0.113"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStore" time="0"/>
  <testcase name="parseFile" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.182"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.19"/>
  <testcase name="closingDataStoreDuringIterationShouldThrowExceptionOnNext" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.007"/>
  <testcase name="closingDataStoreAfterIteratingShouldActLikeNoMoreElements" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.115"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.086"/>
  <testcase name="closingIdIteratorDuringIterationShouldThrowExceptionOnHasNext" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.004"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.182"/>
  <testcase name="close" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0"/>
  <testcase name="closingDataStoreDuringIterationShouldThrowExceptionOnHasNext" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.003"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.004"/>
  <testcase name="iterator" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.152"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.055"/>
  <testcase name="closingIdIteratorDuringIterationShouldThrowExceptionOnNext" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.006"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.105"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestLargeQualityFastaDataStore" time="0.078"/>
  <testcase name="parseFile" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.009"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.004"/>
  <testcase name="closingDataStoreDuringIterationShouldThrowExceptionOnNext" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.029"/>
  <testcase name="closingDataStoreAfterIteratingShouldActLikeNoMoreElements" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.096"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0"/>
  <testcase name="closingIdIteratorDuringIterationShouldThrowExceptionOnHasNext" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.009"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.004"/>
  <testcase name="close" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.012"/>
  <testcase name="closingDataStoreDuringIterationShouldThrowExceptionOnHasNext" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.014"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.069"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0"/>
  <testcase name="closingIdIteratorDuringIterationShouldThrowExceptionOnNext" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.038"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.004"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.074"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestIndexedQualityFastaFileDataStore" time="0.002"/>
  <testcase name="parseFile" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.009"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0"/>
  <testcase name="closingDataStoreDuringIterationShouldThrowExceptionOnNext" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.038"/>
  <testcase name="closingDataStoreAfterIteratingShouldActLikeNoMoreElements" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.004"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0"/>
  <testcase name="closingIdIteratorDuringIterationShouldThrowExceptionOnHasNext" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.048"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.001"/>
  <testcase name="close" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.038"/>
  <testcase name="closingDataStoreDuringIterationShouldThrowExceptionOnHasNext" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.038"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.004"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0"/>
  <testcase name="closingIdIteratorDuringIterationShouldThrowExceptionOnNext" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.037"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0.058"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.qual.TestDefaultQualityFastaDataStoreAsStream" time="0"/>
  <testcase name="idFilteredStream" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.061"/>
  <testcase name="idFilteredStream" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.01"/>
  <testcase name="idFilteredStreamUsingLambda" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.039"/>
  <testcase name="idFilteredStreamUsingLambda" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.009"/>
  <testcase name="streamEqualsDefault" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.163"/>
  <testcase name="streamEqualsDefault" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.086"/>
  <testcase name="optimizedMemoryUsesIndexedImpl" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.014"/>
  <testcase name="optimizedMemoryUsesIndexedImpl" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.01"/>
  <testcase name="streamImplementationSameNoMatterWhatHintProvided" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.167"/>
  <testcase name="streamImplementationSameNoMatterWhatHintProvided" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.146"/>
  <testcase name="nullFilterShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="nullFilterShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="idFilteredFileUsingLambda" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.008"/>
  <testcase name="idFilteredFileUsingLambda" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.009"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0"/>
  <testcase name="iterationOnlyImpl" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0"/>
  <testcase name="iterationOnlyImpl" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0"/>
  <testcase name="idFilteredFile" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.009"/>
  <testcase name="idFilteredFile" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.007"/>
  <testcase name="nullStreamShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="nullStreamShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaFileDataStoreBuilder" time="0"/>
  <testcase name="noFiltering[0]" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaDataStoreUsingLambdas" time="0.036"/>
  <testcase name="withRecordFilter[0]" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaDataStoreUsingLambdas" time="0.077"/>
  <testcase name="noFiltering[1]" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaDataStoreUsingLambdas" time="0.017"/>
  <testcase name="withRecordFilter[1]" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaDataStoreUsingLambdas" time="0.103"/>
  <testcase name="noFiltering[2]" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaDataStoreUsingLambdas" time="0.007"/>
  <testcase name="withRecordFilter[2]" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaDataStoreUsingLambdas" time="0.088"/>
  <testcase name="negativeBasesPerLineShouldthrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0"/>
  <testcase name="writeFastasWithDefaultOptions" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0.004"/>
  <testcase name="testTmpDirSorting" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="1.316"/>
  <testcase name="sequenceEndsAtEndOfLineExactly" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0.002"/>
  <testcase name="testTmpDirSortingAllInMemory" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0.24"/>
  <testcase name="multiLineFastas" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0"/>
  <testcase name="nullOutputStreamShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0.001"/>
  <testcase name="testInMemorySorting" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0.256"/>
  <testcase name="differentCharSet" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0.002"/>
  <testcase name="parseAndWriteShouldMatch" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0.26"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0"/>
  <testcase name="zeroBasesPerLineShouldthrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.qual.TestQualityFastaWriter" time="0"/>
  <testcase name="nullIdThrowsNullPointerException" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="length" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="notEqualsNotANucleotideFasta" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0.002"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="withoutComment" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="notEqualsDifferentBases" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="withComment" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="equalsNoComment" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0.003"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="equalsDifferentComment" classname="org.jcvi.jillion.fasta.nt.TestNucleotideSequenceFastaRecordFactory" time="0"/>
  <testcase name="getSequenceById" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.003"/>
  <testcase name="closingIdIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.004"/>
  <testcase name="parseFileRecordIterator" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.002"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.007"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.002"/>
  <testcase name="getSubSequenceAtOffset0ShouldBeFullSeq" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.004"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.002"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.009"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.001"/>
  <testcase name="parseIdIterator" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.001"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.001"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.001"/>
  <testcase name="parseFileGet" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.003"/>
  <testcase name="closingFileRecordIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.002"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.001"/>
  <testcase name="closedDataStoreShouldThrowClosedExceptions" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStore" time="0.004"/>
  <testcase name="parseStream" classname="org.jcvi.jillion.fasta.nt.TestDefaultSequenceFastaDataStoreWithNoComment" time="0.001"/>
  <testcase name="getSequenceById" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.002"/>
  <testcase name="closingIdIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.005"/>
  <testcase name="parseFileRecordIterator" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.001"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.002"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.008"/>
  <testcase name="getSubSequenceAtOffset0ShouldBeFullSeq" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.002"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.002"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.008"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.003"/>
  <testcase name="parseIdIterator" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.004"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.002"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.006"/>
  <testcase name="parseFileGet" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.001"/>
  <testcase name="closingFileRecordIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.005"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.001"/>
  <testcase name="closedDataStoreShouldThrowClosedExceptions" classname="org.jcvi.jillion.fasta.nt.TestDefaultNucleotideFastaDataStoreAsStream" time="0.003"/>
  <testcase name="getSequenceById" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.015"/>
  <testcase name="closingIdIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.006"/>
  <testcase name="parseFileRecordIterator" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.002"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.015"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.003"/>
  <testcase name="getSubSequenceAtOffset0ShouldBeFullSeq" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.01"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.011"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.003"/>
  <testcase name="parseIdIterator" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.002"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.006"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0"/>
  <testcase name="parseFileGet" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.015"/>
  <testcase name="closingFileRecordIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.001"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0.002"/>
  <testcase name="closedDataStoreShouldThrowClosedExceptions" classname="org.jcvi.jillion.fasta.nt.TestLargeNucleotideFastaFileDataStore" time="0"/>
  <testcase name="getSequenceById" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.015"/>
  <testcase name="closingIdIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.002"/>
  <testcase name="parseFileRecordIterator" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.009"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.001"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.001"/>
  <testcase name="getSubSequenceAtOffset0ShouldBeFullSeq" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.007"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.001"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.009"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.006"/>
  <testcase name="parseIdIterator" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.001"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.001"/>
  <testcase name="parseFileGet" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.003"/>
  <testcase name="closingFileRecordIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0.006"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0"/>
  <testcase name="closedDataStoreShouldThrowClosedExceptions" classname="org.jcvi.jillion.fasta.nt.TestIndexedNucleotideFastaFileDataStore" time="0"/>
  <testcase name="parseStream" classname="org.jcvi.jillion.fasta.nt.TestLargeSequenceFastaMapWithNoComment" time="0.003"/>
  <testcase name="adaptFasta" classname="org.jcvi.jillion.fasta.nt.TestNucleotideDataStoreFastaAdatper" time="0.003"/>
  <testcase name="numberOfRecords" classname="org.jcvi.jillion.fasta.nt.TestFastaSequenceDataStoreAdapter" time="0.002"/>
  <testcase name="get" classname="org.jcvi.jillion.fasta.nt.TestFastaSequenceDataStoreAdapter" time="0.001"/>
  <testcase name="close" classname="org.jcvi.jillion.fasta.nt.TestFastaSequenceDataStoreAdapter" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.fasta.nt.TestFastaSequenceDataStoreAdapter" time="0.002"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.fasta.nt.TestFastaSequenceDataStoreAdapter" time="0.004"/>
  <testcase name="getSequenceById" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.016"/>
  <testcase name="closingIdIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.016"/>
  <testcase name="parseFileRecordIterator" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.014"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.017"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.011"/>
  <testcase name="getSubSequenceAtOffset0ShouldBeFullSeq" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.017"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.016"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.018"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.023"/>
  <testcase name="parseIdIterator" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.008"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.019"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.015"/>
  <testcase name="parseFileGet" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.017"/>
  <testcase name="closingFileRecordIteratorShouldStopIteration" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.012"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.011"/>
  <testcase name="closedDataStoreShouldThrowClosedExceptions" classname="org.jcvi.jillion.fasta.nt.TestStreamingDefaultSequenceDataStore" time="0.018"/>
  <testcase name="getSubSequenceRange" classname="org.jcvi.jillion.fasta.nt.TestFaiNucleotideFastaFileDataStore" time="0.01"/>
  <testcase name="getSubSequenceAtOffset0ShouldBeFullLength" classname="org.jcvi.jillion.fasta.nt.TestFaiNucleotideFastaFileDataStore" time="0.005"/>
  <testcase name="getSequence" classname="org.jcvi.jillion.fasta.nt.TestFaiNucleotideFastaFileDataStore" time="0.007"/>
  <testcase name="getSubSequence" classname="org.jcvi.jillion.fasta.nt.TestFaiNucleotideFastaFileDataStore" time="0.006"/>
  <testcase name="getSubSequenceRange[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.005"/>
  <testcase name="getSequence[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.001"/>
  <testcase name="getSubSequenceStartAt0[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="usesFaiFile[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getMatches[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.001"/>
  <testcase name="getSubSequence[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.006"/>
  <testcase name="getSubSequenceRange[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.004"/>
  <testcase name="getSequence[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.003"/>
  <testcase name="getSubSequenceStartAt0[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="usesFaiFile[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getMatches[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getSubSequence[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.003"/>
  <testcase name="getSubSequenceRange[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getSequence[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.004"/>
  <testcase name="getSubSequenceStartAt0[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.005"/>
  <testcase name="usesFaiFile[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getMatches[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.01"/>
  <testcase name="getSubSequence[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="getSubSequenceRange[3]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="getSequence[3]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="getSubSequenceStartAt0[3]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.003"/>
  <testcase name="usesFaiFile[3]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getMatches[3]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.01"/>
  <testcase name="getSubSequence[3]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.007"/>
  <testcase name="getSubSequenceRange[4]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getSequence[4]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.004"/>
  <testcase name="getSubSequenceStartAt0[4]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="usesFaiFile[4]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getMatches[4]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.001"/>
  <testcase name="getSubSequence[4]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="getSubSequenceRange[5]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getSequence[5]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.001"/>
  <testcase name="getSubSequenceStartAt0[5]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.008"/>
  <testcase name="usesFaiFile[5]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getMatches[5]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.003"/>
  <testcase name="getSubSequence[5]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="getSubSequenceRange[6]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.001"/>
  <testcase name="getSequence[6]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.001"/>
  <testcase name="getSubSequenceStartAt0[6]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="usesFaiFile[6]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getMatches[6]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.012"/>
  <testcase name="getSubSequence[6]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.006"/>
  <testcase name="getSubSequenceRange[7]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getSequence[7]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.001"/>
  <testcase name="getSubSequenceStartAt0[7]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="usesFaiFile[7]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0"/>
  <testcase name="getMatches[7]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.011"/>
  <testcase name="getSubSequence[7]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreWithFaiFile" time="0.002"/>
  <testcase name="get" classname="org.jcvi.jillion.fasta.nt.TestDefaultUnixAndDosDataStoresParsedCorrectly" time="0.001"/>
  <testcase name="iteratorsMatch" classname="org.jcvi.jillion.fasta.nt.TestDefaultUnixAndDosDataStoresParsedCorrectly" time="0.001"/>
  <testcase name="haveSameNumberOfRecords" classname="org.jcvi.jillion.fasta.nt.TestDefaultUnixAndDosDataStoresParsedCorrectly" time="0"/>
  <testcase name="IdIteratorsMatch" classname="org.jcvi.jillion.fasta.nt.TestDefaultUnixAndDosDataStoresParsedCorrectly" time="0.002"/>
  <testcase name="get" classname="org.jcvi.jillion.fasta.nt.TestIndexedUnixAndDosDataStoresParsedCorrectly" time="0.013"/>
  <testcase name="iteratorsMatch" classname="org.jcvi.jillion.fasta.nt.TestIndexedUnixAndDosDataStoresParsedCorrectly" time="0.02"/>
  <testcase name="haveSameNumberOfRecords" classname="org.jcvi.jillion.fasta.nt.TestIndexedUnixAndDosDataStoresParsedCorrectly" time="0"/>
  <testcase name="IdIteratorsMatch" classname="org.jcvi.jillion.fasta.nt.TestIndexedUnixAndDosDataStoresParsedCorrectly" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.fasta.nt.TestLargeUnixAndDosDataStoresParsedCorrectly" time="0.019"/>
  <testcase name="iteratorsMatch" classname="org.jcvi.jillion.fasta.nt.TestLargeUnixAndDosDataStoresParsedCorrectly" time="0.005"/>
  <testcase name="haveSameNumberOfRecords" classname="org.jcvi.jillion.fasta.nt.TestLargeUnixAndDosDataStoresParsedCorrectly" time="0.001"/>
  <testcase name="IdIteratorsMatch" classname="org.jcvi.jillion.fasta.nt.TestLargeUnixAndDosDataStoresParsedCorrectly" time="0.008"/>
  <testcase name="idFilteredStream" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0"/>
  <testcase name="idFilteredStreamUsingLambda" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0"/>
  <testcase name="streamEqualsDefault" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0.004"/>
  <testcase name="optimizedMemoryUsesIndexedImpl" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="streamImplementationSameNoMatterWhatHintProvided" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0.006"/>
  <testcase name="nullFilterShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0"/>
  <testcase name="idFilteredFileUsingLambda" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0"/>
  <testcase name="iterationOnlyImpl" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0"/>
  <testcase name="idFilteredFile" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="nullStreamShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaFileDataStoreBuilder" time="0"/>
  <testcase name="onlyKeepLongReadsNewLengthMethodNormalFile[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.014"/>
  <testcase name="onlyKeepLongReadsNormalFile[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.023"/>
  <testcase name="noFilterGzipped[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.099"/>
  <testcase name="onlyKeepLongReadsGZippedFile[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.047"/>
  <testcase name="noFilter[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.017"/>
  <testcase name="onlyKeepLongReadsNewLengthMethodGZippedFile[0]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.07"/>
  <testcase name="onlyKeepLongReadsNewLengthMethodNormalFile[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.049"/>
  <testcase name="onlyKeepLongReadsNormalFile[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.033"/>
  <testcase name="noFilterGzipped[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.038"/>
  <testcase name="onlyKeepLongReadsGZippedFile[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.082"/>
  <testcase name="noFilter[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.003"/>
  <testcase name="onlyKeepLongReadsNewLengthMethodGZippedFile[1]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.133"/>
  <testcase name="onlyKeepLongReadsNewLengthMethodNormalFile[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.023"/>
  <testcase name="onlyKeepLongReadsNormalFile[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.017"/>
  <testcase name="noFilterGzipped[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.038"/>
  <testcase name="onlyKeepLongReadsGZippedFile[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.092"/>
  <testcase name="noFilter[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.002"/>
  <testcase name="onlyKeepLongReadsNewLengthMethodGZippedFile[2]" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaDataStoreBuilderWithLambdaRecordFilter" time="0.088"/>
  <testcase name="testInMemorySortedFasta" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.002"/>
  <testcase name="negativeBasesPerLineShouldthrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0"/>
  <testcase name="differentEOL" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.001"/>
  <testcase name="writeFastasWithDefaultOptions" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0"/>
  <testcase name="sequenceEndsAtEndOfLineExactly" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0"/>
  <testcase name="nullEOLShouldUseDefault" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.001"/>
  <testcase name="multiLineFastas" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0"/>
  <testcase name="nullOutputStreamShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.001"/>
  <testcase name="testSortedFastaButDontWriteToTempFile" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.001"/>
  <testcase name="differentCharSet" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.002"/>
  <testcase name="testSortedFastaButWriteToTempFile" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.004"/>
  <testcase name="emptyEOLShouldthrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0"/>
  <testcase name="allOnOneLine" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0"/>
  <testcase name="multiThreadWriter" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.062"/>
  <testcase name="zeroBasesPerLineShouldthrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.nt.TestNucleotideFastaRecordWriter" time="0.001"/>
  <testcase name="visitRedundantDataXTimes" classname="org.jcvi.jillion.fasta.nt.TestParseNonRedundantFastaFile" time="0.004"/>
  <testcase name="createMementoAtLastRedundantOneShouldOnlyVisitLastRedundantRecord" classname="org.jcvi.jillion.fasta.nt.TestParseNonRedundantFastaFile" time="0.002"/>
  <testcase name="createMementoForRecordAfterNonRedundantOne" classname="org.jcvi.jillion.fasta.nt.TestParseNonRedundantFastaFile" time="0.001"/>
  <testcase name="createMementoAtBeginningOfRedundantOneShouldVisitAllRecords" classname="org.jcvi.jillion.fasta.nt.TestParseNonRedundantFastaFile" time="0.001"/>
  <testcase name="createMementoAtSecondRedundantOneShouldSkipFirstRecords" classname="org.jcvi.jillion.fasta.nt.TestParseNonRedundantFastaFile" time="0.003"/>
  <testcase name="mergeMultipleRecordsWithSameSequence" classname="org.jcvi.jillion.fasta.nt.TestNonRedundantNucleotideFastaWriter" time="0.006"/>
  <testcase name="autoCreateFaiFromBuilder" classname="org.jcvi.jillion.fasta.nt.TestFaiWriter" time="0.02"/>
  <testcase name="createNonRedundantFaiFile" classname="org.jcvi.jillion.fasta.nt.TestFaiWriter" time="0.052"/>
  <testcase name="createFaiFile" classname="org.jcvi.jillion.fasta.nt.TestFaiWriter" time="0.001"/>
  <testcase name="nullCharsetShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestFaiWriterBuilder" time="0"/>
  <testcase name="createFaiFileWithNonDefaultCharset" classname="org.jcvi.jillion.fasta.nt.TestFaiWriterBuilder" time="0.013"/>
  <testcase name="createFaiFileWithSpecifiedOutput" classname="org.jcvi.jillion.fasta.nt.TestFaiWriterBuilder" time="0.001"/>
  <testcase name="createFaiFileWithDefaultOutput" classname="org.jcvi.jillion.fasta.nt.TestFaiWriterBuilder" time="0.002"/>
  <testcase name="nullEolShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestFaiWriterBuilder" time="0"/>
  <testcase name="createFaiFileWithNonDefaultEOL" classname="org.jcvi.jillion.fasta.nt.TestFaiWriterBuilder" time="0.005"/>
  <testcase name="fastaThatDoesNotExistShouldThrowIOException" classname="org.jcvi.jillion.fasta.nt.TestFaiWriterBuilder" time="0"/>
  <testcase name="nullFastaShouldThrowNPE" classname="org.jcvi.jillion.fasta.nt.TestFaiWriterBuilder" time="0.001"/>
  <testcase name="commentsShouldAlwaysReturnNull" classname="org.jcvi.jillion.fasta.aa.TestUnCommentedProteinFastaRecord" time="0"/>
  <testcase name="length" classname="org.jcvi.jillion.fasta.aa.TestUnCommentedProteinFastaRecord" time="0"/>
  <testcase name="differentIdShouldNotBeEqual" classname="org.jcvi.jillion.fasta.aa.TestUnCommentedProteinFastaRecord" time="0.001"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.fasta.aa.TestUnCommentedProteinFastaRecord" time="0.001"/>
  <testcase name="differentSeqShouldNotBeEqual" classname="org.jcvi.jillion.fasta.aa.TestUnCommentedProteinFastaRecord" time="0.002"/>
  <testcase name="getters" classname="org.jcvi.jillion.fasta.aa.TestUnCommentedProteinFastaRecord" time="0"/>
  <testcase name="differentCommentsValuesShouldBeEqual" classname="org.jcvi.jillion.fasta.aa.TestUnCommentedProteinFastaRecord" time="0"/>
  <testcase name="sameReferenceShouldBeEqual" classname="org.jcvi.jillion.fasta.aa.TestUnCommentedProteinFastaRecord" time="0"/>
  <testcase name="length" classname="org.jcvi.jillion.fasta.aa.TestCommentedProteinFastaRecord" time="0"/>
  <testcase name="differentIdShouldNotBeEqual" classname="org.jcvi.jillion.fasta.aa.TestCommentedProteinFastaRecord" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.fasta.aa.TestCommentedProteinFastaRecord" time="0"/>
  <testcase name="differentSeqShouldNotBeEqual" classname="org.jcvi.jillion.fasta.aa.TestCommentedProteinFastaRecord" time="0.001"/>
  <testcase name="getters" classname="org.jcvi.jillion.fasta.aa.TestCommentedProteinFastaRecord" time="0"/>
  <testcase name="differentCommentsValuesShouldBeEqual" classname="org.jcvi.jillion.fasta.aa.TestCommentedProteinFastaRecord" time="0"/>
  <testcase name="sameReferenceShouldBeEqual" classname="org.jcvi.jillion.fasta.aa.TestCommentedProteinFastaRecord" time="0"/>
  <testcase name="getFirstRecord" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0.034"/>
  <testcase name="numberOfRecords" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0.101"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0.001"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0.144"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0.016"/>
  <testcase name="iterator" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0.103"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0"/>
  <testcase name="getMiddleRecord" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0.035"/>
  <testcase name="getLastRecord" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0.03"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaDataStore" time="0"/>
  <testcase name="getFirstRecord" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.017"/>
  <testcase name="numberOfRecords" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.058"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.003"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.106"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.009"/>
  <testcase name="iterator" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.053"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.008"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0"/>
  <testcase name="getMiddleRecord" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.031"/>
  <testcase name="getLastRecord" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.028"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.001"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestLargeProteinFastaFileDataStore" time="0.005"/>
  <testcase name="getFirstRecord" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.015"/>
  <testcase name="numberOfRecords" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.052"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.001"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.088"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.009"/>
  <testcase name="iterator" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.051"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0"/>
  <testcase name="getMiddleRecord" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.017"/>
  <testcase name="getLastRecord" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.018"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0.001"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.aa.TestIndexedProteinFastaFileDataStore" time="0"/>
  <testcase name="idFilteredStream" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="idFilteredStreamUsingLambda" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0"/>
  <testcase name="streamEqualsDefault" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0.229"/>
  <testcase name="optimizedMemoryUsesIndexedImpl" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="streamImplementationSameNoMatterWhatHintProvided" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0.017"/>
  <testcase name="nullFilterShouldThrowNPE" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0"/>
  <testcase name="idFilteredFileUsingLambda" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0"/>
  <testcase name="iterationOnlyImpl" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0"/>
  <testcase name="idFilteredFile" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0.005"/>
  <testcase name="nullStreamShouldThrowNPE" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaFileDataStoreBuilder" time="0.001"/>
  <testcase name="noFilter[0]" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaDataStoreBuilderWithLambdaRecordFilter" time="0.001"/>
  <testcase name="onlyKeepSeqsFrom2004[0]" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaDataStoreBuilderWithLambdaRecordFilter" time="0.001"/>
  <testcase name="noFilter[1]" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaDataStoreBuilderWithLambdaRecordFilter" time="0.001"/>
  <testcase name="onlyKeepSeqsFrom2004[1]" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaDataStoreBuilderWithLambdaRecordFilter" time="0.003"/>
  <testcase name="noFilter[2]" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaDataStoreBuilderWithLambdaRecordFilter" time="0"/>
  <testcase name="onlyKeepSeqsFrom2004[2]" classname="org.jcvi.jillion.fasta.aa.TestProteinFastaDataStoreBuilderWithLambdaRecordFilter" time="0.011"/>
  <testcase name="negativeBasesPerLineShouldthrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0"/>
  <testcase name="differentEOL" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0.003"/>
  <testcase name="writeFastasWithDefaultOptions" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0"/>
  <testcase name="sequenceEndsAtEndOfLineExactly" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0"/>
  <testcase name="nullEOLShouldUseDefault" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0"/>
  <testcase name="multiLineFastas" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0"/>
  <testcase name="nullOutputStreamShouldThrowNPE" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0.002"/>
  <testcase name="differentCharSet" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0"/>
  <testcase name="allOnOneLine" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0.031"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0"/>
  <testcase name="zeroBasesPerLineShouldthrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.aa.TestDefaultProteinFastaRecordWriter" time="0.001"/>
  <testcase name="parseFile" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.015"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.009"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.002"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.01"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.01"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.005"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.005"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.007"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionFastaFileDataStore" time="0.003"/>
  <testcase name="parseFile" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0.012"/>
  <testcase name="getSubSequenceRangeById" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0.007"/>
  <testcase name="getSubSequenceByIdThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0.007"/>
  <testcase name="getSubSequenceNegativeOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceById" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0.012"/>
  <testcase name="getSubSequenceBeyondLengthOffsetShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0.006"/>
  <testcase name="getSubSequenceByRangeThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0.008"/>
  <testcase name="getSubSequenceNullRangeShouldThrowNPE" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0"/>
  <testcase name="getSubSequenceByOffsetThatDoesNotExistShouldReturnNull" classname="org.jcvi.jillion.fasta.pos.TestLargePositionFastaFileDataStore" time="0.004"/>
  <testcase name="rewriteShouldMatchExactly" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionSequenceFastaRecordWriter" time="0.005"/>
  <testcase name="differentCharSet" classname="org.jcvi.jillion.fasta.pos.TestDefaultPositionSequenceFastaRecordWriter" time="0.008"/>
  <testcase name="nullSupplierShouldThrowException" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.001"/>
  <testcase name="createOneFileEvery5Records" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.017"/>
  <testcase name="noRecordsWrittenShouldStillCreateEmptyFasta" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.001"/>
  <testcase name="writeIdAndSequenceOnlyShouldMakeNullComment" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.013"/>
  <testcase name="negativeRecordsPerFileShouldThrowException" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.001"/>
  <testcase name="tryingtoWriteRecordAfterCloseShouldThrowException" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.001"/>
  <testcase name="writeIdSequenceAndComment" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.014"/>
  <testcase name="zeroRecordsPerFileShouldThrowException" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.001"/>
  <testcase name="allOneFile" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.01"/>
  <testcase name="callingCloseAgainIsNoOp" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.003"/>
  <testcase name="createOneFilePerRecord" classname="org.jcvi.jillion.fasta.TestRolloverSplitFastaWriter" time="0.02"/>
  <testcase name="nullSupplierShouldThrowException" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.004"/>
  <testcase name="noRecordsWrittenShouldCreateNoFastaFiles" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.003"/>
  <testcase name="negativeRecordsPerFileShouldThrowException" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.004"/>
  <testcase name="tryingtoWriteRecordAfterCloseShouldThrowException" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.001"/>
  <testcase name="zeroRecordsPerFileShouldThrowException" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.001"/>
  <testcase name="createTwoFilesRecords" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.018"/>
  <testcase name="callingCloseAgainIsNoOp" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.001"/>
  <testcase name="createOneFilePerRecord" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.014"/>
  <testcase name="writeIdAndSeqAndComment" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.009"/>
  <testcase name="writeIdAndSeqOnlyShouldMakeNullComment" classname="org.jcvi.jillion.fasta.TestRoundRobinSplitFastaWriter" time="0.012"/>
  <testcase name="correctlyDeconvolve" classname="org.jcvi.jillion.fasta.TestDeconvolveSplitFastaWriter" time="0.011"/>
  <testcase name="donotCreateFilesIfNothingToWrite" classname="org.jcvi.jillion.fasta.TestDeconvolveSplitFastaWriter" time="0.003"/>
  <testcase name="gettingSameDeconvoleKeyBackShouldNotMakeNewFile" classname="org.jcvi.jillion.fasta.TestDeconvolveSplitFastaWriter" time="0.002"/>
  <testcase name="callingCloseAgainIsNoOp" classname="org.jcvi.jillion.fasta.TestDeconvolveSplitFastaWriter" time="0.001"/>
  <testcase name="tryingToWriteRecordAfterCloseShouldThrowIOException" classname="org.jcvi.jillion.fasta.TestDeconvolveSplitFastaWriter" time="0"/>
  <testcase name="nullDeconvolveReturnValueShouldNotWriteRecord" classname="org.jcvi.jillion.fasta.TestDeconvolveSplitFastaWriter" time="0.004"/>
  <testcase name="getIds" classname="org.jcvi.jillion.trace.TestTraceQualityDataStoreAdapter" time="0.012"/>
  <testcase name="size" classname="org.jcvi.jillion.trace.TestTraceQualityDataStoreAdapter" time="0.001"/>
  <testcase name="getReturnsQualities" classname="org.jcvi.jillion.trace.TestTraceQualityDataStoreAdapter" time="0"/>
  <testcase name="getIds" classname="org.jcvi.jillion.trace.TestTraceNucleotideDataStoreAdapter" time="0.009"/>
  <testcase name="size" classname="org.jcvi.jillion.trace.TestTraceNucleotideDataStoreAdapter" time="0.001"/>
  <testcase name="getReturnsQualities" classname="org.jcvi.jillion.trace.TestTraceNucleotideDataStoreAdapter" time="0"/>
  <testcase name="differentSeqAndQualLengthShouldThrowException" classname="org.jcvi.jillion.trace.fastq.TestFastqRecordBuilder" time="0.004"/>
  <testcase name="length" classname="org.jcvi.jillion.trace.fastq.TestFastqRecordBuilder" time="0.001"/>
  <testcase name="idIsNullShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestFastqRecordBuilder" time="0"/>
  <testcase name="noComment" classname="org.jcvi.jillion.trace.fastq.TestFastqRecordBuilder" time="0"/>
  <testcase name="withComment" classname="org.jcvi.jillion.trace.fastq.TestFastqRecordBuilder" time="0.001"/>
  <testcase name="sequenceIsNullShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestFastqRecordBuilder" time="0"/>
  <testcase name="qualitiesAreNullShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestFastqRecordBuilder" time="0"/>
  <testcase name="sangerIs33" classname="org.jcvi.jillion.trace.fastq.TestFastqQualityCodecOffsets" time="0"/>
  <testcase name="solexaIs64" classname="org.jcvi.jillion.trace.fastq.TestFastqQualityCodecOffsets" time="0"/>
  <testcase name="illuminaIs64" classname="org.jcvi.jillion.trace.fastq.TestFastqQualityCodecOffsets" time="0"/>
  <testcase name="decode[0]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.001"/>
  <testcase name="encode[0]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[1]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[1]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[2]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[2]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[3]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[3]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[4]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[4]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[5]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[5]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[6]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[6]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[7]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[7]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[8]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[8]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[9]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[9]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[10]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[10]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[11]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[11]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[12]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[12]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[13]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.001"/>
  <testcase name="encode[13]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[14]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[14]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[15]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[15]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[16]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[16]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[17]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.001"/>
  <testcase name="encode[17]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[18]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[18]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[19]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[19]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[20]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[20]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[21]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[21]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.001"/>
  <testcase name="decode[22]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[22]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[23]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[23]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[24]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[24]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[25]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[25]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[26]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[26]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[27]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[27]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[28]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[28]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[29]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[29]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[30]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[30]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[31]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[31]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[32]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[32]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[33]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[33]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[34]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[34]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[35]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.001"/>
  <testcase name="encode[35]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[36]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[36]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[37]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[37]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[38]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[38]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[39]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[39]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[40]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[40]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[41]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[41]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[42]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[42]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[43]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[43]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[44]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[44]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[45]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[45]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[46]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[46]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[47]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[47]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[48]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[48]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[49]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[49]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[50]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[50]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[51]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[51]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[52]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[52]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[53]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[53]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[54]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[54]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[55]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[55]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[56]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[56]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[57]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[57]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[58]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[58]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[59]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[59]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[60]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[60]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[61]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[61]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.001"/>
  <testcase name="decode[62]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[62]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[63]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[63]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[64]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[64]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[65]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[65]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[66]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[66]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[67]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[67]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[68]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[68]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[69]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[69]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[70]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[70]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[71]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[71]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[72]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[72]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[73]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.001"/>
  <testcase name="encode[73]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[74]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[74]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[75]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[75]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[76]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[76]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[77]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[77]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[78]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.005"/>
  <testcase name="encode[78]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[79]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[79]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[80]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[80]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[81]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[81]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[82]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[82]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[83]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[83]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[84]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[84]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[85]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[85]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[86]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[86]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[87]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[87]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[88]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[88]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[89]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[89]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[90]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[90]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[91]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[91]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[92]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[92]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[93]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[93]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[94]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.001"/>
  <testcase name="encode[94]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[95]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[95]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[96]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[96]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[97]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[97]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[98]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[98]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[99]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[99]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[100]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[100]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[101]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[101]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[102]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[102]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[103]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[103]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[104]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[104]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[105]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[105]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[106]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[106]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[107]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[107]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[108]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[108]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[109]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[109]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[110]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[110]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[111]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[111]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[112]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[112]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[113]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[113]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[114]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[114]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[115]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[115]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[116]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[116]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[117]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[117]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[118]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[118]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[119]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[119]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[120]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[120]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[121]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[121]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0.002"/>
  <testcase name="decode[122]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[122]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[123]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[123]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[124]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[124]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[125]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[125]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[126]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="encode[126]" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodec" time="0"/>
  <testcase name="decode[0]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[0]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[1]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[1]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[2]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[2]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[3]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[3]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[4]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[4]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[5]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[5]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[6]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[6]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[7]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[7]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[8]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[8]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[9]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[9]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[10]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[10]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[11]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[11]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[12]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[12]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[13]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[13]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[14]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[14]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="decode[15]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[15]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[16]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[16]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[17]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[17]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[18]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.003"/>
  <testcase name="encode[18]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[19]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[19]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[20]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[20]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[21]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[21]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[22]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[22]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[23]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[23]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[24]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[24]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[25]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[25]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[26]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[26]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[27]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[27]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="decode[28]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[28]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[29]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[29]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[30]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[30]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[31]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[31]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[32]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[32]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[33]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[33]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[34]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="encode[34]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[35]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[35]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[36]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[36]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[37]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[37]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[38]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[38]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[39]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[39]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[40]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[40]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="decode[41]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[41]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[42]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[42]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[43]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[43]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[44]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[44]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[45]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[45]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[46]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[46]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[47]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[47]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[48]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[48]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[49]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[49]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[50]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[50]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[51]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[51]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[52]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[52]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[53]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[53]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[54]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[54]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[55]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[55]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="decode[56]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[56]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[57]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[57]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[58]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[58]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[59]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[59]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[60]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[60]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[61]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[61]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[62]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[62]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[63]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[63]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[64]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[64]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[65]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[65]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[66]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[66]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[67]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[67]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[68]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[68]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[69]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[69]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[70]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[70]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[71]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[71]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[72]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[72]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[73]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[73]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[74]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[74]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[75]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[75]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[76]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[76]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[77]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[77]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[78]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[78]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[79]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[79]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[80]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[80]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[81]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[81]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[82]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[82]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[83]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[83]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[84]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[84]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[85]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[85]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[86]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[86]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[87]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[87]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[88]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[88]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[89]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[89]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[90]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[90]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[91]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[91]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[92]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[92]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[93]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[93]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[94]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[94]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[95]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[95]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="decode[96]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[96]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[97]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[97]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[98]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[98]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[99]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[99]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[100]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[100]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[101]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[101]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.007"/>
  <testcase name="decode[102]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[102]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="decode[103]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[103]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[104]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[104]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[105]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[105]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[106]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[106]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[107]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[107]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[108]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[108]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[109]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[109]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[110]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[110]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[111]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[111]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[112]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[112]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[113]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[113]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[114]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[114]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[115]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[115]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[116]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[116]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[117]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[117]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="decode[118]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[118]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[119]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[119]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[120]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[120]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[121]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[121]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0.001"/>
  <testcase name="decode[122]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[122]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[123]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[123]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[124]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[124]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[125]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[125]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode[126]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="encode[126]" classname="org.jcvi.jillion.trace.fastq.TestIlluminaFastQQualityCodec" time="0"/>
  <testcase name="decode" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodecActual" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.fastq.TestSangerFastQQualityCodecActual" time="0.001"/>
  <testcase name="qualityValueStartsWithAmpersand" classname="org.jcvi.jillion.trace.fastq.TestParseSangerEncodedFastQFile" time="0.018"/>
  <testcase name="normalRecord" classname="org.jcvi.jillion.trace.fastq.TestParseSangerEncodedFastQFile" time="0.002"/>
  <testcase name="nullInMemorySortComparatorShouldthrowNPE" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0.002"/>
  <testcase name="nullQualitiesShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0.005"/>
  <testcase name="withQualityLineDuplicated" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="illuminaEncoding" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0.001"/>
  <testcase name="defaultsToSangerEncoding" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="nullNucleotidesShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="nullIdShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="multipleRecords" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0.001"/>
  <testcase name="multiline" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="sangerEncoding" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="differentCharset" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="differentNumberOfNucleotidesAndQualitiesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0.003"/>
  <testcase name="negativeCacheSizeTmpDirSortComparatorShouldthrowIllegalArgException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0.002"/>
  <testcase name="writeTrimmedWithNullRangeWritesFullRange" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0.003"/>
  <testcase name="nullTmpDirSortComparatorShouldthrowNPE" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="writeTrimmed" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="multilineLineEndsAtEdgeShouldNotAddExtraBlankLine" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="zeroCacheSizeTmpDirSortComparatorShouldthrowIllegalArgException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriter" time="0"/>
  <testcase name="nullInMemorySortComparatorShouldthrowNPE" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="nullQualitiesShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0.002"/>
  <testcase name="withQualityLineDuplicated" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="illuminaEncoding" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0.001"/>
  <testcase name="defaultsToSangerEncoding" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="nullNucleotidesShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0.001"/>
  <testcase name="nullIdShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="multipleRecords" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="multiline" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="sangerEncoding" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="differentCharset" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="differentNumberOfNucleotidesAndQualitiesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="negativeCacheSizeTmpDirSortComparatorShouldthrowIllegalArgException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0.001"/>
  <testcase name="nullTmpDirSortComparatorShouldthrowNPE" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="multilineLineEndsAtEdgeShouldNotAddExtraBlankLine" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="zeroCacheSizeTmpDirSortComparatorShouldthrowIllegalArgException" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterWithComment" time="0"/>
  <testcase name="trimmedDifferentFastqRecordImpl" classname="org.jcvi.jillion.trace.fastq.TestWriteTrimmedFastq" time="0.007"/>
  <testcase name="untrimmedDifferentFastqRecordImpl" classname="org.jcvi.jillion.trace.fastq.TestWriteTrimmedFastq" time="0.004"/>
  <testcase name="trimmed" classname="org.jcvi.jillion.trace.fastq.TestWriteTrimmedFastq" time="0.007"/>
  <testcase name="trimmedAndReencoded" classname="org.jcvi.jillion.trace.fastq.TestWriteTrimmedFastq" time="0.001"/>
  <testcase name="untrimmed" classname="org.jcvi.jillion.trace.fastq.TestWriteTrimmedFastq" time="0.002"/>
  <testcase name="untrimmedReencoded" classname="org.jcvi.jillion.trace.fastq.TestWriteTrimmedFastq" time="0.002"/>
  <testcase name="useMementoToSkipFirstRecord" classname="org.jcvi.jillion.trace.fastq.TestFastqParser" time="0.008"/>
  <testcase name="visitFile" classname="org.jcvi.jillion.trace.fastq.TestFastqParser" time="0"/>
  <testcase name="useMementoToSkipFirstRecord" classname="org.jcvi.jillion.trace.fastq.TestFastqParserWithFunctionLambda" time="0.005"/>
  <testcase name="visitFile" classname="org.jcvi.jillion.trace.fastq.TestFastqParserWithFunctionLambda" time="0.003"/>
  <testcase name="TooFewQualitiesInFirstRecord" classname="org.jcvi.jillion.trace.fastq.TestInvalidFastq" time="0.003"/>
  <testcase name="TooFewQualitiesInLastRecord" classname="org.jcvi.jillion.trace.fastq.TestInvalidFastq" time="0.001"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.fastq.TestInvalidFastq" time="0"/>
  <testcase name="TooManyQualities" classname="org.jcvi.jillion.trace.fastq.TestInvalidFastq" time="0.001"/>
  <testcase name="closingIdIteratorEarlyShouldHaltIterating" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0.001"/>
  <testcase name="forEach" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0.008"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0.001"/>
  <testcase name="get" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0"/>
  <testcase name="size" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0"/>
  <testcase name="containQueryForIdThatIsNotContainedShouldReturnFalse" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0.001"/>
  <testcase name="closingIteratorEarlyShouldStopIterating" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0"/>
  <testcase name="shouldThrowExceptionIfTryToGetAfterClose" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastQFileDataStore" time="0.001"/>
  <testcase name="filteredDataStore" classname="org.jcvi.jillion.trace.fastq.TestDefaultMultiLineFastqRecordsInDataStore" time="0.001"/>
  <testcase name="multiLineMatchesSingleline" classname="org.jcvi.jillion.trace.fastq.TestDefaultMultiLineFastqRecordsInDataStore" time="0.003"/>
  <testcase name="closingIdIteratorEarlyShouldHaltIterating" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="forEach" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="get" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="size" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="containQueryForIdThatIsNotContainedShouldReturnFalse" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="closingIteratorEarlyShouldStopIterating" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="shouldThrowExceptionIfTryToGetAfterClose" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="numberOfRecords[0]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0"/>
  <testcase name="emptyRead[0]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0"/>
  <testcase name="readIsInSangerFormat[0]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0.001"/>
  <testcase name="numberOfRecords[1]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0"/>
  <testcase name="emptyRead[1]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0.001"/>
  <testcase name="readIsInSangerFormat[1]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0"/>
  <testcase name="numberOfRecords[2]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0.009"/>
  <testcase name="emptyRead[2]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0"/>
  <testcase name="readIsInSangerFormat[2]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileWithEmptyRead" time="0.003"/>
  <testcase name="closingIdIteratorEarlyShouldHaltIterating" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0"/>
  <testcase name="forEach" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0.001"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0.001"/>
  <testcase name="get" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0"/>
  <testcase name="size" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0"/>
  <testcase name="containQueryForIdThatIsNotContainedShouldReturnFalse" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0"/>
  <testcase name="closingIteratorEarlyShouldStopIterating" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0.003"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0"/>
  <testcase name="shouldThrowExceptionIfTryToGetAfterClose" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastQFileDataStore" time="0"/>
  <testcase name="filteredDataStore" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreMultilineGuessCodec" time="0"/>
  <testcase name="multiLineMatchesSingleline" classname="org.jcvi.jillion.trace.fastq.TestDefaultFastqFileDataStoreMultilineGuessCodec" time="0.001"/>
  <testcase name="closingIdIteratorEarlyShouldHaltIterating" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="forEach" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="size" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="containQueryForIdThatIsNotContainedShouldReturnFalse" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0.004"/>
  <testcase name="closingIteratorEarlyShouldStopIterating" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0.003"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0.001"/>
  <testcase name="shouldThrowExceptionIfTryToGetAfterClose" classname="org.jcvi.jillion.trace.fastq.TestIndexedFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="filteredDataStore" classname="org.jcvi.jillion.trace.fastq.TestIndexedMultilineFastqDataStore" time="0.005"/>
  <testcase name="multiLineMatchesSingleline" classname="org.jcvi.jillion.trace.fastq.TestIndexedMultilineFastqDataStore" time="0.002"/>
  <testcase name="closingIdIteratorEarlyShouldHaltIterating" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0.002"/>
  <testcase name="forEach" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0.007"/>
  <testcase name="get" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0.004"/>
  <testcase name="size" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0"/>
  <testcase name="containQueryForIdThatIsNotContainedShouldReturnFalse" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0.006"/>
  <testcase name="closingIteratorEarlyShouldStopIterating" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0.004"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0.006"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0.001"/>
  <testcase name="shouldThrowExceptionIfTryToGetAfterClose" classname="org.jcvi.jillion.trace.fastq.TestLargeFastQFileDataStore" time="0"/>
  <testcase name="filteredDataStore" classname="org.jcvi.jillion.trace.fastq.TestLargeMultilineFastqDataStore" time="0.012"/>
  <testcase name="multiLineMatchesSingleline" classname="org.jcvi.jillion.trace.fastq.TestLargeMultilineFastqDataStore" time="0.009"/>
  <testcase name="closingIdIteratorEarlyShouldHaltIterating" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0.003"/>
  <testcase name="forEach" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0.003"/>
  <testcase name="get" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0.004"/>
  <testcase name="size" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0.006"/>
  <testcase name="containQueryForIdThatIsNotContainedShouldReturnFalse" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="closingIteratorEarlyShouldStopIterating" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0.004"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0.002"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0.004"/>
  <testcase name="shouldThrowExceptionIfTryToGetAfterClose" classname="org.jcvi.jillion.trace.fastq.TestLargeFastqFileDataStoreGuessCodec" time="0"/>
  <testcase name="filteredDataStore" classname="org.jcvi.jillion.trace.fastq.TestLargeMultilineFastqFileDataStoreGuessCodec" time="0.008"/>
  <testcase name="multiLineMatchesSingleline" classname="org.jcvi.jillion.trace.fastq.TestLargeMultilineFastqFileDataStoreGuessCodec" time="0.01"/>
  <testcase name="twoRecordsReverseSorted" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0.01"/>
  <testcase name="tryingToWriteAfterCloseShouldThrowIOException" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0.001"/>
  <testcase name="hundredRecords" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0.015"/>
  <testcase name="twoRecordsAlreadySorted" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0.004"/>
  <testcase name="oneRecordWithComment" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0.004"/>
  <testcase name="writeRecordWithCommentAsField" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0.004"/>
  <testcase name="writeRecordAsFields" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0.004"/>
  <testcase name="noRecordsToWrite" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0"/>
  <testcase name="oneRecord" classname="org.jcvi.jillion.trace.fastq.TestInMemorySortedFastqWriter" time="0.003"/>
  <testcase name="twoRecordsReverseSorted" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0.006"/>
  <testcase name="tryingToWriteAfterCloseShouldThrowIOException" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0"/>
  <testcase name="hundredRecords" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0.012"/>
  <testcase name="twoRecordsAlreadySorted" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0.007"/>
  <testcase name="oneRecordWithComment" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0.001"/>
  <testcase name="writeRecordWithCommentAsField" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0.003"/>
  <testcase name="writeRecordAsFields" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0.003"/>
  <testcase name="noRecordsToWrite" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0"/>
  <testcase name="oneRecord" classname="org.jcvi.jillion.trace.fastq.TestTmpDirStillOnlyUsedCacheNotEnoughToDumpToFileSortedFastqWriter" time="0.006"/>
  <testcase name="twoRecordsReverseSorted" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0.001"/>
  <testcase name="tryingToWriteAfterCloseShouldThrowIOException" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0.001"/>
  <testcase name="hundredRecords" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0.015"/>
  <testcase name="twoRecordsAlreadySorted" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0.002"/>
  <testcase name="oneRecordWithComment" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0.005"/>
  <testcase name="writeRecordWithCommentAsField" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0.001"/>
  <testcase name="writeRecordAsFields" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0.007"/>
  <testcase name="noRecordsToWrite" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0"/>
  <testcase name="oneRecord" classname="org.jcvi.jillion.trace.fastq.TestTmpDirSingleFileSortedFastqWriter" time="0.001"/>
  <testcase name="twoRecordsReverseSorted" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.009"/>
  <testcase name="tryingToWriteAfterCloseShouldThrowIOException" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.002"/>
  <testcase name="hundredRecords" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.105"/>
  <testcase name="twoRecordsAlreadySorted" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.003"/>
  <testcase name="oneRecordWithComment" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.001"/>
  <testcase name="writeRecordWithCommentAsField" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.001"/>
  <testcase name="writeRecordAsFields" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.001"/>
  <testcase name="noRecordsToWrite" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.006"/>
  <testcase name="oneRecord" classname="org.jcvi.jillion.trace.fastq.TestTmpDirOneFilePerReadSortedFastqWriter" time="0.001"/>
  <testcase name="onlyIncludeLongSequenceLengthsUsingNewLengthMethod[0]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.025"/>
  <testcase name="onlyIncludeLongSequenceLengths[0]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.04"/>
  <testcase name="filterOutReadsThatEndInR[0]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.013"/>
  <testcase name="onlyIncludeLongSequenceLengthsUsingNewLengthMethod[1]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.092"/>
  <testcase name="onlyIncludeLongSequenceLengths[1]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.097"/>
  <testcase name="filterOutReadsThatEndInR[1]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.038"/>
  <testcase name="onlyIncludeLongSequenceLengthsUsingNewLengthMethod[2]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.022"/>
  <testcase name="onlyIncludeLongSequenceLengths[2]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.036"/>
  <testcase name="filterOutReadsThatEndInR[2]" classname="org.jcvi.jillion.trace.fastq.TestFastqFileBuilderWithLambdaFilter" time="0.024"/>
  <testcase name="zeroNumberOfFilesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRoundRobin" time="0.008"/>
  <testcase name="splitInto1FileShouldMakeIdenticalOutputFile" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRoundRobin" time="0.059"/>
  <testcase name="negativeNumberOfFilesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRoundRobin" time="0.001"/>
  <testcase name="splitInto2Files" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRoundRobin" time="0.035"/>
  <testcase name="splitInto10Files" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRoundRobin" time="0.044"/>
  <testcase name="multiThreadedWrite" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRoundRobin" time="0.054"/>
  <testcase name="zeroNumberOfFilesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRollover" time="0.001"/>
  <testcase name="splitAllPerFileShouldMakeIdenticalOutputFile" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRollover" time="0.046"/>
  <testcase name="negativeNumberOfFilesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRollover" time="0.001"/>
  <testcase name="splitInto2Files" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRollover" time="0.027"/>
  <testcase name="splitInto10Files" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRollover" time="0.046"/>
  <testcase name="multiThreadedWrite" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqRollover" time="0.035"/>
  <testcase name="writingRecordAfterClosingShouldThrowException" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqDeconvolver" time="0.002"/>
  <testcase name="splitbyDirectionFiles" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqDeconvolver" time="0.054"/>
  <testcase name="splitAllPerFileShouldMakeIdenticalOutputFile" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqDeconvolver" time="0.028"/>
  <testcase name="splitBySegmentFiles" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqDeconvolver" time="0.033"/>
  <testcase name="writingNoRecordsShouldNotCreateAnyFiles" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqDeconvolver" time="0.001"/>
  <testcase name="callingCloseMultipleTimesIsOK" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqDeconvolver" time="0"/>
  <testcase name="nullDeconvolveReturnShouldNotBeWrittenToFiles" classname="org.jcvi.jillion.trace.fastq.TestSplitFastqDeconvolver" time="0.001"/>
  <testcase name="nullIdForInsrumentNameShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0.005"/>
  <testcase name="yClusterCoordinate" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="invalidIdForXClusterCoordinateShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0.001"/>
  <testcase name="invalidIdForInsrumentNameShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="tileNumber" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="pairNumber" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="invalidIdForPairNumberShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="xClusterCoordinate" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="nullIdForYClusterCoordinateShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="invalidIdForFlowCellShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="invalidIdForMultiplexIndexShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="invalidIdForTileNumberShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0.001"/>
  <testcase name="nullIdForFlowCellShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="invalidIdForYClusterCoordinateShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="nullIdForMultiplexIndexShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="nullIdForPairNumberShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="nullIdForXClusterCoordinateShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="nullIdForTileNumberShouldThrowNPE" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="instrumentName" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0.001"/>
  <testcase name="multiplexIndex" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="flowCell" classname="org.jcvi.jillion.trace.fastq.TestIlluminaUtil" time="0"/>
  <testcase name="parseNotIndexedRead" classname="org.jcvi.jillion.trace.fastq.TestCasava18" time="0.001"/>
  <testcase name="parseIndexedRead" classname="org.jcvi.jillion.trace.fastq.TestCasava18" time="0"/>
  <testcase name="convertSolexaToPhredquality[0]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[1]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[2]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[3]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[4]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0.001"/>
  <testcase name="convertSolexaToPhredquality[5]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[6]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[7]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[8]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0.002"/>
  <testcase name="convertSolexaToPhredquality[9]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[10]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[11]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[12]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[13]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[14]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[15]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[16]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[17]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[18]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[19]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[20]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[21]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[22]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[23]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[24]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[25]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[26]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[27]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[28]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[29]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[30]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[31]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[32]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[33]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[34]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[35]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[36]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[37]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[38]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[39]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[40]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0.001"/>
  <testcase name="convertSolexaToPhredquality[41]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[42]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[43]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[44]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[45]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[46]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[47]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[48]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[49]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[50]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[51]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[52]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[53]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0.003"/>
  <testcase name="convertSolexaToPhredquality[54]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[55]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[56]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[57]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[58]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[59]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0.001"/>
  <testcase name="convertSolexaToPhredquality[60]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[61]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[62]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[63]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[64]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[65]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="convertSolexaToPhredquality[66]" classname="org.jcvi.jillion.trace.fastq.TestSolexaUtil" time="0"/>
  <testcase name="emptyStringReturnsNull" classname="org.jcvi.jillion.trace.fastq.TestGuessQualityCodec" time="0"/>
  <testcase name="illumina" classname="org.jcvi.jillion.trace.fastq.TestGuessQualityCodec" time="0"/>
  <testcase name="sanger" classname="org.jcvi.jillion.trace.fastq.TestGuessQualityCodec" time="0"/>
  <testcase name="solexa" classname="org.jcvi.jillion.trace.fastq.TestGuessQualityCodec" time="0"/>
  <testcase name="qvsAllSanger30" classname="org.jcvi.jillion.trace.fastq.TestGuessQualityCodec" time="0"/>
  <testcase name="allQvsSangerQv30" classname="org.jcvi.jillion.trace.fastq.TestFastqQualityCodecGuesserAllEither" time="0"/>
  <testcase name="allQvsIlluminaQv30" classname="org.jcvi.jillion.trace.fastq.TestFastqQualityCodecGuesserAllEither" time="0"/>
  <testcase name="defaultImplDelegatesToQualitySequence" classname="org.jcvi.jillion.trace.fastq.TestAvgQualityFastqRecord" time="0.001"/>
  <testcase name="parsedSangerEncodedQualitySequence" classname="org.jcvi.jillion.trace.fastq.TestAvgQualityFastqRecord" time="0"/>
  <testcase name="parsedIlluminaEncodedQualitySequence" classname="org.jcvi.jillion.trace.fastq.TestAvgQualityFastqRecord" time="0"/>
  <testcase name="forEachFilterCodecLengthAndDir" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.009"/>
  <testcase name="forEachFileCodec" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.004"/>
  <testcase name="forEachFilterLength" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.011"/>
  <testcase name="readFile" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.012"/>
  <testcase name="forEachFilterLengthAndDir" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.006"/>
  <testcase name="forEach" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.004"/>
  <testcase name="forEachThrowsCheckedException" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.002"/>
  <testcase name="readParser" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.011"/>
  <testcase name="readParserCodec" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.007"/>
  <testcase name="forEachFile" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.003"/>
  <testcase name="forEachWithCodec" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.006"/>
  <testcase name="readFileCodec" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.006"/>
  <testcase name="forEachWithCodecFilterLength" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.001"/>
  <testcase name="forEachNullFilter" classname="org.jcvi.jillion.trace.fastq.TestFastqReader" time="0.008"/>
  <testcase name="copyToOutputStreamGivenCodec" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.056"/>
  <testcase name="copyToOutputStream" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.055"/>
  <testcase name="copyToFile" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.046"/>
  <testcase name="copyToFilePredicate" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.035"/>
  <testcase name="copyToOutputStreamPredicate" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.03"/>
  <testcase name="adaptReturnsNullWillSkipRecord" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.012"/>
  <testcase name="copyToFileCodecPredicate" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.036"/>
  <testcase name="copyToFileWithCodecAndPredicate" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.046"/>
  <testcase name="adapt" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.022"/>
  <testcase name="writeToFile" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.069"/>
  <testcase name="copyToFileGivenCodec" classname="org.jcvi.jillion.trace.fastq.TestFastqWriterMethods" time="0.047"/>
  <testcase name="convert[0]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_convertFlowgramValues" time="0.001"/>
  <testcase name="convert[1]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_convertFlowgramValues" time="0"/>
  <testcase name="convert[2]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_convertFlowgramValues" time="0"/>
  <testcase name="convert[3]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_convertFlowgramValues" time="0"/>
  <testcase name="convert[4]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_convertFlowgramValues" time="0.001"/>
  <testcase name="convert[5]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_convertFlowgramValues" time="0"/>
  <testcase name="paddedBytes[0]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[1]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[2]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[3]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[4]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[5]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[6]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[7]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[8]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="paddedBytes[9]" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_paddedBytes" time="0"/>
  <testcase name="emptyIndexesShouldReturnEmptyList" classname="org.jcvi.jillion.trace.sff.TestSFFFlowgram_computeValues" time="0.001"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.sff.TestSFFFlowgram_computeValues" time="0"/>
  <testcase name="emptyValuesShouldThrowIllegalArguementException" classname="org.jcvi.jillion.trace.sff.TestSFFFlowgram_computeValues" time="0"/>
  <testcase name="titanium" classname="org.jcvi.jillion.trace.sff.TestSffUtil_Linkers" time="0.001"/>
  <testcase name="flx" classname="org.jcvi.jillion.trace.sff.TestSffUtil_Linkers" time="0"/>
  <testcase name="parseDateFromName" classname="org.jcvi.jillion.trace.sff.TestSff454NameUtil" time="0.145"/>
  <testcase name="generateAccessionName" classname="org.jcvi.jillion.trace.sff.TestSff454NameUtil" time="0.002"/>
  <testcase name="computeRigRunName" classname="org.jcvi.jillion.trace.sff.TestSff454NameUtil" time="0.028"/>
  <testcase name="getRegionNumber" classname="org.jcvi.jillion.trace.sff.TestSff454NameUtil" time="0.001"/>
  <testcase name="parseLocation" classname="org.jcvi.jillion.trace.sff.TestSff454NameUtil" time="0"/>
  <testcase name="getUniveralAccessionNumberFrom" classname="org.jcvi.jillion.trace.sff.TestSff454NameUtil" time="0"/>
  <testcase name="isSffRead" classname="org.jcvi.jillion.trace.sff.TestSff454NameUtil" time="0"/>
  <testcase name="closeIteratorEarlyShouldStopIterating" classname="org.jcvi.jillion.trace.sff.TestSffFileIterator" time="0.015"/>
  <testcase name="iterateOverAllRecords" classname="org.jcvi.jillion.trace.sff.TestSffFileIterator" time="0.008"/>
  <testcase name="constructor" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="notEqualsWrongClass" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="constructorFailsDifferentIndexesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="constructorFailsNullQualitiesShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="constructorFailsNullBasesShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="constructorFailsDifferentBasesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="constructorFailsNullIndexesShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="constructorFailsDifferentFlowgramValuesShouldThrowArrayIndexOutOfBoundsException" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="constructorFailsNullFlowgramValuesShouldNullPointerException" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="constructorFailsDifferentQualitiesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.sff.TestDefaultReadData" time="0"/>
  <testcase name="notEqualsNullName" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsNullQualityClip" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsDifferentAdapterClip" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsDifferentName" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsWrongClass" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsNullAdapterClip" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsDifferentNumberOfBases" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsDifferentQualityClip" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFReadHeader" time="0"/>
  <testcase name="notEqualsNullFlow" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsDifferentKeySequence" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsDifferentFlow" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsNullKeySequence" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsDifferentIndexLength" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsDifferentIndexOffset" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsWrongClass" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsDifferentNumberOfReads" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="notEqualsDifferentNumberOfFlowsPerReads" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.sff.TestDefaultSFFCommonHeader" time="0"/>
  <testcase name="readThrowsIOExceptionShouldWrapInSFFDecoderException" classname="org.jcvi.jillion.trace.sff.TestSffeadHeaderDecoder" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.sff.TestSffeadHeaderDecoder" time="0.003"/>
  <testcase name="sequenceNameLengthEncodedIncorrectlyShouldThrowIOException" classname="org.jcvi.jillion.trace.sff.TestSffeadHeaderDecoder" time="0.002"/>
  <testcase name="noClipPointsShouldSetAdapterLengthToNumBases" classname="org.jcvi.jillion.trace.sff.TestSffeadHeaderDecoder" time="0.003"/>
  <testcase name="readThrowsIOExceptionShouldWrapInSFFDecoderException" classname="org.jcvi.jillion.trace.sff.TestDefaultSffReadDataDecoder" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.sff.TestDefaultSffReadDataDecoder" time="0.001"/>
  <testcase name="invalidReadFailsInvalidVersionShouldThrowSFFDecoderException" classname="org.jcvi.jillion.trace.sff.TestDefaultSffCommonHeaderDecoder" time="0.001"/>
  <testcase name="invalidReadFailsKeySequenceNotLongEnoughShouldThrowSFFDecoderException" classname="org.jcvi.jillion.trace.sff.TestDefaultSffCommonHeaderDecoder" time="0.008"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.sff.TestDefaultSffCommonHeaderDecoder" time="0"/>
  <testcase name="invalidReadFailsMagicNumberShouldThrowSFFDecoderException" classname="org.jcvi.jillion.trace.sff.TestDefaultSffCommonHeaderDecoder" time="0"/>
  <testcase name="invalidReadFailsInvalidFormatCodeShouldThrowSFFDecoderException" classname="org.jcvi.jillion.trace.sff.TestDefaultSffCommonHeaderDecoder" time="0"/>
  <testcase name="invalidReadFailsFlowNotLongEnoughShouldThrowSFFDecoderException" classname="org.jcvi.jillion.trace.sff.TestDefaultSffCommonHeaderDecoder" time="0"/>
  <testcase name="invalidReadThrowsIOExceptionShouldWrapInSFFDecoderException" classname="org.jcvi.jillion.trace.sff.TestDefaultSffCommonHeaderDecoder" time="0"/>
  <testcase name="nullQualitiesClipShouldthrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="nullRawFlowsShouldThrowNPE" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="notEqualsDifferentValues" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="emptyValuesShouldthrowIllegalArgumentException" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="nullAdapterClipShouldthrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="nullRawFlowValuesShouldThrowNPE" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="nullQualitiesShouldthrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="nullIdShouldthrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="nullValuesShouldthrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="nullBasecallsShouldthrowNullPointerException" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="notEqualsValues" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0"/>
  <testcase name="equalsSameData" classname="org.jcvi.jillion.trace.sff.TestSffFlowgram" time="0.007"/>
  <testcase name="getIds" classname="org.jcvi.jillion.trace.sff.TestSFFCodecParseActualSFFFile" time="0.007"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.sff.TestSFFCodecParseActualSFFFile" time="0.002"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.sff.TestSFFCodecParseActualSFFFile" time="0.003"/>
  <testcase name="closeIteratorEarly" classname="org.jcvi.jillion.trace.sff.TestSFFCodecParseActualSFFFile" time="0.001"/>
  <testcase name="readfile" classname="org.jcvi.jillion.trace.sff.TestSFFCodecParseActualSFFFile" time="0.001"/>
  <testcase name="getIds" classname="org.jcvi.jillion.trace.sff.TestLargeSffFileDataStore" time="0.012"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.sff.TestLargeSffFileDataStore" time="0.002"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.sff.TestLargeSffFileDataStore" time="0.006"/>
  <testcase name="closeIteratorEarly" classname="org.jcvi.jillion.trace.sff.TestLargeSffFileDataStore" time="0.001"/>
  <testcase name="readfile" classname="org.jcvi.jillion.trace.sff.TestLargeSffFileDataStore" time="0.007"/>
  <testcase name="validDecode" classname="org.jcvi.jillion.trace.sff.TestFlowIndexOverflow" time="0.001"/>
  <testcase name="getIds" classname="org.jcvi.jillion.trace.sff.TestDefaultSffFlowgramDataStore" time="0"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.sff.TestDefaultSffFlowgramDataStore" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.sff.TestDefaultSffFlowgramDataStore" time="0.002"/>
  <testcase name="closeIteratorEarly" classname="org.jcvi.jillion.trace.sff.TestDefaultSffFlowgramDataStore" time="0.001"/>
  <testcase name="readfile" classname="org.jcvi.jillion.trace.sff.TestDefaultSffFlowgramDataStore" time="0.003"/>
  <testcase name="adapterOutsideOfQualityClip" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_getTrimRange" time="0.001"/>
  <testcase name="onlyQualityClipSetShouldReturnQualityClip" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_getTrimRange" time="0"/>
  <testcase name="onlyAdapterClipSetShouldReturnAdapterClip" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_getTrimRange" time="0"/>
  <testcase name="noClipsSetShouldReturn1_NumBases" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_getTrimRange" time="0"/>
  <testcase name="bothClipsSetShouldReturnIntersection" classname="org.jcvi.jillion.trace.sff.TestSFFUtil_getTrimRange" time="0"/>
  <testcase name="encodeReadData" classname="org.jcvi.jillion.trace.sff.TestSffWriterUtil" time="0.001"/>
  <testcase name="nullQualityClip" classname="org.jcvi.jillion.trace.sff.TestSffWriterUtil" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.sff.TestSffWriterUtil" time="0"/>
  <testcase name="nullAdapterClipShouldEncodeWithZeros" classname="org.jcvi.jillion.trace.sff.TestSffWriterUtil" time="0"/>
  <testcase name="writeCommonHeaderWithNoIndex" classname="org.jcvi.jillion.trace.sff.TestSffWriterUtil" time="0.003"/>
  <testcase name="noIndexInSffShouldReturnNull" classname="org.jcvi.jillion.trace.sff.TestIndexed454SffFileDataStore" time="0.007"/>
  <testcase name="getIds" classname="org.jcvi.jillion.trace.sff.TestIndexed454SffFileDataStore" time="0.004"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.sff.TestIndexed454SffFileDataStore" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.sff.TestIndexed454SffFileDataStore" time="0.005"/>
  <testcase name="closeIteratorEarly" classname="org.jcvi.jillion.trace.sff.TestIndexed454SffFileDataStore" time="0.004"/>
  <testcase name="readfile" classname="org.jcvi.jillion.trace.sff.TestIndexed454SffFileDataStore" time="0"/>
  <testcase name="getIds" classname="org.jcvi.jillion.trace.sff.TestNoXMLManifestIndexedSffFileDataStore" time="0.003"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.sff.TestNoXMLManifestIndexedSffFileDataStore" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.sff.TestNoXMLManifestIndexedSffFileDataStore" time="0.004"/>
  <testcase name="closeIteratorEarly" classname="org.jcvi.jillion.trace.sff.TestNoXMLManifestIndexedSffFileDataStore" time="0.006"/>
  <testcase name="readfile" classname="org.jcvi.jillion.trace.sff.TestNoXMLManifestIndexedSffFileDataStore" time="0"/>
  <testcase name="returnManifestIndexedInstanceIfManifestIsPresent" classname="org.jcvi.jillion.trace.sff.TestIndexedSffFileDataStore" time="0.001"/>
  <testcase name="returnFullyParsedIndexedInstanceIfNoIndexIsPresent" classname="org.jcvi.jillion.trace.sff.TestIndexedSffFileDataStore" time="0.005"/>
  <testcase name="returnManifestIndexedInstanceIfManifestWithNoXMLIsPresent" classname="org.jcvi.jillion.trace.sff.TestIndexedSffFileDataStore" time="0"/>
  <testcase name="getIds" classname="org.jcvi.jillion.trace.sff.TestNoManifestIndexedSffFileDataStore" time="0"/>
  <testcase name="contains" classname="org.jcvi.jillion.trace.sff.TestNoManifestIndexedSffFileDataStore" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.trace.sff.TestNoManifestIndexedSffFileDataStore" time="0.009"/>
  <testcase name="closeIteratorEarly" classname="org.jcvi.jillion.trace.sff.TestNoManifestIndexedSffFileDataStore" time="0.006"/>
  <testcase name="readfile" classname="org.jcvi.jillion.trace.sff.TestNoManifestIndexedSffFileDataStore" time="0"/>
  <testcase name="iteratorsShouldMatch" classname="org.jcvi.jillion.trace.sff.TestSffWriterNoManifest" time="0.007"/>
  <testcase name="filesMatchExactly" classname="org.jcvi.jillion.trace.sff.TestSffWriterNoManifest" time="0.006"/>
  <testcase name="keyAndFlowSequencesShouldMatch" classname="org.jcvi.jillion.trace.sff.TestSffWriterNoManifest" time="0.002"/>
  <testcase name="iteratorsShouldMatch" classname="org.jcvi.jillion.trace.sff.TestSffWriterWithIndex" time="0.011"/>
  <testcase name="filesMatchExactly" classname="org.jcvi.jillion.trace.sff.TestSffWriterWithIndex" time="0.006"/>
  <testcase name="keyAndFlowSequencesShouldMatch" classname="org.jcvi.jillion.trace.sff.TestSffWriterWithIndex" time="0.008"/>
  <testcase name="visitFileAndWriteIdenticalCopy" classname="org.jcvi.jillion.trace.sff.TestSffWriterVisitor" time="0.004"/>
  <testcase name="nullQualityArrayShouldthrowNPE" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="nullPositionSequenceShouldthrowNPE" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="nullPositionArrayShouldthrowNPE" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="nullQualitySequenceShouldthrowNPE" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="arrayConstructor" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="notEqualsDifferentConfidence" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="notEqualsDifferentPositions" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="sequenceConstructor" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.chromat.TestChannel" time="0"/>
  <testcase name="testEqualsSameRef" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0.001"/>
  <testcase name="nullGChannelShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="AConfidenceDifferentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="APositionDifferentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="notEqualsDifferentGChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="CPositionDifferentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="nullTChannelShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="getGChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0.001"/>
  <testcase name="passingAmbiguousBaseShouldReturnTChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="nullAChannelShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="TPositionDifferentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="passingNullToGetChannelShouldThrowNPE" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="GConfidenceDifferentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="GPositionDifferentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="notEqualsDifferentTChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="CConfidenceDifferentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0.001"/>
  <testcase name="getTChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="notEqualsDifferentCChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0.001"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="getCChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="notEqualsDifferentAChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="getAChannel" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="nullCChannelShouldThrowNullPointerException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="TConfidenceDifferentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestChannelGroup" time="0"/>
  <testcase name="nullBaseCallsShouldThrowIllegalArugmentException" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="nullChannelGroupShouldThrowIllegalArugmentException" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="copyConstructor" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="notEqualsDifferentChannelGroup" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="fullConstructor" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="nullPeaksShouldThrowIllegalArugmentException" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0.002"/>
  <testcase name="nullPropertiesShouldThrowIllegalArugmentException" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0.004"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0.001"/>
  <testcase name="notEqualsExtraProperties" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="notEqualsMissingProperties" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="notEqualsDifferentPeaks" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="constructionWithEmptyProperties" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="notEqualsDifferentBasecalls" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0.002"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.chromat.TestBasicChromatogram" time="0"/>
  <testcase name="invalidEncodedDataShouldThrowNumberFormatException" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="StringConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="notEqualsNotEncodedData" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="notEqualsDifferentData" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="nullStringConstrcutorShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="StringExtraNoWhiteSpaceConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="encodeValuesTooBig" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="arrayConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="StringCarriageReturnsConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="StringWithNoWhiteSpaceConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="nullArrayConstrcutorShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.chromat.TestEncodedByteData" time="0"/>
  <testcase name="invalidEncodedDataShouldThrowNumberFormatException" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="StringConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="notEqualsNotEncodedData" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="notEqualsDifferentData" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0.001"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="nullStringConstrcutorShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="StringExtraNoWhiteSpaceConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="arrayConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="StringCarriageReturnsConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="StringWithNoWhiteSpaceConstructor" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="nullArrayConstrcutorShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.chromat.TestEncodedShortData" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.trace.chromat.scf.TestPrivateData" time="0"/>
  <testcase name="notEqualsPrivateDataIsDifferent" classname="org.jcvi.jillion.trace.chromat.scf.TestPrivateData" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.chromat.scf.TestPrivateData" time="0"/>
  <testcase name="notEqualsPrivateDataIsEmpty" classname="org.jcvi.jillion.trace.chromat.scf.TestPrivateData" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.chromat.scf.TestPrivateData" time="0.001"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.trace.chromat.scf.TestPrivateData" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.chromat.scf.TestPrivateData" time="0"/>
  <testcase name="notEqualsNullInsertion" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0.001"/>
  <testcase name="notEqualsDifferentDeletion" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsDifferentInsertion" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsDifferentSubstitution" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsDifferentPrivateData" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsNullPrivateData" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsNullSubstitution" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsNullDeletion" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsBasicChromatogram" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogram" time="0"/>
  <testcase name="notEqualsDifferentSampleOffset" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="testCopy" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="emptyConstructor" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="notEqualsDifferentNumberOfSamples" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0.001"/>
  <testcase name="notEqualsDifferentSampleSize" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="notEqualsDifferentBasesOffset" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="notEqualsDifferentCommentSize" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="notEqualsDifferentPrivateDataOffset" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="notEqualsDifferentCommentOffset" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="notEqualsDifferentNumberOfBases" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0.001"/>
  <testcase name="notEqualsDifferentVersion" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="notEqualsDifferentPrivateDataSize" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="setters" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeader" time="0"/>
  <testcase name="encodeVersion2" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0.001"/>
  <testcase name="decode" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0.004"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0.001"/>
  <testcase name="invalidFormattedVersionShouldThrowSCFHeaderDecoderException" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0"/>
  <testcase name="truncatedVersionShouldThrowSCFHeaderDecoderException" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0"/>
  <testcase name="decodeInputTooSmall" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0"/>
  <testcase name="decodeNullInputStreamShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0"/>
  <testcase name="decodeVersion2" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0"/>
  <testcase name="decodeInvaildMagicNumber" classname="org.jcvi.jillion.trace.chromat.scf.header.TestDefaultSCFHeaderCodec" time="0"/>
  <testcase name="maxAllowedValue" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestBytePositionStrategy" time="0.001"/>
  <testcase name="setPosition" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestBytePositionStrategy" time="0"/>
  <testcase name="setPositionTooBigShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestBytePositionStrategy" time="0"/>
  <testcase name="getPosition" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestBytePositionStrategy" time="0"/>
  <testcase name="getSampleSize" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestBytePositionStrategy" time="0"/>
  <testcase name="maxAllowedValue" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestShortPositionStrategy" time="0"/>
  <testcase name="setPosition" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestShortPositionStrategy" time="0"/>
  <testcase name="getPosition" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestShortPositionStrategy" time="0"/>
  <testcase name="getSampleSize" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestShortPositionStrategy" time="0"/>
  <testcase name="getPositionStrategyByHeaderSampleSizeTooBigShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestPositionStrategyFactory" time="0.008"/>
  <testcase name="getPositionStrategyByIntShouldReturnShort" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestPositionStrategyFactory" time="0"/>
  <testcase name="getPositionStrategyByIntShouldReturnByte" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestPositionStrategyFactory" time="0"/>
  <testcase name="getPositionStrategyByHeaderSampleSize2ShouldReturnShort" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestPositionStrategyFactory" time="0"/>
  <testcase name="getPositionStrategyByIntTooBigShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestPositionStrategyFactory" time="0"/>
  <testcase name="getPositionStrategyByHeaderSampleSize1ShouldReturnByte" classname="org.jcvi.jillion.trace.chromat.scf.pos.TestPositionStrategyFactory" time="0"/>
  <testcase name="parseDoesNothing" classname="org.jcvi.jillion.trace.chromat.scf.section.TestNullSectionDecoder" time="0.001"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.chromat.scf.section.TestCommentSectionEncoder" time="0.016"/>
  <testcase name="nullCommentsMakesEncodedSectionWithNullData" classname="org.jcvi.jillion.trace.chromat.scf.section.TestCommentSectionEncoder" time="0.001"/>
  <testcase name="validMustSkipToStartOfCommentSection" classname="org.jcvi.jillion.trace.chromat.scf.section.TestCommentSectionDecoder" time="0.001"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.chromat.scf.section.TestCommentSectionDecoder" time="0"/>
  <testcase name="readThrowsIOExceptionShouldWrapInSectionParserException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestCommentSectionDecoder" time="0.001"/>
  <testcase name="validWithSkip" classname="org.jcvi.jillion.trace.chromat.scf.section.TestPrivateDataDecoder" time="0.01"/>
  <testcase name="incorrectNumberOfBytesReadShouldThrowSectionDecoderException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestPrivateDataDecoder" time="0.001"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.chromat.scf.section.TestPrivateDataDecoder" time="0"/>
  <testcase name="validNullPrivateData" classname="org.jcvi.jillion.trace.chromat.scf.section.TestPrivateDataDecoder" time="0"/>
  <testcase name="nullPrivateDataShouldEncodeEmptySection" classname="org.jcvi.jillion.trace.chromat.scf.section.TestPrivateDataEncoder" time="0.001"/>
  <testcase name="emptyPrivateDataShouldEncodeEmptySection" classname="org.jcvi.jillion.trace.chromat.scf.section.TestPrivateDataEncoder" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.chromat.scf.section.TestPrivateDataEncoder" time="0"/>
  <testcase name="validEncodeBytes" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2SamplesSectionEncoder" time="0.002"/>
  <testcase name="validEncodeShorts" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2SamplesSectionEncoder" time="0"/>
  <testcase name="parseThrowsIOExceptionShouldWrapInSectionParserException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2SamplesSectionDecoder" time="0"/>
  <testcase name="parseBytes" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2SamplesSectionDecoder" time="0.002"/>
  <testcase name="parseShorts" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2SamplesSectionDecoder" time="0.001"/>
  <testcase name="testDeltaDeltaDecode[0]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[0]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[1]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[1]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[2]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[2]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[3]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[3]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[4]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[4]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[5]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[5]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[6]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[6]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[7]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[7]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[8]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[8]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[9]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[9]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[10]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[10]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaDecode[11]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="testDeltaDeltaEncode[11]" classname="org.jcvi.jillion.trace.chromat.scf.section.TestDeltaDeltaEncoding" time="0"/>
  <testcase name="validEncodeBytes" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3SamplesSectionEncoder" time="0.007"/>
  <testcase name="validEncodeShorts" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3SamplesSectionEncoder" time="0.001"/>
  <testcase name="parseThrowsIOExceptionShouldWrapInSectionParserException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3SamplesSectionDecoder" time="0.004"/>
  <testcase name="parseBytes" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3SamplesSectionDecoder" time="0"/>
  <testcase name="parseShorts" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3SamplesSectionDecoder" time="0.001"/>
  <testcase name="validWithOptionalConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionEncoder" time="0.003"/>
  <testcase name="validWithEmptyDeletionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionEncoder" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionEncoder" time="0.001"/>
  <testcase name="validWithEmptySubstitutionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionEncoder" time="0"/>
  <testcase name="validWithEmptyInsertionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionEncoder" time="0"/>
  <testcase name="validWithSkip" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionDecoder" time="0.002"/>
  <testcase name="validNoSubstitutionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionDecoder" time="0.001"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionDecoder" time="0.001"/>
  <testcase name="validNoInsertionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionDecoder" time="0"/>
  <testcase name="validNoDeletionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionDecoder" time="0.001"/>
  <testcase name="validOptionalConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionDecoder" time="0"/>
  <testcase name="readThrowsIOExceptionShouldWrapInSectionParserException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionDecoder" time="0.001"/>
  <testcase name="validOptionalConfidenceDataWithSkip" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion3BasesSectionDecoder" time="0.002"/>
  <testcase name="validWithOptionalConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionEncoder" time="0.002"/>
  <testcase name="validWithEmptyDeletionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionEncoder" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionEncoder" time="0.001"/>
  <testcase name="validWithEmptySubstitutionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionEncoder" time="0"/>
  <testcase name="validWithEmptyInsertionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionEncoder" time="0.001"/>
  <testcase name="validWithSkip" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionDecoder" time="0.001"/>
  <testcase name="validNoSubstitutionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionDecoder" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionDecoder" time="0.001"/>
  <testcase name="validNoInsertionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionDecoder" time="0.003"/>
  <testcase name="validNoDeletionConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionDecoder" time="0"/>
  <testcase name="validOptionalConfidences" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionDecoder" time="0.001"/>
  <testcase name="readThrowsIOExceptionShouldWrapInSectionParserException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionDecoder" time="0.001"/>
  <testcase name="validOptionalConfidenceDataWithSkip" classname="org.jcvi.jillion.trace.chromat.scf.section.TestVersion2BasesSectionDecoder" time="0.009"/>
  <testcase name="basesVersion2" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetDecoderFor" time="0"/>
  <testcase name="basesVersion3" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetDecoderFor" time="0.001"/>
  <testcase name="nullSectionShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetDecoderFor" time="0"/>
  <testcase name="privateDataShouldReturnPrivateDataCodecForAnyVersion" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetDecoderFor" time="0"/>
  <testcase name="samplesVersion2" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetDecoderFor" time="0"/>
  <testcase name="samplesVersion3" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetDecoderFor" time="0"/>
  <testcase name="nullSCFHeaderShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetDecoderFor" time="0.001"/>
  <testcase name="commentShouldBeSameForAnyVersion" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetDecoderFor" time="0"/>
  <testcase name="basesVersion2" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0"/>
  <testcase name="basesVersion3" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0"/>
  <testcase name="encoderForVersion4ShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0"/>
  <testcase name="nullSectionShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0"/>
  <testcase name="samplesVersion2" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0"/>
  <testcase name="samplesVersion3" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0"/>
  <testcase name="privateDataAnyVersionShouldReturnPrivateDataCodec" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0"/>
  <testcase name="commentDataAnyVersionShouldReturnCommentSectionHandler" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0.001"/>
  <testcase name="encoderForVersion1ShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.trace.chromat.scf.section.TestSectionCodecFactoryGetEncoderFor" time="0"/>
  <testcase name="decodeAndEncodeMatch" classname="org.jcvi.jillion.trace.chromat.scf.TestActualSCFCodec" time="0.106"/>
  <testcase name="parse" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogramWithGaps" time="0.012"/>
  <testcase name="parseScfFile" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogramFile" time="0.019"/>
  <testcase name="scfWithGaps" classname="org.jcvi.jillion.trace.chromat.scf.TestSCFChromatogramFile" time="0.002"/>
  <testcase name="version2MatchesVersion3" classname="org.jcvi.jillion.trace.chromat.scf.TestVersion2Parser" time="0.023"/>
  <testcase name="switchEndianOddNumberOfElements" classname="org.jcvi.jillion.trace.chromat.ztr.TestZTRUtil" time="0"/>
  <testcase name="switchEndian" classname="org.jcvi.jillion.trace.chromat.ztr.TestZTRUtil" time="0"/>
  <testcase name="readInt" classname="org.jcvi.jillion.trace.chromat.ztr.TestZTRUtil" time="0.001"/>
  <testcase name="nullDataArrayShouldThrowIOException" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0.007"/>
  <testcase name="siztyFiveIs16bit" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="seventyIs16_to_8" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="emptyDataArrayShouldThrowIOException" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="siztySixIs32bit" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="siztyFourIs8bit" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="seventyoneIsFollow" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="oneIsRunLengthEncoded" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0.004"/>
  <testcase name="unknownthrowsIOException" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="seventyoneIs32_to_8" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="twoIsZLibData" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="zeroIsRawData" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDataFactory" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestRawData" time="0"/>
  <testcase name="parseReturnsSameDataAsInput" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestRawData" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestRunLengthEncodedData" time="0"/>
  <testcase name="parse" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestRunLengthEncodedData" time="0"/>
  <testcase name="parseLongHomopolomer" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestRunLengthEncodedData" time="0"/>
  <testcase name="decode" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestShrinkShortToEightBitData" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestShrinkShortToEightBitData" time="0"/>
  <testcase name="decode" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestShrinkIntegerToEightBitData" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestShrinkIntegerToEightBitData" time="0"/>
  <testcase name="level1" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta8Data" time="0.002"/>
  <testcase name="level2" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta8Data" time="0"/>
  <testcase name="level3" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta8Data" time="0"/>
  <testcase name="compressedLevel1" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta8Data" time="0.004"/>
  <testcase name="compressedLevel2" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta8Data" time="0.001"/>
  <testcase name="compressedLevel3" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta8Data" time="0"/>
  <testcase name="level1" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta16Data" time="0"/>
  <testcase name="level2" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta16Data" time="0"/>
  <testcase name="level3" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta16Data" time="0"/>
  <testcase name="compressLevel1" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta16Data" time="0"/>
  <testcase name="compressLevel2" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta16Data" time="0"/>
  <testcase name="compressLevel3" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta16Data" time="0.001"/>
  <testcase name="level1" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta32Data" time="0"/>
  <testcase name="level2" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta32Data" time="0"/>
  <testcase name="level3" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestDelta32Data" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestZLibData" time="0"/>
  <testcase name="parse" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestZLibData" time="0.001"/>
  <testcase name="invalidParseShouldThrowTraceDeocoderException" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestZLibData" time="0"/>
  <testcase name="parse" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestFollowData" time="0"/>
  <testcase name="encodeAndDecode" classname="org.jcvi.jillion.trace.chromat.ztr.data.TestFollowData" time="0.002"/>
  <testcase name="readMetaData" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunk" time="0.002"/>
  <testcase name="readLengthNotEnoughBytesReadShouldWrapInIOException" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunk" time="0.001"/>
  <testcase name="readLength" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunk" time="0"/>
  <testcase name="readMetaDataSkipThrowsException" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunk" time="0.003"/>
  <testcase name="readLengthThrowsIOExceptionShouldWrapInIOException" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunk" time="0"/>
  <testcase name="encodeNullClipShouldEncodeZeroZero" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestClipChunk" time="0.001"/>
  <testcase name="invalidLengthTooSmallShouldThrowIOException" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestClipChunk" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestClipChunk" time="0"/>
  <testcase name="invalidLengthTooBigShouldThrowIOException" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestClipChunk" time="0"/>
  <testcase name="validParse" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestClipChunk" time="0.001"/>
  <testcase name="encode" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestBASEChunk" time="0.001"/>
  <testcase name="valid" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestBASEChunk" time="0.003"/>
  <testcase name="encode" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestBPOSChunk" time="0"/>
  <testcase name="valid" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestBPOSChunk" time="0"/>
  <testcase name="encode" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestSMP4Chunk" time="0.001"/>
  <testcase name="parse" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestSMP4Chunk" time="0.001"/>
  <testcase name="encode" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestCNF4Chunk" time="0.002"/>
  <testcase name="parse" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestCNF4Chunk" time="0.001"/>
  <testcase name="encode" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestTEXTChunk" time="0"/>
  <testcase name="parse" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestTEXTChunk" time="0.001"/>
  <testcase name="base" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunkFactory" time="0"/>
  <testcase name="bpos" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunkFactory" time="0"/>
  <testcase name="clip" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunkFactory" time="0.001"/>
  <testcase name="cnf4" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunkFactory" time="0"/>
  <testcase name="smp4" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunkFactory" time="0"/>
  <testcase name="text" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunkFactory" time="0"/>
  <testcase name="invalidChunkShouldThrowChunkException" classname="org.jcvi.jillion.internal.trace.chromat.ztr.chunk.TestChunkFactory" time="0"/>
  <testcase name="parseZtrFile" classname="org.jcvi.jillion.trace.chromat.ztr.TestZTRChromatogramFile" time="0.09"/>
  <testcase name="testEncodeAndDecodeFile" classname="org.jcvi.jillion.trace.chromat.ztr.TestIOLibZTRChromatogramWriter" time="0.184"/>
  <testcase name="testEncodeAndDecodeStream" classname="org.jcvi.jillion.trace.chromat.ztr.TestIOLibZTRChromatogramWriter" time="0.131"/>
  <testcase name="scfequalsZtr" classname="org.jcvi.jillion.trace.chromat.TestZtr2ScfVersion3" time="0.025"/>
  <testcase name="ztr2scf" classname="org.jcvi.jillion.trace.chromat.TestZtr2ScfVersion3" time="0.054"/>
  <testcase name="ztrWithNoQualitiesShouldGetPaddedQualitiesInScf" classname="org.jcvi.jillion.trace.chromat.TestZtr2ScfVersion3" time="0.05"/>
  <testcase name="scfequalsZtr" classname="org.jcvi.jillion.trace.chromat.TestZtr2ScfVersion2" time="0.051"/>
  <testcase name="ztr2scf" classname="org.jcvi.jillion.trace.chromat.TestZtr2ScfVersion2" time="0.059"/>
  <testcase name="ztrWithNoQualitiesShouldGetPaddedQualitiesInScf" classname="org.jcvi.jillion.trace.chromat.TestZtr2ScfVersion2" time="0.032"/>
  <testcase name="ab1DataMatchesZtrData" classname="org.jcvi.jillion.trace.chromat.abi.TestAbiChromatogramTraceParserMatchesZTR" time="0.136"/>
  <testcase name="parseScfGivenName" classname="org.jcvi.jillion.trace.chromat.TestChromatogramFactory" time="0.018"/>
  <testcase name="parseAb1ExtractNameFromFileName" classname="org.jcvi.jillion.trace.chromat.TestChromatogramFactory" time="0.073"/>
  <testcase name="parseAb1GivenName" classname="org.jcvi.jillion.trace.chromat.TestChromatogramFactory" time="0.054"/>
  <testcase name="parseZtrGivenName" classname="org.jcvi.jillion.trace.chromat.TestChromatogramFactory" time="0.026"/>
  <testcase name="parseZtrExtractNameFromFileName" classname="org.jcvi.jillion.trace.chromat.TestChromatogramFactory" time="0.032"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.trace.chromat.TestChromatogramFactory" time="0"/>
  <testcase name="parseScfExtractNameFromFileName" classname="org.jcvi.jillion.trace.chromat.TestChromatogramFactory" time="0.014"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0.001"/>
  <testcase name="rangeNotEqualToNull" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="negativeFullLengthShouldThrowException" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="readInfoEqualsSelf" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="fullLengthLessThanValidRangeShouldThrowException" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="readInfoDifferentValidRangeNotEqual" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="readInfoDifferentFullLengthNotEqual" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="readInfoEqualsSameValues" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="nullRangeShouldThrowNPE" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="rangeNotEqualToNotReadInfo" classname="org.jcvi.jillion.assembly.TestReadInfo" time="0"/>
  <testcase name="reverseReadValidRangeIsSubRangeShouldReturnTrimmedReverseSequence" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_getUngappedComplementedValidRangeQualities" time="0.002"/>
  <testcase name="reverseReadValidRangeIsFullLengthShouldReturnReverseSequence" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_getUngappedComplementedValidRangeQualities" time="0.001"/>
  <testcase name="forwardReadValidRangeIsFullLengthShouldReturnEqualSequence" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_getUngappedComplementedValidRangeQualities" time="0"/>
  <testcase name="forwardReadValidRangeIsSubRange" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_getUngappedComplementedValidRangeQualities" time="0"/>
  <testcase name="entireSequenceIsValidButComplimented" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_gappedfullRange" time="0.007"/>
  <testcase name="hasBeyondValidRangeAndUngapped" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_gappedfullRange" time="0"/>
  <testcase name="hasBeyondValidRange" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_gappedfullRange" time="0"/>
  <testcase name="entireSequenceIsValid" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_gappedfullRange" time="0.003"/>
  <testcase name="reverseFullRange" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_reverseComplimentRange" time="0"/>
  <testcase name="validRangeInMiddleOfFullRange" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_reverseComplimentRange" time="0"/>
  <testcase name="fullLengthSmallerThanValidRangeShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_reverseComplimentRange" time="0.001"/>
  <testcase name="reverse" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_reverseComplimentRange" time="0"/>
  <testcase name="upstreamGapShouldShiftRange" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedRange" time="0"/>
  <testcase name="downstreamGapsShouldReturnSameRange" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedRange" time="0"/>
  <testcase name="noGapsShouldReturnSameRange" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedRange" time="0"/>
  <testcase name="nullSequenceShouldThrowNPE" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedRange" time="0"/>
  <testcase name="gapsInsideRangeShouldShiftEndCoordinate" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedRange" time="0.001"/>
  <testcase name="nullRangeShouldThrowNPE" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedRange" time="0"/>
  <testcase name="forwardSequenceOneGapBeforeDesiredOffsetShouldReturnOffsetMinusNumGaps" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedFullRangeOffset" time="0.002"/>
  <testcase name="reverseSequenceOneGapBeforeDesiredOffsetShouldReturnOffsetMinusNumGaps" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedFullRangeOffset" time="0.001"/>
  <testcase name="reverseSequenceNoGapsValidRangeIsSubsetOfFullLength" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedFullRangeOffset" time="0"/>
  <testcase name="reverseSequenceNoGapsValidLengthIsEntireSequence" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedFullRangeOffset" time="0.001"/>
  <testcase name="forwardSequenceOneGapAfterDesiredOffsetShouldReturnSameOffset" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedFullRangeOffset" time="0"/>
  <testcase name="forwardSequenceNoGapsValidRangeIsSubsetOfFullLength" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedFullRangeOffset" time="0"/>
  <testcase name="forwardSequenceNoGapsValidLengthIsEntireSequenceShouldReturnSameOffset" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedFullRangeOffset" time="0"/>
  <testcase name="forwardSequencetwoGapBeforeDesiredOffsetShouldReturnOffsetMinusNumGaps" classname="org.jcvi.jillion.assembly.TestAssemblyUtil_convertToUngappedFullRangeOffset" time="0"/>
  <testcase name="equalsSameRValues" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0.001"/>
  <testcase name="notEqualsDifferentLength" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="endNotSetShouldThowIllegalStateException" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="remove" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="nullElementsShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="add" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="builder" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0.001"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="notEqualsDifferentStart" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="sameElementsDifferentOrderAreEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="notEqualsDifferentElements" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageRegion" time="0"/>
  <testcase name="emptyCoverageMapWillNeverIntesect" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.008"/>
  <testcase name="emptyListShouldReturnEmptyCoverageMap" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="getRegionsWhichIntersectAllCombinations" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.011"/>
  <testcase name="enteringSequenceStartsAtPreviousRegionsEnd" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.018"/>
  <testcase name="forceStartAt0WithNegativeRangesButCovers0ShouldNotBeChanged" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="hasleavingSequence" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="getRegionsWhichCovers" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="notEqualsDifferentNumberOfRegions" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="threeConsecutiveReadsEndAtSamePoint" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="forceStartAt0WithNegativeRangesDoesNotCover0ShouldGetExtra0x" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="getRegionsWhichIntersect" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="oneSequenceShouldHaveOneCoverageRegion" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="ignoreSequenceOfZeroSize" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="zeroCoverageRegion" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="emptyCoverageMapWillNeverCover" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="getRegionsWhichIntersectNoIntersectionsReturnEmptyList" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="firstElementDoesNotCover0" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="getRegionsWhichCoversNoIntersectionsReturnNull" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="twoTiledSequencesShouldHave3CoverageRegions" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="equalsSameVaues" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="forceStartAt0ShouldMakeFirstElement0x" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="coverageRegionNotEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="abutment" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0.001"/>
  <testcase name="threeConsecutiveReadsStartAtSamePoint" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="sizeOf1" classname="org.jcvi.jillion.assembly.util.TestDefaultCoverageMapBuilder" time="0"/>
  <testcase name="multipleLimitedCoverageRegions" classname="org.jcvi.jillion.assembly.util.TestCoverageRestrictedMap" time="0.001"/>
  <testcase name="coverageLessThanLimitShouldMakeFullCoverageMap" classname="org.jcvi.jillion.assembly.util.TestCoverageRestrictedMap" time="0"/>
  <testcase name="maxCoverageEqualsLimitShouldMakeFullCoverageMap" classname="org.jcvi.jillion.assembly.util.TestCoverageRestrictedMap" time="0"/>
  <testcase name="maxCoverageMoreThanLimitCauses0xRegion" classname="org.jcvi.jillion.assembly.util.TestCoverageRestrictedMap" time="0.001"/>
  <testcase name="moreElementsThanRequiredInFirstRegionShouldLimitAllRegions" classname="org.jcvi.jillion.assembly.util.TestCoverageRestrictedMap" time="0"/>
  <testcase name="maxCoverageMoreThanLimitShouldMakeIgnoreReadsThatEnterOverLimit" classname="org.jcvi.jillion.assembly.util.TestCoverageRestrictedMap" time="0.001"/>
  <testcase name="oneGapInConsensus" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderUseUngappedCoords" time="0.005"/>
  <testcase name="noGapsShouldSameReturnSameAsGappedCoverageMap" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderUseUngappedCoords" time="0.002"/>
  <testcase name="contigCoverageAboveThresholdInStariStepShouldIgnoreReadsThatGoOver" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMaxCoverage" time="0.002"/>
  <testcase name="contigCoverageAboveThresholdInStackShouldIgnoreReadsThatGoOver" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMaxCoverage" time="0.005"/>
  <testcase name="contigCoverageAlwaysBelowThresholdShouldBeSameAsWithoutThreshold" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMaxCoverage" time="0.001"/>
  <testcase name="contigCoverageEqualToThresholdShouldBeSameAsWithoutThreshold" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMaxCoverage" time="0"/>
  <testcase name="contigCoverageAboveThresholdShouldIgnoreReadsThatGoOver" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMaxCoverage" time="0"/>
  <testcase name="contigCoverageAboveThresholdInStariStepShouldIgnoreReadsThatGoOver" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMaxCoverage" time="0.01"/>
  <testcase name="contigCoverageAboveThresholdInStackShouldIgnoreReadsThatGoOver" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMaxCoverage" time="0.002"/>
  <testcase name="contigCoverageAlwaysBelowThresholdShouldBeSameAsWithoutThreshold" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMaxCoverage" time="0.001"/>
  <testcase name="contigCoverageEqualToThresholdShouldBeSameAsWithoutThreshold" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMaxCoverage" time="0.002"/>
  <testcase name="contigCoverageAboveThresholdShouldIgnoreReadsThatGoOver" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMaxCoverage" time="0.001"/>
  <testcase name="contigCoverageAlwaysBelowThresholdShouldBeSameAsWithoutThreshold" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMinCoverage" time="0"/>
  <testcase name="readEnteringIsOverMaxButProvidesRequiredDownstreamShouldStay2" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMinCoverage" time="0.003"/>
  <testcase name="readEnteringIsOverMaxButProvidesRequiredDownstreamShouldStay" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMinCoverage" time="0.003"/>
  <testcase name="addBackLongestReadToGetMostCoverageBack" classname="org.jcvi.jillion.assembly.util.TestCoverageMapBuilderMinCoverage" time="0.002"/>
  <testcase name="contigCoverageAlwaysBelowThresholdShouldBeSameAsWithoutThreshold" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMinCoverage" time="0.007"/>
  <testcase name="readEnteringIsOverMaxButProvidesRequiredDownstreamShouldStay2" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMinCoverage" time="0.003"/>
  <testcase name="readEnteringIsOverMaxButProvidesRequiredDownstreamShouldStay" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMinCoverage" time="0.002"/>
  <testcase name="addBackLongestReadToGetMostCoverageBack" classname="org.jcvi.jillion.assembly.util.TestCoverageMapCollectorMinCoverage" time="0.002"/>
  <testcase name="sameQualitiesFlankingOneGapShouldReturnFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0.001"/>
  <testcase name="multiGapReverseRightFlankingGapIsLowerShouldReturnRightFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0.002"/>
  <testcase name="rightFlankingGapIsLowerShouldReturnRightFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0"/>
  <testcase name="reverseLeftFlankingGapIsLowerShouldReturnLeftFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0"/>
  <testcase name="fullLengthReadStartsWithGapShouldThrowException" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0.001"/>
  <testcase name="leftFlankingGapIsLowerShouldReturnLeftFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0"/>
  <testcase name="multiGapRightFlankingGapIsLowerShouldReturnRightFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0"/>
  <testcase name="rightReverseFlankingGapIsLowerShouldReturnRightFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0.002"/>
  <testcase name="multiGapLeftFlankingGapIsLowerShouldReturnLeftFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0"/>
  <testcase name="multiGapReverseLeftFlankingGapIsLowerShouldReturnLeftFlankingQuality" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0.001"/>
  <testcase name="fullLengthReadEndsWithGapShouldThrowException" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0"/>
  <testcase name="getGappedValidRangeQualSequenceByReadWithNullQualitiesShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0"/>
  <testcase name="getGappedValidRangeQualSequenceByReadWithNullReadShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0"/>
  <testcase name="testGappedValidRangeQualityReverseSequence" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0.005"/>
  <testcase name="testGappedValidRangeQualityForwardSequence" classname="org.jcvi.jillion.assembly.util.TestLowestFlankingQualityValueStrategy" time="0.004"/>
  <testcase name="fullLengthReadStartsWithGapShouldThrowException" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="oneGapShouldReturnQualityValue0" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="readEndsWithGapButHasOtherBasesInTrimmedOffPortionShouldReturn0" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="fullLengthReadStartsEndsWithGapButHasOtherBasesInTrimmedOffPortionShouldReturn0" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="multiGapShouldReturnQualityValue0" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="oneGapShouldReverseReturnQualityValue0" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="multiGapGapShouldReverseReturnQualityValue0" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="fullLengthReadEndsWithGapShouldThrowException" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="getGappedValidRangeQualSequenceByReadWithNullQualitiesShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="getGappedValidRangeQualSequenceByReadWithNullReadShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="testGappedValidRangeQualityReverseSequence" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="testGappedValidRangeQualityForwardSequence" classname="org.jcvi.jillion.assembly.util.TestAlwaysZeroGapsQualityStrategy" time="0"/>
  <testcase name="differentBaseShouldNotBeEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceElement" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceElement" time="0"/>
  <testcase name="differentIdShouldNotBeEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceElement" time="0"/>
  <testcase name="differentQualityShouldNotBeEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceElement" time="0"/>
  <testcase name="equalsSameValuesShouldBeEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceElement" time="0"/>
  <testcase name="differentDirectionShouldNotBeEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceElement" time="0"/>
  <testcase name="equalsSameRefShouldBeEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceElement" time="0"/>
  <testcase name="differentBaseShouldNotBeEqual" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceElement" time="0.005"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceElement" time="0"/>
  <testcase name="differentIdShouldNotBeEqual" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceElement" time="0"/>
  <testcase name="differentQualityShouldNotBeEqual" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceElement" time="0"/>
  <testcase name="equalsSameValuesShouldBeEqual" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceElement" time="0"/>
  <testcase name="differentDirectionShouldNotBeEqual" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceElement" time="0"/>
  <testcase name="equalsSameRefShouldBeEqual" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceElement" time="0"/>
  <testcase name="oneElement" classname="org.jcvi.jillion.assembly.util.TestDefaultSlice" time="0"/>
  <testcase name="emptySlice" classname="org.jcvi.jillion.assembly.util.TestDefaultSlice" time="0"/>
  <testcase name="manyElements" classname="org.jcvi.jillion.assembly.util.TestDefaultSlice" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.util.TestDefaultSlice" time="0.007"/>
  <testcase name="oneElement" classname="org.jcvi.jillion.assembly.util.TestCompactedSlice" time="0.003"/>
  <testcase name="emptySlice" classname="org.jcvi.jillion.assembly.util.TestCompactedSlice" time="0"/>
  <testcase name="manyElements" classname="org.jcvi.jillion.assembly.util.TestCompactedSlice" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.util.TestCompactedSlice" time="0.001"/>
  <testcase name="slicesAddedInDifferentOrderShouldStillBeEqual" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="replaceMiddleSliceElement" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="iterableConstructorWithNullShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="containsNullShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="copyConstructor" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0.001"/>
  <testcase name="copyChangeConsensusShouldNoLongerBeEqual" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0.001"/>
  <testcase name="emptySlice" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="removeNonExistentElementShouldDoNothing" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="contains" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="addingSliceElementIdShouldOverwriteExistingValue" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="setConsensusCallInConstructor" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="copy" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0.001"/>
  <testcase name="copyMethodWithSetConsensus" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="alwaysExceptingFilterDoesNotRemoveAnyElements" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0.001"/>
  <testcase name="addNullElementShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="filterRemovesEverything" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="filterRemovesSomeElements" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0.001"/>
  <testcase name="addSliceElement" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="addMultipleSliceElementsAllAtOnce" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="setConsensusCallToNull" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="setConsensusCall" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="copyConstructorWithNullShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="copyConstructorWithSetConsensus" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="filterConstructorShouldMatchCallingFilterExplicity" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="addMultipleSliceElementsOneAtATime" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0.001"/>
  <testcase name="removeSliceElement" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="nullFilterThrowsNPE" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0.001"/>
  <testcase name="replaceFirstSliceElement" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="replaceLastSliceElement" classname="org.jcvi.jillion.assembly.util.TestSliceBuilder" time="0"/>
  <testcase name="gapsInSliceShouldUseLowestFlankingQualityValues" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceMap" time="0.007"/>
  <testcase name="differentSliceMapsNotEqual" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceMap" time="0.001"/>
  <testcase name="sameSliceMapIsEqualToItself" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceMap" time="0"/>
  <testcase name="sameSliceMapIsEqualToSameValues" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceMap" time="0.003"/>
  <testcase name="multipleDepthSlices" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceMap" time="0.001"/>
  <testcase name="multipleBasecallsPerSlice" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceMap" time="0.006"/>
  <testcase name="allSlicesSameDepth" classname="org.jcvi.jillion.assembly.util.TestDefaultSliceMap" time="0"/>
  <testcase name="gapsInSliceShouldUseLowestFlankingQualityValues" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceMap" time="0.002"/>
  <testcase name="differentSliceMapsNotEqual" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceMap" time="0.002"/>
  <testcase name="sameSliceMapIsEqualToItself" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceMap" time="0.001"/>
  <testcase name="sameSliceMapIsEqualToSameValues" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceMap" time="0.001"/>
  <testcase name="multipleDepthSlices" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceMap" time="0.001"/>
  <testcase name="multipleBasecallsPerSlice" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceMap" time="0.001"/>
  <testcase name="allSlicesSameDepth" classname="org.jcvi.jillion.assembly.util.TestCompactedSliceMap" time="0.005"/>
  <testcase name="gapsInSliceShouldUseLowestFlankingQualityValues" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderUsingQualityDataStore" time="0.002"/>
  <testcase name="differentSliceMapsNotEqual" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderUsingQualityDataStore" time="0.006"/>
  <testcase name="sameSliceMapIsEqualToItself" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderUsingQualityDataStore" time="0.002"/>
  <testcase name="sameSliceMapIsEqualToSameValues" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderUsingQualityDataStore" time="0"/>
  <testcase name="multipleDepthSlices" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderUsingQualityDataStore" time="0.001"/>
  <testcase name="multipleBasecallsPerSlice" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderUsingQualityDataStore" time="0"/>
  <testcase name="allSlicesSameDepth" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderUsingQualityDataStore" time="0.001"/>
  <testcase name="allQualitiesAreDefaultValue" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderUsingDefaultQualities" time="0.001"/>
  <testcase name="filterReads" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderReadFilter" time="0.002"/>
  <testcase name="readFilterDoesNotFilterAnyReads" classname="org.jcvi.jillion.assembly.util.TestSliceMapBuilderReadFilter" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[0]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.003"/>
  <testcase name="assertConsensusIsCorrect[1]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.005"/>
  <testcase name="assertConsensusIsCorrect[2]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[3]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[4]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[5]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.004"/>
  <testcase name="assertConsensusIsCorrect[6]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[7]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[8]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[9]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[10]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[11]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[12]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[13]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[14]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.002"/>
  <testcase name="assertConsensusIsCorrect[15]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[16]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[17]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[18]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[19]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.005"/>
  <testcase name="assertConsensusIsCorrect[20]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[21]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[22]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[23]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[24]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[25]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[26]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[27]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[28]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[29]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[30]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[31]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[32]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[33]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[34]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[35]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[36]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[37]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[38]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[39]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[40]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[41]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[42]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[43]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[44]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[45]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[46]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[47]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[48]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[49]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[50]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[51]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[52]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[53]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[54]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[55]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[56]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[57]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[58]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[59]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[60]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[61]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[62]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[63]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[64]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[65]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[66]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.003"/>
  <testcase name="assertConsensusIsCorrect[67]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[68]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[69]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[70]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[71]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[72]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[73]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[74]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[75]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[76]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[77]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[78]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[79]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[80]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[81]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.005"/>
  <testcase name="assertConsensusIsCorrect[82]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[83]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[84]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[85]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[86]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[87]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[88]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[89]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[90]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[91]" classname="org.jcvi.jillion.assembly.util.consensus.TestConicConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[0]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[1]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[2]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[3]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[4]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[5]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.002"/>
  <testcase name="assertConsensusIsCorrect[6]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[7]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[8]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[9]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[10]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[11]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[12]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[13]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[14]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[15]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[16]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[17]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[18]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[19]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.002"/>
  <testcase name="assertConsensusIsCorrect[20]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[21]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[22]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[23]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[24]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[25]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[26]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[27]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[28]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[29]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[30]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[31]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[32]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[33]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[34]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[35]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[36]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[37]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[38]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[39]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[40]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[41]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[42]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[43]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[44]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[45]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[46]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[47]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[48]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[49]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[50]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[51]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[52]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[53]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[54]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[55]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[56]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[57]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[58]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[59]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[60]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[61]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[62]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[63]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[64]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[65]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[66]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[67]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[68]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[69]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[70]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[71]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[72]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[73]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[74]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[75]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[76]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[77]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[78]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[79]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[80]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[81]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[82]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[83]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[84]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[85]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[86]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[87]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[88]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[89]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[90]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[91]" classname="org.jcvi.jillion.assembly.util.consensus.TestBasicChurchillWatermanConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[0]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[1]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[2]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[3]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[4]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[5]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[6]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[7]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[8]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[9]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[10]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[11]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[12]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[13]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[14]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[15]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[16]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[17]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[18]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[19]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[20]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[21]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[22]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[23]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[24]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[25]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[26]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[27]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[28]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[29]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[30]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[31]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[32]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[33]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[34]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[35]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[36]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[37]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[38]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[39]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[40]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[41]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[42]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[43]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[44]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[45]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[46]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[47]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[48]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[49]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[50]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[51]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[52]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[53]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[54]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[55]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[56]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[57]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[58]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[59]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[60]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[61]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[62]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[63]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[64]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[65]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[66]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[67]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[68]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[69]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[70]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[71]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[72]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[73]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[74]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[75]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[76]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[77]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[78]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[79]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[80]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[81]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[82]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[83]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[84]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[85]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[86]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[87]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[88]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[89]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[90]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[91]" classname="org.jcvi.jillion.assembly.util.consensus.TestAnnotationConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[0]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[1]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[2]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[3]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[4]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[5]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[6]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[7]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[8]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[9]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[10]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[11]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[12]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[13]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[14]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[15]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[16]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[17]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[18]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[19]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[20]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[21]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.004"/>
  <testcase name="assertConsensusIsCorrect[22]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[23]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[24]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[25]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[26]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[27]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[28]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[29]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[30]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[31]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[32]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[33]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[34]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[35]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[36]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[37]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[38]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[39]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[40]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[41]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[42]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[43]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[44]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[45]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.003"/>
  <testcase name="assertConsensusIsCorrect[46]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[47]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[48]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[49]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[50]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[51]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[52]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[53]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[54]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[55]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[56]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[57]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[58]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[59]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[60]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[61]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[62]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[63]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[64]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[65]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[66]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[67]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[68]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[69]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[70]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[71]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[72]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[73]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[74]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[75]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[76]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[77]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[78]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[79]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[80]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[81]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[82]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[83]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[84]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[85]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[86]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[87]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[88]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[89]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[90]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[91]" classname="org.jcvi.jillion.assembly.util.consensus.TestNoAmbiguityConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[0]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[1]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[2]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[3]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[4]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[5]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[6]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[7]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[8]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.003"/>
  <testcase name="assertConsensusIsCorrect[9]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[10]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[11]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[12]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[13]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[14]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[15]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[16]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[17]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[18]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[19]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[20]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[21]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[22]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[23]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[24]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[25]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[26]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[27]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[28]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.007"/>
  <testcase name="assertConsensusIsCorrect[29]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[30]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[31]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[32]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[33]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[34]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[35]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[36]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[37]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[38]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[39]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[40]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[41]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[42]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[43]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[44]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[45]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[46]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[47]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[48]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[49]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[50]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[51]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[52]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[53]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[54]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[55]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[56]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[57]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[58]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[59]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[60]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[61]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[62]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[63]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[64]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[65]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[66]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[67]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[68]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[69]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[70]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[71]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[72]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[73]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[74]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[75]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[76]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[77]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[78]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[79]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[80]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[81]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[82]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[83]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[84]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[85]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0.001"/>
  <testcase name="assertConsensusIsCorrect[86]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[87]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[88]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[89]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[90]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="assertConsensusIsCorrect[91]" classname="org.jcvi.jillion.assembly.util.consensus.TestMostFrequentBasecallConsensusCaller" time="0"/>
  <testcase name="deletionMajorityInOnlyReverseShouldNotCallDeletion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0.001"/>
  <testcase name="deletionMajorityButOnlyReadsInForwardShouldCallInsertion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="deletionMajorityInBothDirectionsShouldCallDeletion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="insertionMajorityInBothDirectionsShouldCallInsertion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0.001"/>
  <testcase name="deletionEachStrandCallsSomethingElseShouldGoWithDirectionThatMatches" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0.002"/>
  <testcase name="insertionMajorityButOnlyReadsInForwardShouldCallInsertion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="majorityMatchesNonGapConsensusShouldMatchMajority" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="nullDelegateCallerShouldThrowNPE" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="insertionMajorityInOnlyForwardShouldCallNotInsertion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="deletionMajorityInOnlyForwardShouldNotCallDeletion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="deletionMajorityButOnlyReadsInReverseShouldCallInsertion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="majorityMatchesGapConsensusShouldMatchMajority" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="useDelegateConsensus" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0.001"/>
  <testcase name="insertionMajorityButOnlyReadsInReverseShouldCallInsertion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0"/>
  <testcase name="insertionMajorityInOnlyReverseShouldCallNotInsertion" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0.001"/>
  <testcase name="majorityIsNonGapButDifferentThanReferenceShouldMatchMajority" classname="org.jcvi.jillion.assembly.util.consensus.TestNextGenReferenceConsensusRecaller" time="0.001"/>
  <testcase name="mostFrequentACGT" classname="org.jcvi.jillion.assembly.util.consensus.TestMajorityConsensusN" time="0"/>
  <testcase name="acgtn" classname="org.jcvi.jillion.assembly.util.consensus.TestMajorityConsensusN" time="0.001"/>
  <testcase name="conic" classname="org.jcvi.jillion.assembly.util.consensus.TestMajorityConsensusN" time="0.003"/>
  <testcase name="noAmbiguities" classname="org.jcvi.jillion.assembly.util.consensus.TestMajorityConsensusN" time="0.001"/>
  <testcase name="createSliceMap" classname="org.jcvi.jillion.assembly.util.slice.TestSingleNucleotideSliceMap" time="0.007"/>
  <testcase name="readStartsFrame2InsideSliceShouldSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.033"/>
  <testcase name="readStartsCondon2Frame2InsideSliceShouldSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.002"/>
  <testcase name="readStartsAfterCdsShouldBeSkipped" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.009"/>
  <testcase name="readStartsInFrame3AndGoesBeyondReferenceSeqShouldIgnoreDownstream" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="veryGappy" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="consensusSubset" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="readStartsBeforeCdsButIntersectsItToo" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="consensusHasGapsMakeMapOfSubRange" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.005"/>
  <testcase name="noGapsSkipIncompleteNothingToSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="readStartsInFrame2WithGapsAndGoesBeyondReferenceSeqShouldIgnoreDownstream" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0"/>
  <testcase name="gappedReadStartsInsideSliceShouldSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="readStartsBeforeCdsButStartOffsetIsMoreThanRefSplicedLength" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0"/>
  <testcase name="readStartsCondon2Frame1InsideSliceShouldSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="readStartsFrame3InsideSliceShouldSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0"/>
  <testcase name="readStartsCondon2Frame3InsideSliceShouldSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="consensusHasGaps" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.005"/>
  <testcase name="mixOfLeadingTrailingAndInternalGapsAndConsensusGaps" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.002"/>
  <testcase name="splicedExons" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.006"/>
  <testcase name="readStartsBeforeCdsButIntersectsItTooRegressionCheckDontHaveNegativeStartOffset" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="readStartsInFrame1AndGoesBeyondReferenceSeqShouldIgnoreDownstream" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0"/>
  <testcase name="readEndsInsideSliceShouldShouldSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.003"/>
  <testcase name="mixOfLeadingTrailingAndInternalGapsShouldSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.002"/>
  <testcase name="consensusHasGapsMakeMapOfSubRangeWithReadExtendingBeyond" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="readHasInternalGapsSkipIncompleteNothingToSkip" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0"/>
  <testcase name="readHasNegativeOffset" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.005"/>
  <testcase name="readStartsInFrame2AndGoesBeyondReferenceSeqShouldIgnoreDownstream" classname="org.jcvi.jillion.assembly.util.slice.TestVariableNucleotideSliceMap" time="0.001"/>
  <testcase name="editRegionContainsGaps" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMap" time="0.004"/>
  <testcase name="downStreamReadShouldBeShifted" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMap" time="0.002"/>
  <testcase name="upstreamReadShouldNotBeAffected" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMap" time="0.001"/>
  <testcase name="partialReadEndsInsideEditAreaShouldIncludeEverythingInSlicesExceptLastCodonOfRead" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMap" time="0.003"/>
  <testcase name="allReadsFullLengthNoGaps" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMap" time="0.001"/>
  <testcase name="partialReadStartsInsideEditAreaShouldReplaceRegionWithGaps" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMap" time="0.006"/>
  <testcase name="downstreamGapsNotAffected" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMap" time="0.002"/>
  <testcase name="readStartsBeforeEditRegion" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMapRealData" time="0.002"/>
  <testcase name="readStartsAtBeginningOfButDoesntMatchEditSeqReadEndsInsideEditRegionTrailingGapsTrimmed" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMapRealData" time="0.001"/>
  <testcase name="readStarts1bpIntoGappedEditRegion" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMapRealData" time="0.001"/>
  <testcase name="readStartsAtBeginningOfButHasExtraBasesInConsensusGaps" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMapRealData" time="0.008"/>
  <testcase name="readStartsAt2ndFrameOfEditRegion" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMapRealData" time="0.001"/>
  <testcase name="readStartsAtBeginningOfButDoesntMatchEditSeqAndHasExtraBasesInConsensusGaps" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMapRealData" time="0.002"/>
  <testcase name="readStartsIntoGappedEditRegion" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMapRealData" time="0.002"/>
  <testcase name="readStartsAtBeginingOfGappedEditRegion" classname="org.jcvi.jillion.assembly.util.slice.TestRnaEditedCodonSliceMapRealData" time="0.001"/>
  <testcase name="sameValuesAreEqual" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="toGappedValidRangeGivenOffsetBeforeStartOfReadShouldThrowException" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="differentReadIsNotEqual" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="sameRefIsEqual" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="toGappedValidRangeGivenOffsetPastEndOfReadShouldThrowException" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="differentIdIsNotEqual" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="differentStartIsNotEqual" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="toReferenceOffsetGivenOffsetIsNegativeShouldThrowException" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0.007"/>
  <testcase name="toReferenceOffsetGivenOffsetPastEndOfReadShouldThrowException" classname="org.jcvi.jillion.assembly.TestDefaultPlacedRead" time="0"/>
  <testcase name="oneContigOneRead" classname="org.jcvi.jillion.assembly.TestContigDataStoreTransformationService" time="0.01"/>
  <testcase name="nullDataStoreShouldThrowNPE" classname="org.jcvi.jillion.assembly.TestContigDataStoreTransformationService" time="0"/>
  <testcase name="replaceReverseSeqBaseWithNonGapShouldOnlyAffectSequence" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.002"/>
  <testcase name="replaceReverseSeqFirstBaseWithGapShouldShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="replaceBaseWithNonGapShouldOnlyAffectSequence" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.001"/>
  <testcase name="trimSequenceThatLeavesEndingGapShouldHaveAdjustedValidRange" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="shiftReverseShouldOnlyAffectStartOffset" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="appendSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="insertReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.001"/>
  <testcase name="prependSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="deleteReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="insertReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.001"/>
  <testcase name="prependReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="appendReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.001"/>
  <testcase name="deleteSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="trimSequenceThatLeavesStartingGapShouldHaveAdjustedValidRange" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="insertGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="replaceBaseWithGapShouldOnlyShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.001"/>
  <testcase name="shiftShouldOnlyAffectStartOffset" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="trimSequenceShouldAffectValidRangeAndUngappedFullLengthAndStartOffset" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="prependReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.001"/>
  <testcase name="appendGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="noChanges" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="prependGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="insertSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.002"/>
  <testcase name="replaceReverseSeqBaseWithGapShouldShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="appendReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0"/>
  <testcase name="trimReverseSequenceShouldAffectValidRangeAndUngappedFullLengthAndStartOffset" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.001"/>
  <testcase name="replaceFirstBaseWithGapShouldOnlyShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultAssembledReadBuilder" time="0.001"/>
  <testcase name="write" classname="org.jcvi.jillion.assembly.tigr.ctg.TestContigFileWriter" time="0.085"/>
  <testcase name="thereAre4Contigs" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultTigrContigFileDataStore" time="0.005"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultTigrContigFileDataStore" time="0.004"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultTigrContigFileDataStore" time="0.005"/>
  <testcase name="decodeLastConsensus" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultTigrContigFileDataStore" time="0.002"/>
  <testcase name="decode925" classname="org.jcvi.jillion.assembly.tigr.ctg.TestDefaultTigrContigFileDataStore" time="0.004"/>
  <testcase name="thereAre4Contigs" classname="org.jcvi.jillion.assembly.tigr.ctg.TestIndexedTigrContigFileDataStore" time="0.004"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.tigr.ctg.TestIndexedTigrContigFileDataStore" time="0.084"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.tigr.ctg.TestIndexedTigrContigFileDataStore" time="0.004"/>
  <testcase name="decodeLastConsensus" classname="org.jcvi.jillion.assembly.tigr.ctg.TestIndexedTigrContigFileDataStore" time="0.018"/>
  <testcase name="decode925" classname="org.jcvi.jillion.assembly.tigr.ctg.TestIndexedTigrContigFileDataStore" time="0.151"/>
  <testcase name="thereAre4Contigs" classname="org.jcvi.jillion.assembly.tigr.ctg.TestLargeTigrContigFileDataStore" time="0.026"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.tigr.ctg.TestLargeTigrContigFileDataStore" time="0.091"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.tigr.ctg.TestLargeTigrContigFileDataStore" time="0.037"/>
  <testcase name="decodeLastConsensus" classname="org.jcvi.jillion.assembly.tigr.ctg.TestLargeTigrContigFileDataStore" time="0.027"/>
  <testcase name="decode925" classname="org.jcvi.jillion.assembly.tigr.ctg.TestLargeTigrContigFileDataStore" time="0.053"/>
  <testcase name="getRenamedContigIdNotContigRenameTagShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0.002"/>
  <testcase name="clipPointTypeNoIntersectionOfGoodQualityAndAlignRange" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0.001"/>
  <testcase name="isContigRename" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0"/>
  <testcase name="isNotContigRename" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0"/>
  <testcase name="getRenamedContigIdNotValidContigRenameTagShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0"/>
  <testcase name="getRenamedContigId" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0.001"/>
  <testcase name="clipPointTypeAllLowQuality" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0"/>
  <testcase name="clipPointTypeAllNegativeValidRange" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0"/>
  <testcase name="clipPointTypeNegativeAlignRange" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0"/>
  <testcase name="convertAceGapsToContigGaps" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil" time="0"/>
  <testcase name="contigIdAlreadyHasCoordinatesThatTakeIntoAccountMissing5primeAtTheEnd_ShouldModifyThoseCoordinates" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xNoGaps" time="0.014"/>
  <testcase name="singleContigThatMissesEdgesShouldReturnUntrimmedButWithSubRange" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xNoGaps" time="0.002"/>
  <testcase name="one0xRegionShouldSplitContigIn2" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xNoGaps" time="0.004"/>
  <testcase name="contigWithNo0xRegionsShouldNotTrim" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xNoGaps" time="0.003"/>
  <testcase name="contigIdAlreadyHasCoordinatesAtTheEnd_ShouldModifyThoseCoordinates" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xNoGaps" time="0"/>
  <testcase name="contigWithNo0xRegionsAndFullLengthShouldNotTrim" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xWithGaps" time="0"/>
  <testcase name="contigIdAlreadyHasCoordinatesThatTakeIntoAccountMissing5primeAtTheEnd_ShouldModifyThoseCoordinates" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xWithGaps" time="0.001"/>
  <testcase name="singleContigThatMissesEdgesShouldReturnUntrimmedButWithSubRange" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xWithGaps" time="0.001"/>
  <testcase name="one0xRegionShouldSplitContigIn2" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xWithGaps" time="0.001"/>
  <testcase name="contigIdAlreadyHasCoordinatesAtTheEnd_ShouldModifyThoseCoordinates" classname="org.jcvi.jillion.assembly.consed.TestConsedUtil_Split0xWithGaps" time="0.001"/>
  <testcase name="version2ShouldMakeVersion3" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetNextAceVersion" time="0"/>
  <testcase name="version1ShouldMakeVersion2" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetNextAceVersion" time="0"/>
  <testcase name="twoDigitVersion" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetNextAceVersion" time="0"/>
  <testcase name="noPrefix" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetNextAceVersion" time="0"/>
  <testcase name="noVersionShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetNextAceVersion" time="0"/>
  <testcase name="doubleSuffix" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetNextAceVersion" time="0"/>
  <testcase name="noAceFilesShouldReturnNull" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetLatestAce" time="0.051"/>
  <testcase name="multipleAcesShouldReturnHighestVersion" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetLatestAce" time="0.001"/>
  <testcase name="otherPrefixedAceFilesShouldBeIgnored" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetLatestAce" time="0"/>
  <testcase name="oneAceShouldReturnIt" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetLatestAce" time="0.001"/>
  <testcase name="otherSuffixedFilesButWhichContainAceVersionPrefixInNameShouldBeIgnored" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetLatestAce" time="0"/>
  <testcase name="unversionedAce" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetAcePrefix" time="0"/>
  <testcase name="unversionedAceWithDotPrefix" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetAcePrefix" time="0"/>
  <testcase name="versionedAceWithDotPrefix" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetAcePrefix" time="0"/>
  <testcase name="versionedAce" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetAcePrefix" time="0"/>
  <testcase name="getConsedDir" classname="org.jcvi.jillion.assembly.consed.TestConsedUtilGetConsedDir" time="0.001"/>
  <testcase name="settingWholeReadItemToNullShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0.001"/>
  <testcase name="callingFakePeaksAfterRealPeaksShouldUseFakePeaks" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0.001"/>
  <testcase name="settingReadTags" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0.002"/>
  <testcase name="changesToCopiesDoNotAffectEachOther" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="setPeaksWrongLengthShouldThrowException" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="fakePeak0SpacingShouldThrowException" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="settingComments" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="changingValuesAfterSettingCommentsShouldNotAffectPhdComments" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="userDefinedfakePeaks" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="nullSeqShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="changingReadTagsAfterSettingShouldNotChangePhd" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="notSpecifyingPeaksSetsThemToNull" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="nullIdShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="settingWholeReadItems" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0.001"/>
  <testcase name="setPeaksToNull" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="fakePeaksShouldStartAt15AndBeSpacedBy19" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="qualsLongerThanSeqShouldThrowException" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="seqLongerThanQualsShouldThrowException" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0.001"/>
  <testcase name="changingWholeReadItemAfterSettingShouldNotChangePhd" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0.003"/>
  <testcase name="settingReadTagsToNullShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="setPeaksToNonNull" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="settingPeaksAfterfakingPeaksShouldUseRealPeaks" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0.001"/>
  <testcase name="nullQualsShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="constructUsingPhd" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="settingCommentsToNullShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="fakePeak0StartShouldThrowException" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBuilder" time="0"/>
  <testcase name="withProperties" classname="org.jcvi.jillion.assembly.consed.phd.TestBuildArtificialPhd" time="0.002"/>
  <testcase name="noPropertiesAndTagsConstructor" classname="org.jcvi.jillion.assembly.consed.phd.TestBuildArtificialPhd" time="0"/>
  <testcase name="parseFakeReads" classname="org.jcvi.jillion.assembly.consed.phd.TestFakePhdReadParser" time="0.054"/>
  <testcase name="parseFileWithoutPositions" classname="org.jcvi.jillion.assembly.consed.phd.TestParsingPhdBallFileWithoutPositions" time="0.002"/>
  <testcase name="getAfterCloseShouldIllegalStateException" classname="org.jcvi.jillion.assembly.consed.phd.TestDefaultPhdDataStore2" time="0.01"/>
  <testcase name="get" classname="org.jcvi.jillion.assembly.consed.phd.TestDefaultPhdDataStore2" time="0.003"/>
  <testcase name="size" classname="org.jcvi.jillion.assembly.consed.phd.TestDefaultPhdDataStore2" time="0.007"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.consed.phd.TestDefaultPhdDataStore2" time="0.008"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.consed.phd.TestDefaultPhdDataStore2" time="0.008"/>
  <testcase name="getAfterCloseShouldIllegalStateException" classname="org.jcvi.jillion.assembly.consed.phd.TestIndexedPhdDataStore2" time="0.004"/>
  <testcase name="get" classname="org.jcvi.jillion.assembly.consed.phd.TestIndexedPhdDataStore2" time="0.017"/>
  <testcase name="size" classname="org.jcvi.jillion.assembly.consed.phd.TestIndexedPhdDataStore2" time="0.001"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.consed.phd.TestIndexedPhdDataStore2" time="0.03"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.consed.phd.TestIndexedPhdDataStore2" time="0"/>
  <testcase name="getAfterCloseShouldIllegalStateException" classname="org.jcvi.jillion.assembly.consed.phd.TestLargePhdDataStore2" time="0.004"/>
  <testcase name="get" classname="org.jcvi.jillion.assembly.consed.phd.TestLargePhdDataStore2" time="0.012"/>
  <testcase name="size" classname="org.jcvi.jillion.assembly.consed.phd.TestLargePhdDataStore2" time="0.003"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.consed.phd.TestLargePhdDataStore2" time="0.01"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.consed.phd.TestLargePhdDataStore2" time="0.005"/>
  <testcase name="nullCommentShouldNotBeWritten" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBallWriter" time="0.001"/>
  <testcase name="writeComment" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBallWriter" time="0"/>
  <testcase name="write" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBallWriter" time="0.02"/>
  <testcase name="writeMultiplePhds" classname="org.jcvi.jillion.assembly.consed.phd.TestPhdBallWriter" time="0.012"/>
  <testcase name="writeOnePhdWithFakePositions" classname="org.jcvi.jillion.assembly.consed.phd.TestSinglePhdWriter" time="0.012"/>
  <testcase name="writeOnePhdWithRealPositions" classname="org.jcvi.jillion.assembly.consed.phd.TestSinglePhdWriter" time="0.008"/>
  <testcase name="writingMoreThanOnePhdShouldThrowIOException" classname="org.jcvi.jillion.assembly.consed.phd.TestSinglePhdWriter" time="0.003"/>
  <testcase name="parseChromatogramMadeAroundMidnight" classname="org.jcvi.jillion.assembly.consed.ace.TestAceFileUtil" time="0.011"/>
  <testcase name="oneXInEachDirectionShouldSumQualities" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0.008"/>
  <testcase name="TakeHighestQualityInEachDirection" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0"/>
  <testcase name="multipleXWithMultipleStartsGetsBonus" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0.001"/>
  <testcase name="oneXReverseCoverageShouldJustUseThatRead" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0"/>
  <testcase name="readsThatDontMatchWindowAreExcluded" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0.001"/>
  <testcase name="multipleXWithSameStartShouldNotGetBonus" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0.008"/>
  <testcase name="gapInConsensusExpandsWindow" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0.002"/>
  <testcase name="multipleReverseXWithSameStartShouldNotGetBonus" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0.008"/>
  <testcase name="multipleXInBothDirectionsOnlyGetsOneBonus" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0.001"/>
  <testcase name="oneXForwardCoverageShouldJustUseThatRead" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0"/>
  <testcase name="consensusQualityShouldNotExceed90" classname="org.jcvi.jillion.assembly.consed.ace.TestConsedConsensusQualityComputer" time="0.001"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="differentPhdNameShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="differentTraceNameShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="nullTraceNameShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0.001"/>
  <testcase name="differentDateShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="nullDateShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="nullPhdNameShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultPhdInfo" time="0"/>
  <testcase name="differentClassNotEquals" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0.001"/>
  <testcase name="testToString" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0"/>
  <testcase name="differentOffsetShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0"/>
  <testcase name="nullDirectionShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0"/>
  <testcase name="differentComlimentShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestAssembledFrom" time="0"/>
  <testcase name="assertDefaultPhdInfosCorrect" classname="org.jcvi.jillion.assembly.consed.ace.TestAceParserPhdInfo" time="0.002"/>
  <testcase name="tryingToParseNonAceFileShouldThrowIOException" classname="org.jcvi.jillion.assembly.consed.ace.TestParseInvalidAceNotAnAceFile" time="0.001"/>
  <testcase name="skipReadsShouldAlsoSkipTheirBases" classname="org.jcvi.jillion.assembly.consed.ace.TestSkippingReadsDoesntSendBasecallsToConsensusInstead" time="0.038"/>
  <testcase name="callingBuildTwiceOnPopulatedContigShouldThrowIllegalStateException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceContig" time="0"/>
  <testcase name="callingBuildTwiceOnEmptyContigShouldThrowIllegalStateException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceContig" time="0.001"/>
  <testcase name="noPlacedReadsShouldMakeEmptyContig" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceContig" time="0"/>
  <testcase name="readThatHasNegativeOffsetShouldGetTrimmedToOffsetZero" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceContig" time="0"/>
  <testcase name="readThatGoesOffTheReferenceShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderInvalidRead" time="0"/>
  <testcase name="recallConsensusDuringBuildWithoutQualityData" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderRecallConsensus" time="0.001"/>
  <testcase name="recallShouldSkip0xRegion" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderRecallConsensus" time="0"/>
  <testcase name="recallingConsensusNowWithoutSettingConsensusCallerShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderRecallConsensus" time="0"/>
  <testcase name="recallAmiguiousConsensusDuringBuildWithoutQualityData" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderRecallConsensus" time="0.001"/>
  <testcase name="recallConsensusUsingActualQualityData" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderRecallConsensus" time="0"/>
  <testcase name="recallAmiguiousConsensusNowWithoutQualityData" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderRecallConsensus" time="0"/>
  <testcase name="recallConsensusNowWithoutQualityData" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderRecallConsensus" time="0"/>
  <testcase name="useReadAlignCoordsOnly" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderVisitorReadVisitorUsesAlignCoords" time="0.001"/>
  <testcase name="replaceReverseSeqBaseWithNonGapShouldOnlyAffectSequence" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0.001"/>
  <testcase name="replaceReverseSeqFirstBaseWithGapShouldShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="replaceBaseWithNonGapShouldOnlyAffectSequence" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="trimSequenceThatLeavesEndingGapShouldHaveAdjustedValidRange" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="shiftReverseShouldOnlyAffectStartOffset" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="appendSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="insertReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="prependSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="deleteReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="insertReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="prependReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="appendReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="deleteSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0.001"/>
  <testcase name="trimSequenceThatLeavesStartingGapShouldHaveAdjustedValidRange" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="insertGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="replaceBaseWithGapShouldOnlyShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="shiftShouldOnlyAffectStartOffset" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="trimSequenceShouldAffectValidRangeAndUngappedFullLengthAndStartOffset" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0.001"/>
  <testcase name="prependReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="appendGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="noChanges" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="prependGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0.001"/>
  <testcase name="insertSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="replaceReverseSeqBaseWithGapShouldShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="appendReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0.001"/>
  <testcase name="trimReverseSequenceShouldAffectValidRangeAndUngappedFullLengthAndStartOffset" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="replaceFirstBaseWithGapShouldOnlyShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceAssembledReadBuilder" time="0"/>
  <testcase name="shouldRollOverBackToPreviousReadsThatStillCoverIfLastReadInSliceMismatches" classname="org.jcvi.jillion.assembly.consed.ace.TestBaseSegmentUtil" time="0.014"/>
  <testcase name="firstReadCoversConsensusExactlyBestSegmentShouldOnlyHaveFirstRead" classname="org.jcvi.jillion.assembly.consed.ace.TestBaseSegmentUtil" time="0"/>
  <testcase name="oneReadCoversConsensusExactly" classname="org.jcvi.jillion.assembly.consed.ace.TestBaseSegmentUtil" time="0"/>
  <testcase name="twoReadsSpanConsensusExactlyShouldHave2BestSegments" classname="org.jcvi.jillion.assembly.consed.ace.TestBaseSegmentUtil" time="0"/>
  <testcase name="noReadsMatchConsensusShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestBaseSegmentUtil" time="0.001"/>
  <testcase name="whenReadMismatchesShouldMoveToNextRead" classname="org.jcvi.jillion.assembly.consed.ace.TestBaseSegmentUtil" time="0"/>
  <testcase name="sameValuesIsEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0"/>
  <testcase name="nullNameShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0.001"/>
  <testcase name="sameRefIsEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0"/>
  <testcase name="differentClassNotEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0"/>
  <testcase name="differentRangeIsNotEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0"/>
  <testcase name="differentNameIsNotEqual" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0"/>
  <testcase name="nullRangeShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceBestSegment" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0.002"/>
  <testcase name="getEnd" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0"/>
  <testcase name="getSequence" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0"/>
  <testcase name="getId" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0"/>
  <testcase name="getSequenceDirection" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0"/>
  <testcase name="getLength" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0"/>
  <testcase name="convertReferenceIndexToValidRangeIndex" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0"/>
  <testcase name="convertValidRangeIndexToReferenceIndex" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0.001"/>
  <testcase name="getReadInfo" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0"/>
  <testcase name="getStart" classname="org.jcvi.jillion.assembly.consed.ace.TestAcePlacedReadAdapter" time="0"/>
  <testcase name="callingHasNextOnFinishedIteratorAfterDataStoreClosedShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.381"/>
  <testcase name="callingHasNextOnIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.231"/>
  <testcase name="callingNextOnFinishedIdIteratorAfterDataStoreClosedShouldThrowNoSuchElementException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.189"/>
  <testcase name="callingNextOnFinishedIteratorAfterDataStoreClosedShouldThrowNoSuchElementException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.162"/>
  <testcase name="callingNextOnIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.161"/>
  <testcase name="callingHasNextOnFinishedIdIteratorAfterDataStoreClosedShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.142"/>
  <testcase name="callingHasNextOnIdIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.142"/>
  <testcase name="callingNextOnIdIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.153"/>
  <testcase name="readOrderIsTheOrderInTheAceFile" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStoreStreamingIterators" time="0.154"/>
  <testcase name="callingHasNextOnFinishedIteratorAfterDataStoreClosedShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.188"/>
  <testcase name="callingHasNextOnIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.048"/>
  <testcase name="callingNextOnFinishedIdIteratorAfterDataStoreClosedShouldThrowNoSuchElementException" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.017"/>
  <testcase name="callingNextOnFinishedIteratorAfterDataStoreClosedShouldThrowNoSuchElementException" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.223"/>
  <testcase name="callingNextOnIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.041"/>
  <testcase name="callingHasNextOnFinishedIdIteratorAfterDataStoreClosedShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.029"/>
  <testcase name="callingHasNextOnIdIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.038"/>
  <testcase name="callingNextOnIdIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.036"/>
  <testcase name="readOrderIsTheOrderInTheAceFile" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceDataStoreStreamingIterators" time="0.061"/>
  <testcase name="callingHasNextOnFinishedIteratorAfterDataStoreClosedShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.14"/>
  <testcase name="callingHasNextOnIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.022"/>
  <testcase name="callingNextOnFinishedIdIteratorAfterDataStoreClosedShouldThrowNoSuchElementException" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.046"/>
  <testcase name="callingNextOnFinishedIteratorAfterDataStoreClosedShouldThrowNoSuchElementException" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.165"/>
  <testcase name="callingNextOnIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.023"/>
  <testcase name="callingHasNextOnFinishedIdIteratorAfterDataStoreClosedShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.042"/>
  <testcase name="callingHasNextOnIdIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.006"/>
  <testcase name="callingNextOnIdIteratorAfterDataStoreClosedShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.011"/>
  <testcase name="readOrderIsTheOrderInTheAceFile" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStoreStreamingIterators" time="0.053"/>
  <testcase name="stopParsingAtFinalContigShouldSkipTags" classname="org.jcvi.jillion.assembly.consed.ace.TestAceFileParserStopParsingMiddleContig" time="0.046"/>
  <testcase name="topParsingAfterFirstContig" classname="org.jcvi.jillion.assembly.consed.ace.TestAceFileParserStopParsingMiddleContig" time="0.016"/>
  <testcase name="writeAndReParse" classname="org.jcvi.jillion.assembly.consed.ace.TestAceFileUtil_writingAceContigs" time="0.574"/>
  <testcase name="convertCtg2AceWithComputedConsensusQualities" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileWriter" time="1.067"/>
  <testcase name="callingClose2xShouldIgnore2ndCall" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileWriter" time="0.422"/>
  <testcase name="convertCtg2Ace" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileWriter" time="0.41"/>
  <testcase name="rewritingAceShouldBeSimilar" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileWriter" time="0.042"/>
  <testcase name="convertCtg2AceWithBaseSegments" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileWriter" time="0.288"/>
  <testcase name="reverseRead" classname="org.jcvi.jillion.assembly.consed.ace.TestHighLowAceContigPhdDatastore" time="0.008"/>
  <testcase name="forwardRead" classname="org.jcvi.jillion.assembly.consed.ace.TestHighLowAceContigPhdDatastore" time="0.008"/>
  <testcase name="reAbacus" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAcePlacedReadReAbacus" time="0"/>
  <testcase name="reAbacusDifferentNonGapBasesShouldThrowException" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAcePlacedReadReAbacus" time="0"/>
  <testcase name="confirmInitialValues" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAcePlacedReadReAbacus" time="0"/>
  <testcase name="shiftBases" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAcePlacedReadReAbacus" time="0"/>
  <testcase name="abacus" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceContigBuilderReAbacus" time="0.001"/>
  <testcase name="abacusAndShiftDownstreamReads" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceContigBuilderReAbacus" time="0.001"/>
  <testcase name="skipSelectedContig" classname="org.jcvi.jillion.assembly.consed.ace.TestFilteredDefaultAceFileDataStore" time="0.297"/>
  <testcase name="skipSelectedContig" classname="org.jcvi.jillion.assembly.consed.ace.TestFilteredIndexedAceFileDataStore" time="0.296"/>
  <testcase name="skipSelectedContig" classname="org.jcvi.jillion.assembly.consed.ace.TestFilteredLargeIndexedAceFileDataStore" time="0.354"/>
  <testcase name="basecallInReadContainDashInsteadOfStar" classname="org.jcvi.jillion.assembly.consed.ace.TestAceFileParserWithInvalidGapChar" time="0.003"/>
  <testcase name="consensusTags" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromDefaultAceFileDataStore" time="0.01"/>
  <testcase name="readTag" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromDefaultAceFileDataStore" time="0.007"/>
  <testcase name="wholeAssemblyTag" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromDefaultAceFileDataStore" time="0.008"/>
  <testcase name="consensusTags" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromIndexedAceFileDataStore" time="0.002"/>
  <testcase name="readTag" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromIndexedAceFileDataStore" time="0.003"/>
  <testcase name="wholeAssemblyTag" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromIndexedAceFileDataStore" time="0.001"/>
  <testcase name="consensusTags" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromLargeAceFileDataStore" time="0.004"/>
  <testcase name="readTag" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromLargeAceFileDataStore" time="0.001"/>
  <testcase name="wholeAssemblyTag" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromLargeAceFileDataStore" time="0"/>
  <testcase name="consensusTags[0]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0"/>
  <testcase name="readTag[0]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0"/>
  <testcase name="wholeAssemblyTag[0]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0"/>
  <testcase name="consensusTags[1]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0"/>
  <testcase name="readTag[1]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0.001"/>
  <testcase name="wholeAssemblyTag[1]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0"/>
  <testcase name="consensusTags[2]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0.001"/>
  <testcase name="readTag[2]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0.001"/>
  <testcase name="wholeAssemblyTag[2]" classname="org.jcvi.jillion.assembly.consed.ace.AceTagsFromAceFileDataStoreConsensusTagNoTimeInfo" time="0.001"/>
  <testcase name="containsIdNotInDataStoreShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0"/>
  <testcase name="numberOfContigs" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0"/>
  <testcase name="sizeVsIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0"/>
  <testcase name="contains" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0.025"/>
  <testcase name="numberOfTotalReads" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0.025"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0"/>
  <testcase name="getVsIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestDefaultAceFileDataStore2" time="0.005"/>
  <testcase name="containsIdNotInDataStoreShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0"/>
  <testcase name="numberOfContigs" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0"/>
  <testcase name="sizeVsIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0.132"/>
  <testcase name="contains" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0"/>
  <testcase name="get" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0.162"/>
  <testcase name="numberOfTotalReads" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0.145"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0"/>
  <testcase name="getVsIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestIndexedAceFileDataStore2" time="0.244"/>
  <testcase name="containsIdNotInDataStoreShouldReturnFalse" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0.035"/>
  <testcase name="numberOfContigs" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0.065"/>
  <testcase name="sizeVsIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0.123"/>
  <testcase name="contains" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0.17"/>
  <testcase name="get" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0.22"/>
  <testcase name="numberOfTotalReads" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0.131"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0.014"/>
  <testcase name="getVsIterator" classname="org.jcvi.jillion.assembly.consed.ace.TestLargeAceFileDataStore2" time="0.277"/>
  <testcase name="testSingleAceVisitor" classname="org.jcvi.jillion.assembly.consed.ace.TestAceTestUtil" time="0.105"/>
  <testcase name="delegatesVisitConsensusQualities" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigVisitorAdapter" time="0.001"/>
  <testcase name="delegatesHalted" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigVisitorAdapter" time="0"/>
  <testcase name="delegatesVisitBasesLine" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigVisitorAdapter" time="0"/>
  <testcase name="delegatesVisitAlignedReadInfo" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigVisitorAdapter" time="0.002"/>
  <testcase name="delegatesVisitBaseSegment" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigVisitorAdapter" time="0"/>
  <testcase name="delegateVisitRead" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigVisitorAdapter" time="0.001"/>
  <testcase name="delegatesVisitEnd" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigVisitorAdapter" time="0"/>
  <testcase name="removeSingleReadFromContig" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigVisitorAdapterRemoveReadsFromContig" time="0.002"/>
  <testcase name="negativeAlignRangeShouldStillGetVisited" classname="org.jcvi.jillion.assembly.consed.ace.TestAceFileParserWithNegativeReadAlignValues" time="0.001"/>
  <testcase name="oneRead" classname="org.jcvi.jillion.assembly.consed.ace.TestDenovoAceContigBuilder" time="0"/>
  <testcase name="splitDenovoContig" classname="org.jcvi.jillion.assembly.consed.ace.TestDenovoAceContigBuilder" time="0.001"/>
  <testcase name="twoReadsSameLocation" classname="org.jcvi.jillion.assembly.consed.ace.TestDenovoAceContigBuilder" time="0.001"/>
  <testcase name="zeroCoverageAtBeginningShouldShiftAllReadsSoFirstReadStartsAtNewZero" classname="org.jcvi.jillion.assembly.consed.ace.TestDenovoAceContigBuilder" time="0"/>
  <testcase name="twoReadsTiledAcross" classname="org.jcvi.jillion.assembly.consed.ace.TestDenovoAceContigBuilder" time="0.001"/>
  <testcase name="threeReadsTiledAcross" classname="org.jcvi.jillion.assembly.consed.ace.TestDenovoAceContigBuilder" time="0"/>
  <testcase name="zeroCoverageRegionInMiddle" classname="org.jcvi.jillion.assembly.consed.ace.TestDenovoAceContigBuilder" time="0.001"/>
  <testcase name="abuttingReadsWithNoOverlapButAllBasesCovered" classname="org.jcvi.jillion.assembly.consed.ace.TestDenovoAceContigBuilder" time="0"/>
  <testcase name="insertGapIntoReadExtendingContig" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderInsertGapsIntoRead" time="0.001"/>
  <testcase name="insertMultipleGapsIntoReadExtendingContig" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderInsertGapsIntoRead" time="0.001"/>
  <testcase name="insertGapIntoRead" classname="org.jcvi.jillion.assembly.consed.ace.TestAceContigBuilderInsertGapsIntoRead" time="0"/>
  <testcase name="differentCommentShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="nullIdShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="differentIdShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="differentTypeShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0.001"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="notEqualsDifferentObj" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="differentRangeShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="noCommentShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="sameRefShouldBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="noComment" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="withComment" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="nullRangeShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElement" time="0"/>
  <testcase name="nullContigShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElementFactoryMethod" time="0.002"/>
  <testcase name="comment" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElementFactoryMethod" time="0"/>
  <testcase name="noComment" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElementFactoryMethod" time="0"/>
  <testcase name="nullRangeShouldthrowNPE" classname="org.jcvi.jillion.assembly.consed.nav.TestConsensusNavigationElementFactoryMethod" time="0.001"/>
  <testcase name="differentCommentShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="nullIdShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="differentIdShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="differentTypeShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="notEqualsDifferentObj" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="differentRangeShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="noCommentShouldNotBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0.001"/>
  <testcase name="sameRefShouldBeEqual" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="noComment" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="withComment" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="nullRangeShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.nav.TestReadNavigationElement" time="0"/>
  <testcase name="noElementsToWriteShouldOnlyWriteTitle" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationWriter" time="0.001"/>
  <testcase name="oneConsensusElement" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationWriter" time="0"/>
  <testcase name="partialWriterShouldNotWriteTitle" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationWriter" time="0"/>
  <testcase name="nullOutputStreamShouldThrowNPE" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationWriter" time="0"/>
  <testcase name="oneConsensusElementWithoutComment" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationWriter" time="0"/>
  <testcase name="oneReadElement" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationWriter" time="0.001"/>
  <testcase name="multipleElements" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationWriter" time="0"/>
  <testcase name="oneReadElementWithNoComment" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationWriter" time="0"/>
  <testcase name="parseNavFile" classname="org.jcvi.jillion.assembly.consed.nav.TestConsedNavigationParser" time="0.01"/>
  <testcase name="fastaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.542"/>
  <testcase name="sffFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0"/>
  <testcase name="scfShouldBeSangerFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.003"/>
  <testcase name="abiShouldBeSangerFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.001"/>
  <testcase name="noExtensionSangerFileShouldBeSangerFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.005"/>
  <testcase name="noExtensionFastaFileShouldBeFastaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.002"/>
  <testcase name="fastqShouldBeIlluminaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.003"/>
  <testcase name="s_1_sequenceDotTxtShouldBeIlluminaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.001"/>
  <testcase name="s_5_1_sequenceDotTxtShouldBeIlluminaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0"/>
  <testcase name="s_2_sequenceDotTxtShouldBeIlluminaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0"/>
  <testcase name="fullPaths_2_sequenceDotTxtShouldBeIllumina" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.001"/>
  <testcase name="contigsFileShouldBeFastaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.005"/>
  <testcase name="ztrShouldBeSangerFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.001"/>
  <testcase name="fnaShouldBeFastaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0.002"/>
  <testcase name="faShouldBeFastaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0"/>
  <testcase name="seqShouldBeFastaFile" classname="org.jcvi.jillion.assembly.clc.cas.TestReadFileType" time="0"/>
  <testcase name="numberOfBytesRequired" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0.001"/>
  <testcase name="readCasUnsignedByteShortValue" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0"/>
  <testcase name="numberOfBytesRequiredLessThanZeroShouldthrowException" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0"/>
  <testcase name="parseCasByteLengthString" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0"/>
  <testcase name="parseCasShortLengthString" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0"/>
  <testcase name="readCasUnsignedLongBigIntValue" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0.003"/>
  <testcase name="parseByteCountFourBytes" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0.001"/>
  <testcase name="parseByteCountOneByte" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0"/>
  <testcase name="parseByteCountTwoBytes" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0"/>
  <testcase name="readCasUnsignedLongLongValue" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0"/>
  <testcase name="readCasUnsignedByteByteValue" classname="org.jcvi.jillion.assembly.clc.cas.TestCasUtil" time="0"/>
  <testcase name="twoReadsOneHasInsertShouldAddOneGap" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0.012"/>
  <testcase name="dataStoreExceptionShouldThrowIllegalStateException" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0.001"/>
  <testcase name="twoReadsBothHaveSameInsertShouldAddOneGap" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0"/>
  <testcase name="oneReadOneInsertShouldAddOneGap" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0.004"/>
  <testcase name="twoReadsBothHaveDifferentLengthInsertAtSameLocationShouldAddLongestGap" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0.001"/>
  <testcase name="twoReadsBothHavedifferentInsertShouldAddTwoGaps" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0.001"/>
  <testcase name="twoReadsNoInsertsShouldNotAddAnyGaps" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0.001"/>
  <testcase name="oneReadNoInsertsShouldNotAddAnyGaps" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0.001"/>
  <testcase name="ifLastAlignmentIsInsertShouldBeIgnored" classname="org.jcvi.jillion.assembly.clc.cas.TestCasGappedReferenceDataStoreBuilderVisitor" time="0"/>
  <testcase name="readsOnlyMappedToOneOfTheReferencesShouldUseUnchangedReferenceSequenceForOther" classname="org.jcvi.jillion.assembly.clc.cas.TestGappedReferenceDataStoreBuilderNoReadsMaptoReference" time="0.006"/>
  <testcase name="noReadsMappedShouldUseUnchangedReferenceSequence" classname="org.jcvi.jillion.assembly.clc.cas.TestGappedReferenceDataStoreBuilderNoReadsMaptoReference" time="0"/>
  <testcase name="filterFirstRef" classname="org.jcvi.jillion.assembly.clc.cas.TestFilteredCasGappedReferenceDataStoreBuilderVisitor" time="0.017"/>
  <testcase name="filterEverything" classname="org.jcvi.jillion.assembly.clc.cas.TestFilteredCasGappedReferenceDataStoreBuilderVisitor" time="0.001"/>
  <testcase name="unfiltered" classname="org.jcvi.jillion.assembly.clc.cas.TestFilteredCasGappedReferenceDataStoreBuilderVisitor" time="0.001"/>
  <testcase name="filterSecondRef" classname="org.jcvi.jillion.assembly.clc.cas.TestFilteredCasGappedReferenceDataStoreBuilderVisitor" time="0.002"/>
  <testcase name="getIdDelegatesToPhd" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0.001"/>
  <testcase name="differentPhdShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="notEqualToDifferentType" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="getPhd" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="nullPhdShouldThrowNPE" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="nullPhdInfoShouldThrowNPE" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="getNucleotideSequenceDelegatesToPhd" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="testToStringPrintsId" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="getPhdInfo" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="sameRefShouldBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="differentPhdInfoShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0"/>
  <testcase name="getQualitySequenceDelegatesToPhd" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestPhdReadRecord" time="0.001"/>
  <testcase name="oneRead" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastaConsedPhdAdaptedIterator" time="0"/>
  <testcase name="removeShouldThrowException" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastaConsedPhdAdaptedIterator" time="0.001"/>
  <testcase name="close" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastaConsedPhdAdaptedIterator" time="0"/>
  <testcase name="noReadsShouldMakeEmptyIterator" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastaConsedPhdAdaptedIterator" time="0"/>
  <testcase name="twoReads" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastaConsedPhdAdaptedIterator" time="0"/>
  <testcase name="oneRead" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastqConsedPhdAdaptedIterator" time="0"/>
  <testcase name="removeShouldThrowException" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastqConsedPhdAdaptedIterator" time="0"/>
  <testcase name="close" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastqConsedPhdAdaptedIterator" time="0"/>
  <testcase name="noReadsShouldMakeEmptyIterator" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastqConsedPhdAdaptedIterator" time="0"/>
  <testcase name="twoReads" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFastqConsedPhdAdaptedIterator" time="0"/>
  <testcase name="oneRead" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFlowgramConsedPhdAdaptedIterator" time="0.001"/>
  <testcase name="removeShouldThrowException" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFlowgramConsedPhdAdaptedIterator" time="0"/>
  <testcase name="close" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFlowgramConsedPhdAdaptedIterator" time="0"/>
  <testcase name="noReadsShouldMakeEmptyIterator" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFlowgramConsedPhdAdaptedIterator" time="0"/>
  <testcase name="twoReads" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestFlowgramConsedPhdAdaptedIterator" time="0"/>
  <testcase name="parseCasWithoutValidating" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestReferenceAssembleLongCas2Consed" time="1.753"/>
  <testcase name="parseCasAndValidate" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestReferenceAssembleLongCas2Consed" time="1.158"/>
  <testcase name="parseCasWithoutValidating" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestClcMapperCas2Consed" time="1.417"/>
  <testcase name="parseCasAndValidate" classname="org.jcvi.jillion.assembly.clc.cas.consed.TestClcMapperCas2Consed" time="1.388"/>
  <testcase name="transformCas" classname="org.jcvi.jillion.assembly.clc.cas.transform.TestReferenceAssembleLongTransformationService" time="0.284"/>
  <testcase name="transformCas" classname="org.jcvi.jillion.assembly.clc.cas.transform.TestClcMapperTransformationService" time="0.246"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="nullTypeShouldThrowNPE" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="differentTypeShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="shouldNotBeEqualToNull" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="negativeLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="sameRefShouldBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="differentClassShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="differentLengthShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignmentRegion" time="0"/>
  <testcase name="notEqualToDifferentClass" classname="org.jcvi.jillion.assembly.clc.cas.TestPhaseChangeCasAlignmentRegion" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestPhaseChangeCasAlignmentRegion" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.assembly.clc.cas.TestPhaseChangeCasAlignmentRegion" time="0"/>
  <testcase name="getType" classname="org.jcvi.jillion.assembly.clc.cas.TestPhaseChangeCasAlignmentRegion" time="0.001"/>
  <testcase name="sameReferenceShouldBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestPhaseChangeCasAlignmentRegion" time="0"/>
  <testcase name="differentValueShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestPhaseChangeCasAlignmentRegion" time="0"/>
  <testcase name="getPhaseChange" classname="org.jcvi.jillion.assembly.clc.cas.TestPhaseChangeCasAlignmentRegion" time="0"/>
  <testcase name="readReversed" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="differentNumberOfRegionsShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="getStartOfMatch" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="differentReadDirectionShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="copy" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="differentStartOfMatchShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="differentContigSequenceIdShouldNotBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="regions" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="sameRefShouldBeEqual" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="getContigSequenceId" classname="org.jcvi.jillion.assembly.clc.cas.TestDefaultCasAlignment" time="0"/>
  <testcase name="valueOf" classname="org.jcvi.jillion.assembly.clc.cas.TestCasAlignmentType" time="0"/>
  <testcase name="delegateMetaData" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateAssemblyProgramInfo" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="getDelegate" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateRefFileInfo" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="adaptMetaData" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateEnd" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateMatches" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0.001"/>
  <testcase name="delegateReadFileInfo" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateRefDescription" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateHalted" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateContigPair" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0.002"/>
  <testcase name="adaptAssemblyProgramInfo" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="nullDelegateThrowsNPE" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateScoringScheme" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0.001"/>
  <testcase name="delegateNumberOfReferenceFiles" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="delegateNumberOfReadFiles" classname="org.jcvi.jillion.assembly.clc.cas.TestCasFileVisitorAdapter" time="0"/>
  <testcase name="getDelegate" classname="org.jcvi.jillion.assembly.clc.cas.TestCasMatchVisitorAdapter" time="0"/>
  <testcase name="adaptMatch" classname="org.jcvi.jillion.assembly.clc.cas.TestCasMatchVisitorAdapter" time="0"/>
  <testcase name="delegateEnd" classname="org.jcvi.jillion.assembly.clc.cas.TestCasMatchVisitorAdapter" time="0.002"/>
  <testcase name="delegateMatch" classname="org.jcvi.jillion.assembly.clc.cas.TestCasMatchVisitorAdapter" time="0"/>
  <testcase name="delegateHalted" classname="org.jcvi.jillion.assembly.clc.cas.TestCasMatchVisitorAdapter" time="0"/>
  <testcase name="nullDelegateThrowsNPE" classname="org.jcvi.jillion.assembly.clc.cas.TestCasMatchVisitorAdapter" time="0"/>
  <testcase name="differentStdDevShouldNotBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0.001"/>
  <testcase name="differentMeanShouldNotBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="notEqualsNull" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="distanceWhere3StdDevsIsZero" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="buildDistanceIntMaxDoesntOverflow" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="buildDistance" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="notEqualsDifferentClass" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0.001"/>
  <testcase name="transformCeleraAssemblerDistanceChangesStdIfMeanIsLessthan3StdDevs" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="transformCeleraAssemblerDistanceDoNotChangeIfMeanIsMorethan3StdDevs" classname="org.jcvi.jillion.assembly.ca.frg.TestDistance" time="0"/>
  <testcase name="parseChar" classname="org.jcvi.jillion.assembly.ca.frg.TestMateOrientation" time="0"/>
  <testcase name="parseString" classname="org.jcvi.jillion.assembly.ca.frg.TestMateOrientation" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0.001"/>
  <testcase name="nullIdShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0"/>
  <testcase name="onlyIdShouldBeUsedToConsiderEquality" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0"/>
  <testcase name="notEqualtoDifferentClass" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0"/>
  <testcase name="nullMateOrientationShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0.001"/>
  <testcase name="notEqualtoNull" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0"/>
  <testcase name="nullDistanceShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0"/>
  <testcase name="sameRefShouldBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultLibrary" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0.002"/>
  <testcase name="notEqualToDifferentClass" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0.001"/>
  <testcase name="nullIdShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="differentClearRangeShouldStillBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="differentQualitiesShouldStillBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="differentIdShouldNotBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="differentCommentStillBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="differentBasesShouldStillBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="differentValildRangeShouldStillBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="traceConstructor" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="differentLibraryStillBeEqual" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragment" time="0"/>
  <testcase name="constructor" classname="org.jcvi.jillion.assembly.ca.frg.TestFrg2Parser" time="0.002"/>
  <testcase name="parseExampleFile" classname="org.jcvi.jillion.assembly.ca.frg.TestFrg2Parser" time="0.012"/>
  <testcase name="assertFragEndingIn61isCorrect" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragmentDataStore" time="0.005"/>
  <testcase name="contains" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragmentDataStore" time="0.002"/>
  <testcase name="containsLibrary" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragmentDataStore" time="0.002"/>
  <testcase name="getMateOf" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragmentDataStore" time="0.003"/>
  <testcase name="hasMate" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragmentDataStore" time="0.001"/>
  <testcase name="testIdIterator" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragmentDataStore" time="0.005"/>
  <testcase name="assertFragEndingIn78IsCorrect" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragmentDataStore" time="0"/>
  <testcase name="testIterator" classname="org.jcvi.jillion.assembly.ca.frg.TestDefaultFragmentDataStore" time="0.001"/>
  <testcase name="assertFragEndingIn61isCorrect" classname="org.jcvi.jillion.assembly.ca.frg.TestIndexedFragmentDataStore" time="0.01"/>
  <testcase name="contains" classname="org.jcvi.jillion.assembly.ca.frg.TestIndexedFragmentDataStore" time="0.003"/>
  <testcase name="containsLibrary" classname="org.jcvi.jillion.assembly.ca.frg.TestIndexedFragmentDataStore" time="0.001"/>
  <testcase name="getMateOf" classname="org.jcvi.jillion.assembly.ca.frg.TestIndexedFragmentDataStore" time="0.004"/>
  <testcase name="hasMate" classname="org.jcvi.jillion.assembly.ca.frg.TestIndexedFragmentDataStore" time="0.002"/>
  <testcase name="testIdIterator" classname="org.jcvi.jillion.assembly.ca.frg.TestIndexedFragmentDataStore" time="0.004"/>
  <testcase name="assertFragEndingIn78IsCorrect" classname="org.jcvi.jillion.assembly.ca.frg.TestIndexedFragmentDataStore" time="0.001"/>
  <testcase name="testIterator" classname="org.jcvi.jillion.assembly.ca.frg.TestIndexedFragmentDataStore" time="0.011"/>
  <testcase name="computeGappedSequenceWith1Gap" classname="org.jcvi.jillion.assembly.ca.asm.TestAsmUtil" time="0"/>
  <testcase name="computeGappedSequenceWithNoGaps" classname="org.jcvi.jillion.assembly.ca.asm.TestAsmUtil" time="0"/>
  <testcase name="computeGappedSequenceWith2Gaps" classname="org.jcvi.jillion.assembly.ca.asm.TestAsmUtil" time="0"/>
  <testcase name="computeGappedSequenceWith2ConsecutiveGaps" classname="org.jcvi.jillion.assembly.ca.asm.TestAsmUtil" time="0"/>
  <testcase name="replaceReverseSeqBaseWithNonGapShouldOnlyAffectSequence" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0.001"/>
  <testcase name="replaceReverseSeqFirstBaseWithGapShouldShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="replaceBaseWithNonGapShouldOnlyAffectSequence" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="trimSequenceThatLeavesEndingGapShouldHaveAdjustedValidRange" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="shiftReverseShouldOnlyAffectStartOffset" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="appendSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="insertReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="prependSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="deleteReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0.001"/>
  <testcase name="insertReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="prependReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="appendReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="deleteSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="trimSequenceThatLeavesStartingGapShouldHaveAdjustedValidRange" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="insertGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="replaceBaseWithGapShouldOnlyShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="shiftShouldOnlyAffectStartOffset" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0.001"/>
  <testcase name="trimSequenceShouldAffectValidRangeAndUngappedFullLengthAndStartOffset" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="prependReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="appendGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="noChanges" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0.001"/>
  <testcase name="prependGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="insertSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="replaceReverseSeqBaseWithGapShouldShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="appendReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="trimReverseSequenceShouldAffectValidRangeAndUngappedFullLengthAndStartOffset" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="replaceFirstBaseWithGapShouldOnlyShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmAssembledReadBuilder" time="0"/>
  <testcase name="oneRead" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmUnitig" time="0.005"/>
  <testcase name="twoReads" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmUnitig" time="0.001"/>
  <testcase name="noReads" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmUnitig" time="0"/>
  <testcase name="parseFluAssembly" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultAsmFileContigDataStore" time="0.092"/>
  <testcase name="parseFluAssembly" classname="org.jcvi.jillion.assembly.ca.asm.TestIndexedAsmFileContigDataStore" time="0.054"/>
  <testcase name="nullNucleotideDataStoreShouldThrowNPE" classname="org.jcvi.jillion.assembly.ca.asm.TestAsmFileContigDataStoreBuilder" time="0.001"/>
  <testcase name="nullFrgDataStoreShouldThrowNPE" classname="org.jcvi.jillion.assembly.ca.asm.TestAsmFileContigDataStoreBuilder" time="0"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.assembly.ca.asm.TestAsmFileContigDataStoreBuilder" time="0.002"/>
  <testcase name="parseFluAssembly" classname="org.jcvi.jillion.assembly.ca.asm.TestDefaultUnitigDataStore" time="0.051"/>
  <testcase name="parseFluAssembly" classname="org.jcvi.jillion.assembly.ca.asm.TestIndexedUnitigDataStore" time="0.057"/>
  <testcase name="parseEditDateWithNullShouldThrowNPE" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmUtil" time="0.001"/>
  <testcase name="formatEditDateWithNullShouldThrowNPE" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmUtil" time="0.002"/>
  <testcase name="parseEditDateWithExtraWhitespace" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmUtil" time="0"/>
  <testcase name="parseEditDate" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmUtil" time="0"/>
  <testcase name="formatEditDate" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmUtil" time="0"/>
  <testcase name="replaceReverseSeqBaseWithNonGapShouldOnlyAffectSequence" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0.003"/>
  <testcase name="replaceReverseSeqFirstBaseWithGapShouldShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="replaceBaseWithNonGapShouldOnlyAffectSequence" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="trimSequenceThatLeavesEndingGapShouldHaveAdjustedValidRange" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="shiftReverseShouldOnlyAffectStartOffset" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="appendSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0.001"/>
  <testcase name="insertReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="prependSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="deleteReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="insertReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="prependReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="appendReverseSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="deleteSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="trimSequenceThatLeavesStartingGapShouldHaveAdjustedValidRange" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="insertGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="replaceBaseWithGapShouldOnlyShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="shiftShouldOnlyAffectStartOffset" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0.001"/>
  <testcase name="trimSequenceShouldAffectValidRangeAndUngappedFullLengthAndStartOffset" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="prependReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="appendGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="noChanges" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="prependGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="insertSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0.001"/>
  <testcase name="replaceReverseSeqBaseWithGapShouldShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="appendReverseGappedSequenceShouldAlsoUpdateClearRangeAndUngappedLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="trimReverseSequenceShouldAffectValidRangeAndUngappedFullLengthAndStartOffset" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0.001"/>
  <testcase name="replaceFirstBaseWithGapShouldOnlyShrinkClearRangeAndUngappedFullLength" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTigrAssemblerAssembledReadBuilder" time="0"/>
  <testcase name="writeNullOutputStreamShouldThrowNullPointerException" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTigrAssemblerWriter" time="0.012"/>
  <testcase name="writeNullDataStoreShouldThrowNullPointerException" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTigrAssemblerWriter" time="0.001"/>
  <testcase name="whenDataStoreThrowsExceptionShouldWrapInIOException" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTigrAssemblerWriter" time="0"/>
  <testcase name="rewrittenTasmShouldMatchOriginalByteForByte" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTigrAssemblerWriter" time="0.049"/>
  <testcase name="reverseReadShouldHaveSwappedSeqLeftandSeqRightAttributes" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTigrAssemblerPlacedReadAdapter" time="0"/>
  <testcase name="nullPlacedReadShouldThrowNullPointerException" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTigrAssemblerPlacedReadAdapter" time="0.001"/>
  <testcase name="adaptedReadShouldDelegateAllPlacedReadMethods" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTigrAssemblerPlacedReadAdapter" time="0"/>
  <testcase name="adaptPB2" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTigrAssemblerContigAdapterBuilderWithNoOptionalAttributes" time="0.011"/>
  <testcase name="numberOfContigs" classname="org.jcvi.jillion.assembly.tigr.tasm.TestAnnotationTasmParsing" time="0"/>
  <testcase name="correctContigIds" classname="org.jcvi.jillion.assembly.tigr.tasm.TestAnnotationTasmParsing" time="0"/>
  <testcase name="contigEndingIn927" classname="org.jcvi.jillion.assembly.tigr.tasm.TestAnnotationTasmParsing" time="0"/>
  <testcase name="numberOfRecords" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0"/>
  <testcase name="isClosed" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0"/>
  <testcase name="HA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0.002"/>
  <testcase name="MP" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0"/>
  <testcase name="NA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0.003"/>
  <testcase name="NP" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0.001"/>
  <testcase name="NS" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0"/>
  <testcase name="PA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0.002"/>
  <testcase name="PB1" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0.001"/>
  <testcase name="PB2" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0.002"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0.008"/>
  <testcase name="lastContig" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0.004"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.tigr.tasm.TestDefaultTasmDataStore" time="0"/>
  <testcase name="numberOfRecords" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.001"/>
  <testcase name="isClosed" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0"/>
  <testcase name="HA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.038"/>
  <testcase name="MP" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.021"/>
  <testcase name="NA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.028"/>
  <testcase name="NP" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.024"/>
  <testcase name="NS" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.011"/>
  <testcase name="PA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.027"/>
  <testcase name="PB1" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.028"/>
  <testcase name="PB2" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.036"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.129"/>
  <testcase name="lastContig" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0.002"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.tigr.tasm.TestIndexedTasmDataStore" time="0"/>
  <testcase name="numberOfRecords" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.028"/>
  <testcase name="isClosed" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0"/>
  <testcase name="HA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.055"/>
  <testcase name="MP" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.02"/>
  <testcase name="NA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.024"/>
  <testcase name="NP" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.016"/>
  <testcase name="NS" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.015"/>
  <testcase name="PA" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.016"/>
  <testcase name="PB1" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.021"/>
  <testcase name="PB2" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.019"/>
  <testcase name="iterator" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.112"/>
  <testcase name="lastContig" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.013"/>
  <testcase name="idIterator" classname="org.jcvi.jillion.assembly.tigr.tasm.TestLargeTasmDataStore" time="0.026"/>
  <testcase name="writeAnnotationTasms" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmWriterBuilderOutputStream" time="0.011"/>
  <testcase name="writtenTasmShouldMatchInputTasm" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmWriterBuilderOutputStream" time="0.094"/>
  <testcase name="writeAnnotationTasms" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmWriterBuilderFile" time="0.006"/>
  <testcase name="writtenTasmShouldMatchInputTasm" classname="org.jcvi.jillion.assembly.tigr.tasm.TestTasmWriterBuilderFile" time="0.106"/>
  <testcase name="notEqualToDifferentId" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="notEqualToDifferentRange" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="nullIdShouldThrowNPE" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="nullDirShouldThrowNPE" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="equalToSameValues" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="notEqualtoDifferentClass" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="equalToSameRef" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="fullConstructor" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="notEqualToDifferentDir" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="notEqualtoNull" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="constructorDefaultsToForwardDir" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="nullRangeShouldThrowNPE" classname="org.jcvi.jillion.assembly.TestDefaultPlacedContig" time="0"/>
  <testcase name="testInvalidContigRangeCoordinateConversionTest" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0.004"/>
  <testcase name="testGetPlacedContig" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0"/>
  <testcase name="shiftingContigsShouldAdjustCoordinatesToStartAtZero" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0.001"/>
  <testcase name="testMultipleForwardContigCoordinateConversionTest" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0.005"/>
  <testcase name="testGetPlacedContigs" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0"/>
  <testcase name="testInvalidContigDirectionCoordinateConversionTest" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0"/>
  <testcase name="testSingleForwardContigCoordinateConversionTest" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0"/>
  <testcase name="testUnkonwnContigCoordinateConversionTest" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0.001"/>
  <testcase name="testGetScaffoldLength" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0"/>
  <testcase name="testGetNumberOfContigs" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0"/>
  <testcase name="testMultipleReverseContigCoordinateConversionTest" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0"/>
  <testcase name="testSingleReverseContigCoordinateConversionTest" classname="org.jcvi.jillion.assembly.TestDefaultScaffold" time="0"/>
  <testcase name="parseInValidShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.sam.cigar.TestCigarOperation" time="0.001"/>
  <testcase name="parseValid" classname="org.jcvi.jillion.sam.cigar.TestCigarOperation" time="0"/>
  <testcase name="parseNullShouldThrowNPE" classname="org.jcvi.jillion.sam.cigar.TestCigarOperation" time="0"/>
  <testcase name="assertOrdinals" classname="org.jcvi.jillion.sam.cigar.TestCigarOperation" time="0"/>
  <testcase name="sameValuesAreEqual" classname="org.jcvi.jillion.sam.cigar.TestCigarElement" time="0.003"/>
  <testcase name="assertNotEqualtoDifferentClass" classname="org.jcvi.jillion.sam.cigar.TestCigarElement" time="0"/>
  <testcase name="sameRefIsEqual" classname="org.jcvi.jillion.sam.cigar.TestCigarElement" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.sam.cigar.TestCigarElement" time="0"/>
  <testcase name="differentOpIsNotEqual" classname="org.jcvi.jillion.sam.cigar.TestCigarElement" time="0"/>
  <testcase name="assertNotEqualtoNull" classname="org.jcvi.jillion.sam.cigar.TestCigarElement" time="0"/>
  <testcase name="differentLengthIsNotEqual" classname="org.jcvi.jillion.sam.cigar.TestCigarElement" time="0"/>
  <testcase name="asterikCigarStringShouldReturnNull" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0.002"/>
  <testcase name="emptyCigar" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="splicedAlignment" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0.004"/>
  <testcase name="sameValuesEqual" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="toGappedTrimmedSequenceSequenceTooShortShouldThrowException" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="validCigarSoftClipsAtEnds" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="validCigarSoftAndHardClipssAtEnds" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="diffValuesEqual" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="invalidCigarHardClipNotAtEdgeOfString" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="validCigarStrings" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0.001"/>
  <testcase name="invalidCigarSoftClipHasSomethingOtherThanHardClipBetweenItAndLeftEdge" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="sameRefEqual" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="invalidCigarSoftClipHasSomethingOtherThanHardClipBetweenItAndRightEdge" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="toGappedTrimmedSequenceNullSequenceShouldThrowNPE" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="toGappedTrimmedSequence" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0.001"/>
  <testcase name="withWhiteSpace" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="toGappedTrimmedSequenceSequenceHasGapsShouldThrowException" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="toGappedTrimmedSequenceSequenceTooLongShouldThrowException" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="validCigarHardClipsAtEnds" classname="org.jcvi.jillion.sam.cigar.TestCigar" time="0"/>
  <testcase name="nullCopyProgramShouldThrowNPE" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0.003"/>
  <testcase name="allFieldsSet" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="nullVersionShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0.001"/>
  <testcase name="nullPreviousProgShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="onlyIdSetEverythingElseIsNull" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="nullIdShouldThrowNPE" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="differentIdShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="differentNameShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="differentVersionShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="notEqualToOtherClass" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="differentCommandLineShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="nullCommandLineShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="differentDescriptionShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0.001"/>
  <testcase name="differentPreviousProgShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="nullDescriptionShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="changingIdToNullShouldThrowNPE" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="nullNameShouldNotBeEqual" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0.001"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.sam.header.TestSamProgram" time="0"/>
  <testcase name="nullPlatformIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentPlatformIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="notEqualToDifferentClass" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentLibraryIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0.001"/>
  <testcase name="nullSampleNameIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="nullRunDateIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="nullIdShouldThrowNPE" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="nullFlowOrderIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="settingIdToNullShouldThrowNPE" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentDescriptionIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="nullPlatformUnitIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="setIdOnlyOtherFieldsAreNull" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentIdIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="nullDescriptionIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="nullInsertSizeIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0.001"/>
  <testcase name="nullProgramsIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentSampleNameIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentProgramsIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentRunDateIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="nullLibraryIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentKeySequenceIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentSeqCenterIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentFlowOrderIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="differentPlatformUnitIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="nullKeySequenceIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0.003"/>
  <testcase name="differentInsertSizeIsNotEqual" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.sam.header.TestReadGroup" time="0.001"/>
  <testcase name="sameValuesAreEqual" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="parseInvalidVersionReturnsNull" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="differentMinorNotEqual" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="testToString" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="isBefore" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="notEqualTodifferentClass" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="parseInvalidVersionNoMinorShouldReturnsNull" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0.001"/>
  <testcase name="getters" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="differentMajorNotEqual" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="parseNullVersionShouldThrowNPE" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="parseInvalidVersionHasWhitespaceShouldReturnsNull" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="parseValidVersion" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="negativeMajorShouldThrowException" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="sameRefsAreEqual" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="negativeMinorShouldThrowException" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0.001"/>
  <testcase name="isAfter" classname="org.jcvi.jillion.sam.header.TestSamVersion" time="0"/>
  <testcase name="notEqualDifferentName" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="notEqualDifferentSpecies" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="negativeLengthShouldThrowException" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="notEqualDifferentGenomeAssemblyId" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0.007"/>
  <testcase name="equalSameValues" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0.001"/>
  <testcase name="zeroLengthShouldThrowException" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="notEqualDifferentMd5" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="notEqualDifferentUri" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="equalSameRef" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="nameCanNotBeNull" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="copyConstructorCanNotHaveNullArg" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="notEqualDifferentLength" classname="org.jcvi.jillion.sam.header.TestReferenceSequence" time="0"/>
  <testcase name="sameValuesAreEqual" classname="org.jcvi.jillion.sam.header.TestSamHeaderTagKey" time="0"/>
  <testcase name="stringCreationMethod" classname="org.jcvi.jillion.sam.header.TestSamHeaderTagKey" time="0"/>
  <testcase name="testToString" classname="org.jcvi.jillion.sam.header.TestSamHeaderTagKey" time="0"/>
  <testcase name="differentFirstCharValuesAreNotEqual" classname="org.jcvi.jillion.sam.header.TestSamHeaderTagKey" time="0"/>
  <testcase name="sameRefEquals" classname="org.jcvi.jillion.sam.header.TestSamHeaderTagKey" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.sam.header.TestSamHeaderTagKey" time="0"/>
  <testcase name="differentSecondCharValuesAreNotEqual" classname="org.jcvi.jillion.sam.header.TestSamHeaderTagKey" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.sam.header.TestSamHeaderTagKey" time="0"/>
  <testcase name="platformNotInHeaderShouldThrowException" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0.025"/>
  <testcase name="platformUnitShouldBeInHeaderWithMultipleLibraries" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="programShouldBeInHeader" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="readGroupIdShouldBeInHeaderWithMultipleReadGroups" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="platformUnitShouldBeInHeader" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="libraryNotInHeaderShouldThrowException" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="programNotInHeaderShouldThrowException" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="programShouldBeInHeaderWithMultiplePrograms" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="defaultValidatorShouldDoNothing" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0.003"/>
  <testcase name="libraryShouldBeInHeaderWithMultipleLibraries" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="libraryNotInHeaderWithMultipleLibrariesShouldThrowException" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0.001"/>
  <testcase name="readGroupNotInHeaderShouldThrowException" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="readGroupNotInHeaderWithMultipleReadGroupsShouldThrowException" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="platformUnitNotInHeaderWithMultipleLibrariesShouldThrowException" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="programNotInHeaderWithMultipleProgramsShouldThrowException" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="libraryShouldBeInHeader" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0.002"/>
  <testcase name="readGroupIdShouldBeInHeader" classname="org.jcvi.jillion.sam.attribute.TestReservedAttributeValidator" time="0"/>
  <testcase name="duplicateAttributeShouldThrowInvalidAttributeException" classname="org.jcvi.jillion.sam.attribute.TestDuplicateAttributeValidator" time="0.001"/>
  <testcase name="noAttributesYetShouldPass" classname="org.jcvi.jillion.sam.attribute.TestDuplicateAttributeValidator" time="0"/>
  <testcase name="doesntHaveDuplicateShouldPass" classname="org.jcvi.jillion.sam.attribute.TestDuplicateAttributeValidator" time="0"/>
  <testcase name="addingSameReferenceToAttributeShouldThrowInvalidAttributeException" classname="org.jcvi.jillion.sam.attribute.TestDuplicateAttributeValidator" time="0.001"/>
  <testcase name="firstValidatorThrowsShouldNotCallSecond" classname="org.jcvi.jillion.sam.attribute.TestDefaultChainedVaidator" time="0.013"/>
  <testcase name="secondValidatorThrowsUsingLambda" classname="org.jcvi.jillion.sam.attribute.TestDefaultChainedVaidator" time="0.001"/>
  <testcase name="passesFirstValidatorShouldCallSecond" classname="org.jcvi.jillion.sam.attribute.TestDefaultChainedVaidator" time="0.001"/>
  <testcase name="secondValidatorThrows" classname="org.jcvi.jillion.sam.attribute.TestDefaultChainedVaidator" time="0.001"/>
  <testcase name="nullValidatorShouldThrowNPE" classname="org.jcvi.jillion.sam.attribute.TestChainedSamAttributeValidatorBuilder" time="0.036"/>
  <testcase name="defaultConstructorShouldFirstUseReservedAttributeValidator" classname="org.jcvi.jillion.sam.attribute.TestChainedSamAttributeValidatorBuilder" time="0.004"/>
  <testcase name="createEmptyValidator" classname="org.jcvi.jillion.sam.attribute.TestChainedSamAttributeValidatorBuilder" time="0.001"/>
  <testcase name="firstValidatorFailsShouldNotCall2ndValidator" classname="org.jcvi.jillion.sam.attribute.TestChainedSamAttributeValidatorBuilder" time="0.305"/>
  <testcase name="firstValidatorPassesShouldThenCall2ndValidator" classname="org.jcvi.jillion.sam.attribute.TestChainedSamAttributeValidatorBuilder" time="0.007"/>
  <testcase name="wholeChainPasses" classname="org.jcvi.jillion.sam.attribute.TestChainedSamAttributeValidatorBuilder" time="0.001"/>
  <testcase name="negativeUnCompressedOffsetShouldThrowException" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0.001"/>
  <testcase name="compareToSameUncompressedBlockDifferentCompressedOffset" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="equalShouldCompareToZero" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0.003"/>
  <testcase name="encodedValue" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="notEqualToDifferentObj" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="unCompressedOffsetGreaterThanMaxShouldThrowException" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="compressedOffsetGreaterThanMaxShouldThrowException" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="negativeCompressedOffsetShouldThrowException" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="notEqualDifferenCompressedOffset" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="compareToSameCompressedBlockDifferentUncompressedOffset" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="notEqualDifferentUncompressedOffset" classname="org.jcvi.jillion.sam.TestVirtualFileOffset" time="0"/>
  <testcase name="nullAsBitsShouldThrowNPE" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0.001"/>
  <testcase name="bits77" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="bits81" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="bits83" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="bits97" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="negativeFlagsShouldThrowException" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="bits141" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0.001"/>
  <testcase name="bits145" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="bits161" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="bits163" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="bitsOfZeroMeansEmpty" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="bits2064" classname="org.jcvi.jillion.sam.TestSamRecordFlags" time="0"/>
  <testcase name="rangeCoversSingleBin" classname="org.jcvi.jillion.sam.TestBinComputation" time="0"/>
  <testcase name="rangeCoversMultipleLeafBinsShouldReturnParentBin" classname="org.jcvi.jillion.sam.TestBinComputation" time="0"/>
  <testcase name="computeCandiateOverlappingBins" classname="org.jcvi.jillion.sam.TestBinComputation" time="0.001"/>
  <testcase name="rangeCoversMultipleMiddleLevelBinsShouldReturnParentBin" classname="org.jcvi.jillion.sam.TestBinComputation" time="0"/>
  <testcase name="sortByCoordinateSameReferenceSamePositionShouldSortByQueryName" classname="org.jcvi.jillion.sam.TestSortOrder" time="0.002"/>
  <testcase name="sortByCoordinateMappedAlwaysLessThanUnMapped" classname="org.jcvi.jillion.sam.TestSortOrder" time="0"/>
  <testcase name="sortByCoordinateSameReferenceShouldSortByCoordinate" classname="org.jcvi.jillion.sam.TestSortOrder" time="0.001"/>
  <testcase name="sortByQueryName" classname="org.jcvi.jillion.sam.TestSortOrder" time="0"/>
  <testcase name="sortByCoordinateBothReadsUnmappedShouldOrderByQueryName" classname="org.jcvi.jillion.sam.TestSortOrder" time="0"/>
  <testcase name="sortByCoordinateDifferentReferenceShouldSortByReferenceOrderInHeader" classname="org.jcvi.jillion.sam.TestSortOrder" time="0.002"/>
  <testcase name="unknownShouldReturnNullComparator" classname="org.jcvi.jillion.sam.TestSortOrder" time="0"/>
  <testcase name="getEncodedName" classname="org.jcvi.jillion.sam.TestSortOrder" time="0"/>
  <testcase name="unsortedShouldReturnNullComparator" classname="org.jcvi.jillion.sam.TestSortOrder" time="0"/>
  <testcase name="parseSortOrder" classname="org.jcvi.jillion.sam.TestSortOrder" time="0"/>
  <testcase name="parseEntireSamFile" classname="org.jcvi.jillion.sam.TestSamParserFactory" time="0.018"/>
  <testcase name="parseHeaderOnlySamFile" classname="org.jcvi.jillion.sam.TestSamParserFactory" time="0.001"/>
  <testcase name="parseHalfSamFile" classname="org.jcvi.jillion.sam.TestSamParserFactory" time="0.001"/>
  <testcase name="parseEntireBamFile" classname="org.jcvi.jillion.sam.TestSamParserFactory" time="0.006"/>
  <testcase name="parseHeaderOnlyBamFile" classname="org.jcvi.jillion.sam.TestSamParserFactory" time="0.001"/>
  <testcase name="parseHalfBamFile" classname="org.jcvi.jillion.sam.TestSamParserFactory" time="0.002"/>
  <testcase name="settingSortOrderUnknownDoesNotAlterWriteOrder" classname="org.jcvi.jillion.sam.TestPresortedSamFileWriter" time="0.017"/>
  <testcase name="settingSortOrderUnSortedDoesNotAlterWriteOrder" classname="org.jcvi.jillion.sam.TestPresortedSamFileWriter" time="0.002"/>
  <testcase name="outputFileMatchesExactly" classname="org.jcvi.jillion.sam.TestPresortedSamFileWriter" time="0.006"/>
  <testcase name="settingSortOrderUnknownDoesNotAlterWriteOrder" classname="org.jcvi.jillion.sam.TestPresortedBamFileWriter" time="0.008"/>
  <testcase name="settingSortOrderUnSortedDoesNotAlterWriteOrder" classname="org.jcvi.jillion.sam.TestPresortedBamFileWriter" time="0.002"/>
  <testcase name="outputFileMatchesExactly" classname="org.jcvi.jillion.sam.TestPresortedBamFileWriter" time="0.006"/>
  <testcase name="queryNameSort" classname="org.jcvi.jillion.sam.TestResortedBamFileWriter" time="0.138"/>
  <testcase name="coordinateSort" classname="org.jcvi.jillion.sam.TestResortedBamFileWriter" time="0.035"/>
  <testcase name="queryNameSort" classname="org.jcvi.jillion.sam.TestResortedSamFileWriter" time="0.044"/>
  <testcase name="coordinateSort" classname="org.jcvi.jillion.sam.TestResortedSamFileWriter" time="0.035"/>
  <testcase name="parsedBaiMatchesRecordsInBam" classname="org.jcvi.jillion.sam.index.TestBamIndexParser" time="0.677"/>
  <testcase name="SamBuilderWithBaiWriterAndMetaDataShouldMatchPicardData" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="1.406"/>
  <testcase name="nullOutputFileShouldThrowNPE" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="0.001"/>
  <testcase name="wrongExtensionForInputFileShouldThrowException" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="0"/>
  <testcase name="writterWithMetaDataMatchesPicard" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="0.288"/>
  <testcase name="inputFileDoesNotExistShouldThrowFileNotFoundException" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="0.001"/>
  <testcase name="writingNonCoordinateSortedBamShouldThrowException" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="1.2"/>
  <testcase name="assumeSortedFlagSetWillWriteIndexEvenIfHeaderSaysOtherwise" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="0.455"/>
  <testcase name="wrongExtensionForOutputFileShouldThrowException" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="0"/>
  <testcase name="nullInputFileShouldThrowNPE" classname="org.jcvi.jillion.sam.index.TestBamIndexWriter" time="0.001"/>
  <testcase name="assertGappedAlignmentsCorrect" classname="org.jcvi.jillion.sam.transform.TestSamTransformationService" time="0.008"/>
  <testcase name="assertGappedAlignmentsCorrect" classname="org.jcvi.jillion.sam.transform.TestPaddedSamTransformationService" time="0.004"/>
  <testcase name="getIdAfterClosedShouldThrowDataStoreException" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.002"/>
  <testcase name="getAlignmentsByReference" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.009"/>
  <testcase name="getFilteredAlignmentsByReference" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.007"/>
  <testcase name="getRecordsByReferenceNulldReferenceShouldThrowNPE" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0"/>
  <testcase name="filteredDataStore" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.004"/>
  <testcase name="randomAccessId" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.001"/>
  <testcase name="getRecordsByReferenceInvalidReferenceShouldThrowException" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0"/>
  <testcase name="getHeader" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0"/>
  <testcase name="getRecordCount" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.003"/>
  <testcase name="getRecordThatDoesntExistShouldReturnNull" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0"/>
  <testcase name="getAlignmentsByReferenceAndRange" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.008"/>
  <testcase name="getFilteredAlignmentsByReferenceAndRange" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.002"/>
  <testcase name="forEachGetAlignmentsByReferenceAndRange" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0.002"/>
  <testcase name="getNullIdShouldThrowNPE" classname="org.jcvi.jillion.sam.TestBamDataStore" time="0"/>
  <testcase name="returnedInstanceIfHeaderSaysQuerySorted" classname="org.jcvi.jillion.sam.TestQuerySortedSamDataStore" time="0.024"/>
  <testcase name="shortCircuitWhenIteratorGetsPastName" classname="org.jcvi.jillion.sam.TestQuerySortedSamDataStore" time="0.018"/>
  <testcase name="onlyIncludeSomeIds[provider hint = RANDOM_ACCESS_OPTIMIZE_MEMORY]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0.006"/>
  <testcase name="allRecordsPresent[provider hint = RANDOM_ACCESS_OPTIMIZE_MEMORY]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0.001"/>
  <testcase name="filterAllReads[provider hint = RANDOM_ACCESS_OPTIMIZE_MEMORY]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0"/>
  <testcase name="onlyIncludeSomeIds[provider hint = RANDOM_ACCESS_OPTIMIZE_SPEED]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0"/>
  <testcase name="allRecordsPresent[provider hint = RANDOM_ACCESS_OPTIMIZE_SPEED]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0"/>
  <testcase name="filterAllReads[provider hint = RANDOM_ACCESS_OPTIMIZE_SPEED]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0"/>
  <testcase name="onlyIncludeSomeIds[provider hint = ITERATION_ONLY]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0.001"/>
  <testcase name="allRecordsPresent[provider hint = ITERATION_ONLY]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0.002"/>
  <testcase name="filterAllReads[provider hint = ITERATION_ONLY]" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqDataStore" time="0.001"/>
  <testcase name="writeOneRecordBigEndian" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqFileWriter" time="0.002"/>
  <testcase name="ambiguityGetsConvertedIntoNWithZeroQuality" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqFileWriter" time="0.001"/>
  <testcase name="nsGetZeroQuality" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqFileWriter" time="0"/>
  <testcase name="writeMultipleRecords" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqFileWriter" time="0.001"/>
  <testcase name="writeOneRecordNativeByteOrder" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqFileWriter" time="0"/>
  <testcase name="capMaxQualityTo63" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqFileWriter" time="0"/>
  <testcase name="writeOneRecordLittleEndian" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqFileWriter" time="0.001"/>
  <testcase name="gapGetsConvertedIntoNWithZeroQuality" classname="org.jcvi.jillion.maq.bfq.TestBinaryFastqFileWriter" time="0"/>
  <testcase name="parseBfa" classname="org.jcvi.jillion.maq.bfa.TestBinaryFastaFileParser" time="0.007"/>
  <testcase name="encodeBigEndian" classname="org.jcvi.jillion.maq.bfa.TestBinaryFastaFileWriter" time="0.007"/>
  <testcase name="writeAllRecordsShouldMatchMaqByteForByte" classname="org.jcvi.jillion.maq.bfa.TestBinaryFastaFileWriter" time="0.001"/>
  <testcase name="onlyIncludeSomeIds[provider hint = RANDOM_ACCESS_OPTIMIZE_MEMORY]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0.005"/>
  <testcase name="allRecordsPresent[provider hint = RANDOM_ACCESS_OPTIMIZE_MEMORY]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0.004"/>
  <testcase name="filterAllReads[provider hint = RANDOM_ACCESS_OPTIMIZE_MEMORY]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0"/>
  <testcase name="onlyIncludeSomeIds[provider hint = RANDOM_ACCESS_OPTIMIZE_SPEED]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0"/>
  <testcase name="allRecordsPresent[provider hint = RANDOM_ACCESS_OPTIMIZE_SPEED]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0"/>
  <testcase name="filterAllReads[provider hint = RANDOM_ACCESS_OPTIMIZE_SPEED]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0"/>
  <testcase name="onlyIncludeSomeIds[provider hint = ITERATION_ONLY]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0.004"/>
  <testcase name="allRecordsPresent[provider hint = ITERATION_ONLY]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0.003"/>
  <testcase name="filterAllReads[provider hint = ITERATION_ONLY]" classname="org.jcvi.jillion.maq.bfa.TestBfaDataStores" time="0"/>
  <testcase name="createProfileTieUseAmbiguity" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.014"/>
  <testcase name="writeProfileToFile" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.003"/>
  <testcase name="doNotInclude0xEdges" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.001"/>
  <testcase name="createProfileWithVariationWithPercentages" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.003"/>
  <testcase name="createProfileIgnoreSlicesWithGapInConsensus" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.012"/>
  <testcase name="createProfileWithGap" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.002"/>
  <testcase name="createProfileTieUseRandom" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.21"/>
  <testcase name="createProfileWithAmbiguitiesShouldBeFractional" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.001"/>
  <testcase name="nullOutputStreamShouldThrowNPE" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0"/>
  <testcase name="createProfileTieUseLowestAscii" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0"/>
  <testcase name="include0xEdges" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0"/>
  <testcase name="seqLengthOverIntMaxShouldThrowIllegaArgEx" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0"/>
  <testcase name="createProfileWithVariation" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0.001"/>
  <testcase name="createProfileTieUseAmbiguityWithAmibiguityInReads" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0"/>
  <testcase name="nullFileShouldThrowNPE" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0"/>
  <testcase name="createProfile" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0"/>
  <testcase name="createProfileWithMajorityGaps" classname="org.jcvi.jillion.profile.TestProfileWriterBuilder" time="0"/>
  <testcase name="randomSeq" classname="org.jcvi.jillion.testutils.TestNucleotideSequenceTestUtil" time="0.001"/>
  <testcase name="createWithTimes" classname="org.jcvi.jillion.testutils.TestNucleotideSequenceTestUtil" time="0"/>
  <testcase name="createFromString" classname="org.jcvi.jillion.testutils.TestNucleotideSequenceTestUtil" time="0"/>
  <testcase name="empty" classname="org.jcvi.jillion.testutils.TestNucleotideSequenceTestUtil" time="0"/>
  <testcase name="forwardReadHasInternalInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.003"/>
  <testcase name="addReverseReadToUnknownReferenceShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0"/>
  <testcase name="forwardReadNoAlignmentShouldNotHaveMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.004"/>
  <testcase name="haltAfterLastRead" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.002"/>
  <testcase name="reverseReadHasInsertionAtBeginning" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.003"/>
  <testcase name="forwardReadAllInsertsShouldNotHaveMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.002"/>
  <testcase name="AnyRecordWritersAreNullReadsShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0"/>
  <testcase name="forwardReadHasSpecifiedInternalInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.005"/>
  <testcase name="haltInMiddleOfMatchesShouldNotVisitAllMatches" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.003"/>
  <testcase name="multipleReadsOneSffFile" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.01"/>
  <testcase name="forwardReadHasInternalDeletion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.004"/>
  <testcase name="forwardReadAllMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.001"/>
  <testcase name="multipleReadsOverMaxAllowedInSffFilesShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.001"/>
  <testcase name="readFastqRecordWriterWithMax0ReadsShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.003"/>
  <testcase name="forwardReadHasInsertionAtBeginning" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.002"/>
  <testcase name="multipleReadsOneFastaFile" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.002"/>
  <testcase name="multipleReadsOneFastqFile" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.001"/>
  <testcase name="multipleReadsMixOfFastaAndSffFiles" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.007"/>
  <testcase name="nullRecordWriterShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0"/>
  <testcase name="forwardReadDoesNotStartAt0" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.001"/>
  <testcase name="addNotMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.005"/>
  <testcase name="forwardReadHasInsertionAtEnd" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.002"/>
  <testcase name="multipleReadsTwoFastaFiles" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.002"/>
  <testcase name="addForwardReadToUnknownReferenceShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0"/>
  <testcase name="multipleReadsOverMaxAllowedInFastaFilesShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0"/>
  <testcase name="multipleReadsTwoFastqFiles" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.006"/>
  <testcase name="readFastaRecordWriterWithMax0ReadsShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0"/>
  <testcase name="addReverseReadToStartsBeyondReferenceShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0"/>
  <testcase name="multipleReadsMixOfFastaAndFastqFiles" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.003"/>
  <testcase name="multipleReadsOverMaxAllowedInFastqFilesShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.001"/>
  <testcase name="addForwardReadToStartsBeyondReferenceShouldThrowException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0"/>
  <testcase name="forwardReadHasSpecifiedInsertionAtBeginning" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.003"/>
  <testcase name="multipleReadsTwoSffFiles" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.004"/>
  <testcase name="reverseReadHasInsertionAtEnd" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDouble" time="0.002"/>
  <testcase name="forwardReadFullMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.011"/>
  <testcase name="forwardReadWithLeadingAndTrailingInsertions" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.009"/>
  <testcase name="forwardInternalInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.004"/>
  <testcase name="forwardLeadingAndInternalDeletions" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.005"/>
  <testcase name="reverseInternalInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.007"/>
  <testcase name="reverseReadWithMisMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.005"/>
  <testcase name="noAlignmentsShouldThrowIllegalStateException" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.001"/>
  <testcase name="twoforwardReadsFullMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.007"/>
  <testcase name="reverseReadWithLeadingAndTrailingInsertions" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.003"/>
  <testcase name="reverseReadWithLeadingInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.004"/>
  <testcase name="forwardReadWithLeadingInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.007"/>
  <testcase name="forwardLeadingAndInternalInsertions" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.004"/>
  <testcase name="forwardReadWithMisMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.006"/>
  <testcase name="reverseReadFullMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.005"/>
  <testcase name="reverseReadWithTrailingInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.006"/>
  <testcase name="reverseLeadingAndInternalDeletion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.006"/>
  <testcase name="forwardReadWithTrailingInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.005"/>
  <testcase name="reverseInternalDeletion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.003"/>
  <testcase name="forwardInternalDeletion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.002"/>
  <testcase name="forwardAndReverseReadsFullMatch" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.002"/>
  <testcase name="reverseLeadingAndInternalInsertion" classname="org.jcvi.jillion.testutils.assembly.cas.TestCasParserTestDoubleAlignedSequences" time="0.002"/>
  <testcase name="trimsCorrectly" classname="org.jcvi.jillion.trim.TestBwaQualityTrimmer" time="0.005"/>
  <testcase name="asQualityBuilder[zeroLengthSequenceShouldReturnEmpty]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualitySequence[zeroLengthSequenceShouldReturnEmpty]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualityBuilder[wholeSequenceAboveMinThresholdShouldReturnWholeLength]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualitySequence[wholeSequenceAboveMinThresholdShouldReturnWholeLength]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualityBuilder[wholeSequenceBelowMinThresholdShouldReturnEmptyRange]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0.001"/>
  <testcase name="asQualitySequence[wholeSequenceBelowMinThresholdShouldReturnEmptyRange]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualityBuilder[startsOffGoodThenGoesBadShouldReturnGoodRange]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualitySequence[startsOffGoodThenGoesBadShouldReturnGoodRange]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualityBuilder[lastWindowNotAllBad]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualitySequence[lastWindowNotAllBad]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualityBuilder[lastWindowNotAllBad2]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualitySequence[lastWindowNotAllBad2]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualityBuilder[lastWindowHasInnerBadBase]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualitySequence[lastWindowHasInnerBadBase]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualityBuilder[innerBasesDipBelowThresholdStillOK]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualitySequence[innerBasesDipBelowThresholdStillOK]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0.001"/>
  <testcase name="asQualityBuilder[trimmomatic_1]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="asQualitySequence[trimmomatic_1]" classname="org.jcvi.jillion.trim.trimmomatic.TestSlidingWindowQualityTrimmer" time="0"/>
  <testcase name="trimOffAFewBasesFromEnd" classname="org.jcvi.jillion.trim.trimmomatic.TestMaxInfo" time="0"/>
  <testcase name="goodQualityDontTrimAnything" classname="org.jcvi.jillion.trim.trimmomatic.TestMaxInfo" time="0.001"/>
  <testcase name="trimLess" classname="org.jcvi.jillion.trim.trimmomatic.TestMaxInfo" time="0"/>
  <testcase name="trimMore" classname="org.jcvi.jillion.trim.trimmomatic.TestMaxInfo" time="0"/>
  <testcase name="reverseSequenceWithoutCheckingBiDirectionallyWillNotFindVector" classname="org.jcvi.jillion.trim.lucy.TestLucyLikeVectorSpliceTrimmer" time="0.278"/>
  <testcase name="forwardRead1" classname="org.jcvi.jillion.trim.lucy.TestLucyLikeVectorSpliceTrimmer" time="0.155"/>
  <testcase name="forwardRead2" classname="org.jcvi.jillion.trim.lucy.TestLucyLikeVectorSpliceTrimmer" time="0.157"/>
  <testcase name="reverseRead" classname="org.jcvi.jillion.trim.lucy.TestLucyLikeVectorSpliceTrimmer" time="0.174"/>
  <testcase name="bTrashShouldReturnEmptyRange" classname="org.jcvi.jillion.trim.lucy.TestLucyQualityTrimmer" time="0.015"/>
  <testcase name="twoGoodQualityRegionsShouldShiftDownstreamRegionCoordinatesCorrectly" classname="org.jcvi.jillion.trim.lucy.TestLucyQualityTrimmer" time="0.009"/>
  <testcase name="SAJJA07T27G07MP675R" classname="org.jcvi.jillion.trim.lucy.TestLucyQualityTrimmer" time="0.01"/>
  <testcase name="SAJJA07T27G07MP1F" classname="org.jcvi.jillion.trim.lucy.TestLucyQualityTrimmer" time="0.009"/>
  <testcase name="wTrashShouldReturnEmptyRange" classname="org.jcvi.jillion.trim.lucy.TestLucyQualityTrimmer" time="0.004"/>
  <testcase name="noGoodQualityDataShouldReturnEmptyRange" classname="org.jcvi.jillion.trim.lucy.TestLucyQualityTrimmer" time="0.005"/>
  <testcase name="multipleQualTrimmersShouldCombine" classname="org.jcvi.jillion.trim.TestTrimmerPipeline" time="0.014"/>
  <testcase name="multipleNucTrimmersShouldCombine" classname="org.jcvi.jillion.trim.TestTrimmerPipeline" time="0.002"/>
  <testcase name="shortCircuitRange" classname="org.jcvi.jillion.trim.TestTrimmerPipeline" time="0.001"/>
  <testcase name="trimTraceShouldIntersectNucAndQualResults" classname="org.jcvi.jillion.trim.TestTrimmerPipeline" time="0.001"/>
  <testcase name="QualityTrimmerOnly" classname="org.jcvi.jillion.trim.TestTrimmerPipeline" time="0"/>
  <testcase name="nucleotideTrimmerOnly" classname="org.jcvi.jillion.trim.TestTrimmerPipeline" time="0.001"/>
  <testcase name="wikipediaExample" classname="org.jcvi.jillion.orf.TestBasicOrfFinder" time="0.006"/>
  <testcase name="hitsOn3primerEnd" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0.005"/>
  <testcase name="multiplePrimerHits" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0.002"/>
  <testcase name="onlyReverseComplementPrimerShouldReturnFullRange" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0"/>
  <testcase name="hits5primeEnd" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0"/>
  <testcase name="hitsCloseTo3primerEnd" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0.001"/>
  <testcase name="reverseComplementHits5primeEnd" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0"/>
  <testcase name="reverseComplementHitsInMiddle" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0.001"/>
  <testcase name="hitsCloseTo5primeEnd" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0"/>
  <testcase name="reverseComplementHitsCloseTo3primerEnd" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0.004"/>
  <testcase name="onlyPrimerShouldReturnFullRange" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0.001"/>
  <testcase name="reverseComplementHitsOn3primerEnd" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0"/>
  <testcase name="hitsInMiddle" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0.001"/>
  <testcase name="reverseComplementHitsCloseTo5primeEnd" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector" time="0"/>
  <testcase name="detect" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetector_ActualData" time="0.109"/>
  <testcase name="detect" classname="org.jcvi.jillion.experimental.primer.TestPrimerDetectorInternalPrimerHit" time="0.096"/>
  <testcase name="santaLucia" classname="org.jcvi.jillion.experimental.primer.TestSaltCorrectionStrategy" time="0.001"/>
  <testcase name="schildkrautLifson" classname="org.jcvi.jillion.experimental.primer.TestSaltCorrectionStrategy" time="0"/>
  <testcase name="sugimotoWithSaltAdjustment[0]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0.01"/>
  <testcase name="breslaurWithSaltAdjustment[0]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0"/>
  <testcase name="santaLuciaAllawiWithSaltAdjustment[0]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0"/>
  <testcase name="sugimotoWithSaltAdjustment[1]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0.001"/>
  <testcase name="breslaurWithSaltAdjustment[1]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0"/>
  <testcase name="santaLuciaAllawiWithSaltAdjustment[1]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0"/>
  <testcase name="sugimotoWithSaltAdjustment[2]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0.001"/>
  <testcase name="breslaurWithSaltAdjustment[2]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0"/>
  <testcase name="santaLuciaAllawiWithSaltAdjustment[2]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0"/>
  <testcase name="sugimotoWithSaltAdjustment[3]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0"/>
  <testcase name="breslaurWithSaltAdjustment[3]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0"/>
  <testcase name="santaLuciaAllawiWithSaltAdjustment[3]" classname="org.jcvi.jillion.experimental.primer.TestOptimalMeltingTemperatureEstimatorMatchesDnaMate" time="0.001"/>
  <testcase name="outOfIndexRowShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.plate.TestWellFactories" time="0.001"/>
  <testcase name="nullNameShouldThrowNPE" classname="org.jcvi.jillion.experimental.plate.TestWellFactories" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.experimental.plate.TestWellFactories" time="0"/>
  <testcase name="sameValueShouldBeEqual" classname="org.jcvi.jillion.experimental.plate.TestWellFactories" time="0"/>
  <testcase name="sameReferenceShouldBeEqual" classname="org.jcvi.jillion.experimental.plate.TestWellFactories" time="0"/>
  <testcase name="outOfIndexColumnShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.plate.TestWellFactories" time="0"/>
  <testcase name="computeWellMatchesParsedString[0]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[4]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[5]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[6]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[7]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[8]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[9]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[10]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[11]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[12]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[13]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[14]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[15]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[16]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[17]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[18]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[19]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[20]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[21]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[22]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[23]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[24]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[25]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[26]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[27]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[28]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[29]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[30]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[31]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[32]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[33]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[34]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[35]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[36]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[37]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[38]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[39]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[40]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[41]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[42]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[43]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[44]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[45]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[46]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[47]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[48]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[49]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[50]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[51]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[52]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[53]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[54]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[55]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[56]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[57]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[58]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[59]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[60]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[61]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[62]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[63]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[64]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[65]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[66]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[67]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[68]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[69]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[70]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[71]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[72]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[73]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[74]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[75]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[76]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[77]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[78]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[79]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[80]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[81]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[82]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[83]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[84]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[85]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[86]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[87]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[88]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[89]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[90]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[91]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[92]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[93]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[94]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[95]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[96]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[97]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[98]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[99]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[100]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[101]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[102]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[103]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[104]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[105]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[106]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[107]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[108]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[109]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[110]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[111]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[112]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[113]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[114]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[115]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[116]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[117]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[118]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[119]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[120]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[121]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[122]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[123]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[124]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[125]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[126]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[127]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[128]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[129]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[130]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[131]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[132]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[133]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[134]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[135]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[136]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[137]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[138]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[139]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[140]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[141]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[142]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[143]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[144]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[145]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[146]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[147]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[148]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[149]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[150]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[151]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[152]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[153]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[154]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[155]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[156]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[157]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[158]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[159]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[160]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[161]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[162]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[163]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[164]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[165]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[166]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[167]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[168]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[169]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[170]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[171]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[172]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[173]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[174]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[175]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[176]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[177]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[178]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[179]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[180]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[181]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[182]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[183]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[184]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[185]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[186]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[187]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[188]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[189]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[190]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[191]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[192]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[193]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[194]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[195]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[196]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[197]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[198]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[199]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[200]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[201]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[202]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[203]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[204]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[205]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[206]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[207]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[208]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[209]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[210]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[211]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[212]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[213]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[214]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[215]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[216]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[217]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[218]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[219]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[220]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[221]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[222]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[223]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[224]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[225]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[226]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[227]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[228]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[229]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[230]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[231]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[232]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[233]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[234]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[235]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[236]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[237]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[238]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[239]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[240]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[241]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[242]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[243]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[244]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[245]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[246]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[247]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[248]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[249]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[250]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[251]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[252]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[253]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[254]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[255]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[256]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[257]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[258]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[259]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[260]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[261]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[262]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[263]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[264]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[265]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[266]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[267]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[268]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[269]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[270]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[271]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[272]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[273]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[274]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[275]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[276]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[277]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[278]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[279]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[280]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[281]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[282]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[283]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[284]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[285]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[286]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[287]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[288]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[289]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[290]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[291]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[292]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[293]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[294]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[295]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[296]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[297]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[298]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[299]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[300]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[301]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[302]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[303]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[304]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[305]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[306]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[307]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[308]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[309]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[310]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[311]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[312]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[313]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[314]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[315]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[316]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[317]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[318]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[319]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[320]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[321]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[322]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[323]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[324]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[325]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[326]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[327]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[328]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[329]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[330]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[331]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[332]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[333]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[334]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[335]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[336]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[337]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[338]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[339]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[340]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[341]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[342]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[343]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[344]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[345]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[346]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[347]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[348]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[349]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[350]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[351]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[352]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[353]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[354]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[355]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[356]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[357]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[358]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[359]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[360]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[361]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[362]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[363]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[364]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[365]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[366]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[367]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[368]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[369]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[370]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[371]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[372]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[373]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[374]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[375]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[376]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[377]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[378]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[379]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[380]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[381]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[382]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[383]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[384]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[385]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[386]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[387]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[388]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[389]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[390]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[391]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[392]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[393]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[394]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[395]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[396]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[397]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[398]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[399]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[400]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[401]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[402]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[403]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[404]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[405]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[406]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[407]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[408]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[409]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[410]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[411]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[412]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[413]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[414]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[415]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[416]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[417]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[418]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[419]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[420]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[421]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[422]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[423]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[424]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[425]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[426]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[427]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[428]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[429]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[430]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[431]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[432]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[433]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[434]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[435]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[436]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[437]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[438]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[439]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[440]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[441]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[442]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[443]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[444]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[445]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.002"/>
  <testcase name="computeWellMatchesParsedString[446]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[447]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[448]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[449]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[450]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[451]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[452]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[453]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[454]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[455]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[456]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[457]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[458]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[459]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[460]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[461]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[462]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[463]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[464]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[465]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[466]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[467]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[468]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[469]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[470]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[471]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[472]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[473]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[474]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[475]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[476]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[477]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[478]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[479]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[480]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[481]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[482]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[483]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[484]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[485]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[486]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[487]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[488]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[489]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[490]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[491]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[492]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[493]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[494]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[495]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[496]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[497]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[498]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[499]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[500]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[501]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[502]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[503]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[504]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[505]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[506]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[507]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[508]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[509]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[510]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[511]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[512]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[513]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[514]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[515]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[516]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[517]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[518]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[519]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[520]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[521]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[522]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[523]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[524]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[525]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[526]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.004"/>
  <testcase name="computeWellMatchesParsedString[527]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[528]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[529]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[530]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[531]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[532]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[533]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[534]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[535]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[536]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[537]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[538]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[539]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[540]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[541]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[542]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[543]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[544]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[545]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[546]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[547]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[548]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[549]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[550]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[551]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[552]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[553]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[554]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[555]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[556]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[557]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[558]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[559]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[560]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[561]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[562]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[563]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[564]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[565]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[566]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[567]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[568]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[569]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[570]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[571]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[572]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[573]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[574]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[575]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[576]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[577]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[578]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[579]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[580]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[581]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[582]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[583]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[584]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[585]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[586]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[587]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[588]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[589]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[590]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[591]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[592]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[593]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[594]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[595]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[596]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[597]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[598]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[599]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[600]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[601]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[602]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[603]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[604]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[605]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[606]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[607]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[608]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[609]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[610]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[611]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[612]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[613]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[614]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[615]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[616]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[617]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[618]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[619]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[620]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[621]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[622]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[623]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[624]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[625]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[626]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[627]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.004"/>
  <testcase name="computeWellMatchesParsedString[628]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[629]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[630]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[631]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[632]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[633]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[634]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[635]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[636]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[637]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[638]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[639]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[640]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[641]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[642]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[643]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[644]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[645]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[646]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[647]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[648]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[649]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[650]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[651]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[652]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[653]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[654]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[655]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[656]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[657]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[658]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[659]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[660]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[661]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[662]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[663]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[664]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[665]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[666]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[667]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[668]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[669]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[670]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[671]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[672]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[673]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[674]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[675]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[676]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[677]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[678]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[679]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[680]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[681]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[682]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[683]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[684]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[685]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[686]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[687]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[688]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[689]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[690]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[691]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[692]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[693]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[694]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[695]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[696]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[697]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[698]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[699]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[700]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[701]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[702]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[703]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[704]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[705]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[706]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[707]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[708]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[709]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[710]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[711]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[712]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[713]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[714]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[715]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[716]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[717]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[718]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[719]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[720]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[721]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[722]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[723]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[724]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[725]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[726]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[727]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[728]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[729]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[730]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[731]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[732]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[733]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[734]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[735]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[736]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[737]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[738]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[739]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[740]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[741]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[742]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[743]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[744]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[745]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.003"/>
  <testcase name="computeWellMatchesParsedString[746]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[747]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[748]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[749]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[750]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[751]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[752]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[753]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[754]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[755]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[756]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[757]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[758]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[759]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[760]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[761]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[762]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[763]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[764]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[765]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[766]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[767]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[768]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[769]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[770]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[771]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[772]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[773]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[774]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[775]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[776]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[777]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[778]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[779]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[780]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[781]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[782]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[783]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[784]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[785]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[786]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[787]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[788]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[789]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[790]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[791]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[792]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[793]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[794]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[795]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[796]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[797]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[798]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[799]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[800]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[801]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[802]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[803]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[804]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[805]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[806]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[807]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[808]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[809]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[810]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[811]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[812]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[813]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[814]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[815]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[816]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[817]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[818]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[819]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[820]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[821]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[822]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[823]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[824]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[825]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[826]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[827]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[828]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[829]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[830]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[831]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[832]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[833]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[834]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[835]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[836]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[837]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[838]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[839]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[840]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[841]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[842]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[843]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[844]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[845]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[846]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[847]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[848]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[849]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[850]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[851]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[852]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[853]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[854]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[855]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[856]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[857]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[858]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[859]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[860]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[861]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[862]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[863]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[864]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[865]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[866]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[867]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[868]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[869]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[870]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[871]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[872]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[873]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[874]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[875]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[876]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[877]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[878]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[879]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[880]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[881]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[882]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[883]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[884]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[885]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[886]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[887]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[888]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[889]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[890]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[891]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[892]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[893]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[894]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[895]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[896]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[897]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[898]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[899]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[900]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[901]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[902]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[903]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[904]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[905]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[906]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[907]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[908]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[909]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[910]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[911]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[912]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[913]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[914]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[915]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[916]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[917]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[918]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[919]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[920]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[921]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[922]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[923]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[924]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[925]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[926]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[927]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[928]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[929]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[930]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[931]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[932]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[933]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[934]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[935]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[936]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[937]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[938]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[939]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[940]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[941]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[942]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[943]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[944]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[945]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[946]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[947]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[948]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[949]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[950]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[951]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[952]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[953]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[954]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[955]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[956]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[957]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[958]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[959]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[960]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[961]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[962]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[963]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[964]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[965]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[966]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[967]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[968]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[969]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[970]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[971]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[972]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[973]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[974]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[975]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[976]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[977]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[978]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[979]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[980]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[981]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[982]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[983]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[984]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[985]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[986]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[987]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[988]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[989]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[990]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[991]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[992]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[993]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[994]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[995]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[996]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[997]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.005"/>
  <testcase name="computeWellMatchesParsedString[998]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[999]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1000]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1001]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1002]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1003]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1004]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1005]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1006]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1007]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1008]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1009]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1010]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1011]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1012]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1013]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1014]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1015]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1016]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1017]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1018]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1019]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1020]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1021]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1022]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1023]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1024]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1025]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1026]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1027]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1028]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1029]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1030]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1031]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1032]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1033]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1034]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1035]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1036]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1037]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1038]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1039]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1040]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1041]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1042]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1043]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1044]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1045]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1046]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1047]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1048]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1049]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1050]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1051]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1052]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1053]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1054]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1055]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1056]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1057]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1058]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1059]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1060]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1061]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1062]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1063]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1064]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1065]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1066]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1067]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1068]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1069]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1070]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1071]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1072]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1073]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1074]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1075]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1076]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1077]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1078]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1079]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1080]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1081]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1082]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1083]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1084]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1085]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1086]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1087]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1088]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1089]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1090]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1091]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1092]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1093]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1094]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1095]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1096]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1097]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1098]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1099]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1100]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1101]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1102]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1103]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1104]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1105]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1106]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1107]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1108]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1109]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1110]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1111]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1112]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1113]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1114]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1115]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1116]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1117]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1118]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1119]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1120]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1121]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1122]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.004"/>
  <testcase name="computeWellMatchesParsedString[1123]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1124]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1125]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1126]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1127]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1128]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1129]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1130]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1131]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1132]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1133]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1134]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1135]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1136]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1137]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1138]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1139]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1140]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1141]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1142]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1143]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1144]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1145]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1146]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1147]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1148]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1149]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1150]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1151]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1152]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1153]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1154]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1155]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1156]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1157]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1158]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1159]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1160]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1161]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1162]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1163]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1164]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1165]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1166]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1167]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1168]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1169]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1170]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1171]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1172]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1173]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1174]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1175]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1176]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1177]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1178]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1179]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1180]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1181]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1182]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1183]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.004"/>
  <testcase name="computeWellMatchesParsedString[1184]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1185]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1186]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1187]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1188]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1189]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1190]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1191]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1192]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1193]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1194]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1195]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1196]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1197]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1198]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1199]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1200]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1201]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1202]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1203]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1204]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1205]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1206]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1207]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1208]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1209]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1210]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1211]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1212]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1213]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1214]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1215]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1216]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1217]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1218]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1219]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1220]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1221]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.004"/>
  <testcase name="computeWellMatchesParsedString[1222]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1223]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1224]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1225]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1226]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1227]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1228]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1229]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1230]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1231]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1232]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1233]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1234]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1235]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1236]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1237]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1238]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1239]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1240]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1241]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1242]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1243]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1244]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1245]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1246]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1247]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1248]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1249]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1250]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1251]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1252]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1253]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1254]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1255]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1256]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1257]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1258]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1259]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1260]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1261]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1262]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1263]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1264]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1265]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1266]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1267]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1268]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1269]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1270]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1271]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1272]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1273]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1274]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1275]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1276]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1277]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1278]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1279]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1280]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1281]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1282]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1283]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1284]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1285]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1286]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1287]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1288]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1289]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1290]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1291]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1292]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1293]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1294]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1295]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1296]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1297]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1298]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1299]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1300]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1301]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1302]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1303]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1304]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1305]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1306]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1307]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1308]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1309]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1310]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1311]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1312]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1313]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1314]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1315]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1316]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1317]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1318]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1319]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1320]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1321]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1322]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1323]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1324]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1325]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1326]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1327]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1328]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1329]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1330]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1331]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1332]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1333]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1334]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1335]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1336]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1337]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1338]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1339]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1340]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1341]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1342]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1343]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1344]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1345]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1346]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1347]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1348]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1349]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1350]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1351]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1352]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1353]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1354]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1355]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1356]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1357]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1358]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1359]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1360]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1361]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1362]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1363]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1364]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1365]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1366]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1367]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1368]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1369]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1370]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1371]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1372]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1373]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1374]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1375]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1376]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1377]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1378]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1379]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1380]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1381]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1382]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1383]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1384]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1385]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1386]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1387]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1388]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1389]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1390]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1391]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1392]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1393]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1394]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1395]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1396]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1397]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1398]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1399]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1400]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1401]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.005"/>
  <testcase name="computeWellMatchesParsedString[1402]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1403]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1404]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1405]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1406]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1407]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1408]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1409]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1410]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1411]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1412]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1413]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1414]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1415]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1416]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1417]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1418]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1419]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1420]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1421]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1422]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1423]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1424]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1425]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1426]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1427]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1428]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1429]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1430]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1431]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1432]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1433]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1434]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1435]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1436]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1437]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1438]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1439]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1440]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1441]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1442]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1443]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1444]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1445]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1446]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1447]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1448]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1449]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1450]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1451]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1452]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1453]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1454]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1455]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1456]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1457]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1458]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1459]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1460]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1461]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1462]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1463]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1464]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1465]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1466]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1467]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1468]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1469]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1470]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1471]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1472]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1473]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1474]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1475]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1476]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1477]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1478]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1479]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1480]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1481]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1482]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1483]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1484]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1485]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1486]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1487]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1488]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1489]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1490]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1491]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1492]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1493]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1494]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1495]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1496]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1497]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1498]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1499]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1500]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1501]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1502]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1503]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1504]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1505]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1506]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1507]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1508]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1509]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1510]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1511]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1512]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1513]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1514]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1515]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1516]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1517]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1518]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1519]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1520]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1521]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1522]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1523]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1524]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1525]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1526]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1527]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1528]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1529]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1530]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1531]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1532]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1533]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1534]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1535]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1536]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1537]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1538]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1539]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1540]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1541]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1542]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1543]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1544]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.005"/>
  <testcase name="computeWellMatchesParsedString[1545]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1546]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1547]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1548]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1549]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1550]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1551]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1552]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1553]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1554]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1555]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1556]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1557]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1558]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1559]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1560]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1561]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1562]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1563]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1564]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1565]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1566]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1567]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1568]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1569]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1570]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1571]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1572]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1573]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1574]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1575]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1576]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1577]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1578]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1579]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1580]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1581]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1582]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1583]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1584]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1585]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1586]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1587]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1588]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1589]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1590]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1591]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1592]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1593]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1594]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1595]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1596]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1597]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1598]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1599]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1600]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1601]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1602]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1603]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1604]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1605]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1606]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1607]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1608]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1609]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1610]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1611]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1612]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1613]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1614]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1615]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1616]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1617]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1618]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1619]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1620]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1621]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1622]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1623]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1624]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1625]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1626]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1627]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1628]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1629]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1630]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1631]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1632]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1633]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1634]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1635]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1636]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1637]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1638]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1639]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1640]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1641]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1642]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1643]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1644]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1645]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1646]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1647]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1648]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1649]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1650]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1651]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1652]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1653]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1654]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1655]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1656]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1657]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1658]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1659]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1660]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1661]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1662]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1663]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1664]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1665]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1666]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1667]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1668]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1669]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1670]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1671]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1672]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1673]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1674]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1675]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1676]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1677]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1678]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1679]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1680]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1681]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1682]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1683]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1684]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1685]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1686]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1687]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1688]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1689]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1690]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1691]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1692]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1693]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1694]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1695]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1696]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1697]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1698]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1699]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1700]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1701]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1702]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1703]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1704]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1705]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1706]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1707]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1708]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1709]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1710]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1711]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1712]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1713]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1714]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1715]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1716]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1717]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1718]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1719]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1720]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1721]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1722]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1723]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1724]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1725]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1726]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1727]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1728]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1729]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1730]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1731]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1732]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1733]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1734]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1735]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1736]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1737]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1738]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1739]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1740]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1741]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1742]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1743]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1744]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1745]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1746]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1747]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1748]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1749]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1750]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1751]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1752]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1753]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1754]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1755]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1756]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1757]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1758]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1759]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1760]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1761]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1762]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1763]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1764]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1765]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1766]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1767]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1768]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1769]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1770]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1771]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1772]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1773]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1774]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1775]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1776]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1777]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1778]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1779]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1780]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1781]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1782]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1783]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1784]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1785]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1786]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1787]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1788]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1789]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1790]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1791]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1792]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1793]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1794]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1795]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1796]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1797]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1798]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1799]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1800]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1801]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1802]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1803]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1804]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1805]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1806]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1807]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1808]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1809]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1810]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1811]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1812]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1813]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1814]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1815]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1816]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1817]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1818]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1819]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1820]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1821]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1822]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1823]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1824]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1825]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1826]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1827]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1828]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1829]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1830]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1831]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1832]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1833]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1834]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1835]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1836]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1837]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1838]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1839]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1840]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1841]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1842]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1843]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1844]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1845]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1846]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1847]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1848]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1849]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1850]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1851]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1852]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1853]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1854]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1855]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1856]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1857]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1858]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1859]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1860]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1861]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1862]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1863]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1864]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1865]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1866]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1867]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1868]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1869]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1870]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1871]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1872]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1873]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1874]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1875]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1876]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1877]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1878]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1879]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1880]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1881]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1882]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1883]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1884]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1885]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1886]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1887]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1888]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1889]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1890]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1891]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1892]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1893]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1894]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1895]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1896]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1897]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1898]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1899]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1900]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1901]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1902]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1903]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1904]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1905]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1906]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.007"/>
  <testcase name="computeWellMatchesParsedString[1907]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1908]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1909]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1910]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1911]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1912]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1913]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1914]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[1915]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1916]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1917]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1918]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1919]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1920]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1921]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1922]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1923]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1924]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1925]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1926]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1927]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1928]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1929]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1930]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1931]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1932]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1933]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1934]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1935]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1936]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1937]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1938]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1939]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1940]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1941]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1942]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1943]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1944]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1945]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1946]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1947]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1948]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1949]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1950]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1951]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1952]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1953]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1954]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1955]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1956]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1957]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1958]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1959]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1960]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1961]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1962]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1963]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1964]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1965]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1966]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1967]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1968]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1969]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1970]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1971]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1972]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1973]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1974]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1975]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1976]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1977]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1978]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1979]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1980]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1981]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1982]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1983]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1984]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1985]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1986]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1987]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1988]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1989]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1990]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1991]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1992]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1993]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1994]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1995]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1996]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1997]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1998]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[1999]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2000]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2001]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2002]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2003]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2004]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2005]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2006]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2007]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2008]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2009]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2010]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2011]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2012]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2013]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2014]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2015]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2016]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2017]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2018]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2019]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2020]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2021]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2022]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2023]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2024]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2025]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2026]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2027]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2028]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2029]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2030]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2031]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2032]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2033]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2034]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2035]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2036]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2037]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2038]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2039]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2040]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2041]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2042]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2043]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2044]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2045]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2046]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2047]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2048]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2049]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2050]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2051]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2052]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2053]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2054]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2055]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2056]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2057]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2058]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2059]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2060]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2061]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2062]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2063]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2064]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2065]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2066]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2067]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2068]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2069]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2070]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2071]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2072]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2073]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2074]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2075]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2076]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2077]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2078]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2079]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2080]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2081]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2082]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2083]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.003"/>
  <testcase name="computeWellMatchesParsedString[2084]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2085]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2086]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2087]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2088]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2089]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2090]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2091]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2092]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2093]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2094]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2095]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2096]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2097]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2098]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2099]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2100]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2101]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2102]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2103]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2104]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2105]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2106]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2107]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2108]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2109]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2110]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2111]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2112]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2113]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2114]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2115]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2116]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2117]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2118]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2119]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2120]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2121]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2122]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2123]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2124]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2125]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2126]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2127]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2128]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2129]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2130]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2131]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2132]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2133]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2134]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2135]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2136]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2137]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2138]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2139]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2140]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2141]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2142]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2143]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2144]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2145]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2146]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2147]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2148]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2149]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2150]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2151]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2152]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2153]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2154]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2155]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2156]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2157]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2158]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2159]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2160]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2161]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2162]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2163]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2164]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2165]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2166]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2167]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2168]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2169]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2170]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2171]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2172]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2173]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2174]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2175]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2176]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.006"/>
  <testcase name="computeWellMatchesParsedString[2177]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2178]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2179]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2180]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2181]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2182]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2183]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2184]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2185]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2186]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2187]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2188]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2189]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2190]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2191]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2192]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2193]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2194]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2195]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2196]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2197]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2198]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2199]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2200]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2201]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2202]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2203]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2204]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2205]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2206]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2207]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2208]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2209]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2210]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2211]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2212]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2213]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2214]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2215]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2216]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2217]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2218]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2219]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2220]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2221]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2222]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2223]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2224]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2225]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2226]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2227]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2228]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2229]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2230]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2231]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2232]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2233]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2234]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2235]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2236]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2237]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2238]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2239]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2240]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2241]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2242]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2243]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2244]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2245]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2246]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2247]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2248]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2249]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2250]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2251]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2252]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2253]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2254]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2255]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2256]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2257]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2258]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2259]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2260]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2261]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2262]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2263]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2264]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2265]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2266]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2267]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2268]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2269]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2270]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2271]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2272]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2273]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2274]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2275]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2276]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2277]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2278]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2279]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2280]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2281]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2282]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2283]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2284]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2285]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2286]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2287]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2288]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2289]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2290]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2291]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2292]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2293]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2294]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2295]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2296]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2297]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2298]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2299]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2300]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2301]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2302]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2303]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2304]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2305]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2306]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2307]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2308]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2309]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2310]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2311]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2312]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2313]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2314]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2315]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2316]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2317]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2318]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2319]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2320]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2321]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2322]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2323]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2324]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2325]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2326]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2327]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2328]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2329]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2330]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2331]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2332]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2333]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2334]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2335]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2336]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2337]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2338]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2339]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2340]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2341]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2342]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2343]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2344]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2345]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2346]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2347]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2348]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2349]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2350]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2351]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2352]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2353]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2354]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2355]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2356]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2357]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2358]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2359]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2360]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2361]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2362]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2363]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2364]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2365]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2366]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2367]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2368]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2369]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.004"/>
  <testcase name="computeWellMatchesParsedString[2370]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2371]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2372]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2373]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2374]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2375]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2376]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2377]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2378]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2379]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2380]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2381]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2382]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2383]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2384]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2385]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2386]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2387]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2388]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2389]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2390]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2391]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2392]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2393]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2394]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2395]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2396]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2397]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2398]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2399]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2400]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2401]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2402]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2403]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2404]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2405]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2406]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2407]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2408]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2409]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2410]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2411]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2412]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2413]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2414]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2415]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2416]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2417]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2418]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2419]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2420]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2421]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2422]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2423]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2424]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2425]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2426]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2427]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2428]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2429]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2430]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2431]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2432]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2433]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2434]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2435]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2436]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2437]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2438]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2439]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2440]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2441]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2442]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2443]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2444]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2445]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2446]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2447]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2448]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2449]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2450]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2451]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2452]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2453]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2454]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2455]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2456]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2457]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2458]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2459]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2460]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2461]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2462]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2463]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2464]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2465]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2466]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2467]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2468]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2469]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2470]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2471]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2472]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2473]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2474]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2475]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2476]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2477]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2478]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2479]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2480]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2481]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2482]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2483]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2484]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2485]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2486]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2487]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2488]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2489]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2490]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2491]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2492]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2493]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2494]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2495]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2496]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2497]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2498]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2499]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2500]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2501]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2502]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2503]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2504]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2505]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2506]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2507]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2508]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2509]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2510]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2511]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2512]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2513]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2514]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2515]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2516]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2517]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2518]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2519]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2520]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2521]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2522]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2523]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2524]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2525]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2526]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2527]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2528]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2529]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2530]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2531]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2532]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2533]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2534]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2535]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2536]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2537]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2538]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2539]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2540]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2541]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2542]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2543]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2544]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2545]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2546]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2547]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2548]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2549]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2550]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2551]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2552]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2553]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2554]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2555]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2556]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2557]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2558]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2559]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2560]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2561]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2562]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2563]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2564]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2565]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2566]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2567]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2568]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2569]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2570]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2571]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2572]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2573]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2574]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2575]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2576]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2577]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2578]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2579]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2580]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2581]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2582]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2583]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2584]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2585]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2586]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2587]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2588]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2589]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2590]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2591]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2592]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2593]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2594]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2595]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2596]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2597]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2598]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2599]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2600]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2601]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2602]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2603]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2604]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2605]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2606]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2607]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2608]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2609]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2610]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2611]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2612]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2613]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2614]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2615]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2616]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2617]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2618]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2619]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2620]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2621]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2622]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2623]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2624]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2625]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2626]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2627]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2628]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2629]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2630]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2631]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2632]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2633]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2634]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2635]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2636]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2637]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2638]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2639]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2640]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2641]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2642]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2643]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2644]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2645]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2646]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2647]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2648]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2649]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2650]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2651]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2652]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2653]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2654]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2655]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2656]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2657]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2658]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2659]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2660]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2661]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2662]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2663]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2664]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2665]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2666]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2667]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2668]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2669]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2670]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2671]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2672]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2673]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2674]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2675]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2676]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2677]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2678]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2679]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2680]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2681]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2682]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2683]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2684]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2685]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2686]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2687]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2688]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2689]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2690]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2691]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2692]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2693]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2694]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2695]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2696]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2697]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2698]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2699]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2700]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2701]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2702]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2703]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2704]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2705]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2706]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2707]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2708]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2709]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2710]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2711]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2712]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2713]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2714]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2715]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2716]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2717]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2718]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2719]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2720]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2721]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2722]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2723]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2724]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2725]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2726]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2727]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2728]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2729]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2730]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2731]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2732]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2733]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2734]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2735]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2736]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2737]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2738]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2739]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2740]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2741]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2742]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2743]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2744]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2745]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2746]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2747]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2748]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2749]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2750]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2751]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2752]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2753]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2754]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2755]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2756]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2757]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2758]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2759]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2760]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2761]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2762]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2763]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2764]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2765]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2766]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2767]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2768]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2769]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2770]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2771]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2772]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2773]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2774]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2775]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2776]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2777]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2778]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2779]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2780]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2781]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2782]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2783]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2784]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2785]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2786]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2787]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2788]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2789]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2790]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2791]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2792]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2793]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2794]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2795]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2796]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2797]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2798]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2799]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2800]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2801]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2802]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2803]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2804]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2805]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2806]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2807]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2808]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2809]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2810]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2811]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2812]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2813]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2814]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2815]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2816]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2817]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2818]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2819]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2820]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2821]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2822]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2823]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2824]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2825]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2826]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2827]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2828]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2829]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2830]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2831]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2832]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2833]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2834]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2835]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2836]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2837]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2838]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2839]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2840]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2841]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2842]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2843]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2844]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2845]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2846]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2847]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2848]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2849]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2850]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2851]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2852]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2853]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2854]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2855]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2856]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2857]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2858]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2859]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2860]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2861]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2862]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2863]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2864]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2865]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2866]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2867]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2868]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2869]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2870]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2871]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2872]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2873]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2874]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2875]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2876]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2877]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2878]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2879]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2880]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2881]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2882]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2883]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2884]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2885]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2886]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2887]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2888]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2889]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2890]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2891]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2892]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2893]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2894]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2895]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2896]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2897]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2898]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2899]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2900]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2901]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2902]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2903]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2904]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2905]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2906]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2907]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2908]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2909]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2910]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2911]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2912]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2913]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2914]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2915]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2916]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2917]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2918]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2919]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2920]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2921]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2922]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2923]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2924]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2925]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2926]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2927]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2928]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2929]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2930]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2931]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2932]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2933]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2934]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2935]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2936]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2937]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2938]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2939]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2940]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2941]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2942]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2943]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2944]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2945]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2946]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2947]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2948]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2949]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2950]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2951]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2952]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2953]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2954]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2955]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2956]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2957]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2958]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2959]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2960]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2961]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2962]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2963]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2964]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2965]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2966]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2967]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2968]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2969]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2970]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2971]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2972]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2973]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2974]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2975]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2976]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2977]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2978]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2979]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[2980]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2981]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2982]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2983]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2984]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2985]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2986]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2987]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2988]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2989]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2990]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2991]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2992]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2993]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2994]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2995]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2996]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2997]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2998]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[2999]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3000]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3001]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3002]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3003]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3004]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3005]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3006]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3007]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3008]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3009]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3010]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3011]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3012]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3013]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3014]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3015]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3016]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3017]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3018]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3019]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3020]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3021]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3022]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3023]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3024]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3025]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3026]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3027]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3028]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3029]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3030]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3031]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3032]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3033]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3034]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3035]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3036]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3037]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3038]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3039]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3040]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3041]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3042]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3043]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3044]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3045]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3046]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3047]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3048]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.005"/>
  <testcase name="computeWellMatchesParsedString[3049]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3050]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3051]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3052]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3053]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3054]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3055]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3056]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3057]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3058]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3059]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3060]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3061]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3062]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3063]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3064]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3065]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3066]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3067]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3068]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3069]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3070]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3071]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3072]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3073]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3074]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3075]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3076]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3077]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3078]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3079]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3080]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3081]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3082]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3083]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3084]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3085]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3086]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3087]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3088]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3089]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3090]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3091]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3092]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3093]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3094]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3095]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3096]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3097]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3098]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3099]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3100]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3101]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3102]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3103]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3104]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3105]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3106]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3107]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3108]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3109]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3110]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3111]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3112]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3113]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3114]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3115]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3116]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3117]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3118]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3119]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3120]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3121]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3122]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3123]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3124]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3125]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3126]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3127]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3128]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3129]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3130]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3131]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3132]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3133]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3134]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3135]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3136]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3137]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3138]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3139]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3140]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3141]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3142]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3143]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3144]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3145]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3146]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3147]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3148]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3149]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3150]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3151]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3152]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3153]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3154]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3155]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.003"/>
  <testcase name="computeWellMatchesParsedString[3156]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3157]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3158]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3159]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3160]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3161]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3162]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3163]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3164]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3165]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3166]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3167]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3168]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3169]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3170]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3171]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3172]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3173]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3174]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3175]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3176]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3177]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3178]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3179]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3180]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3181]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3182]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3183]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3184]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3185]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3186]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3187]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3188]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3189]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3190]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3191]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3192]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3193]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3194]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3195]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3196]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3197]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3198]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3199]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3200]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3201]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3202]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3203]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3204]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3205]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3206]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3207]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3208]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3209]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3210]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3211]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3212]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3213]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3214]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3215]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3216]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3217]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3218]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3219]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3220]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3221]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3222]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3223]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3224]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3225]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3226]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3227]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3228]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3229]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3230]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3231]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3232]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3233]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3234]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3235]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3236]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3237]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3238]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3239]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3240]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3241]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3242]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3243]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3244]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3245]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3246]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3247]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3248]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3249]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3250]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3251]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3252]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3253]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3254]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3255]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3256]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3257]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3258]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0.001"/>
  <testcase name="computeWellMatchesParsedString[3259]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3260]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3261]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3262]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3263]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3264]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3265]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3266]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3267]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3268]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3269]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3270]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3271]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3272]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3273]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3274]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3275]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3276]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3277]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3278]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="computeWellMatchesParsedString[3279]" classname="org.jcvi.jillion.experimental.plate.TestWell" time="0"/>
  <testcase name="quadrantComputedCorrectly[0]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[2]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[3]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[4]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[5]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[6]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[7]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[8]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[9]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[10]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[11]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[12]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[13]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[14]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[15]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[16]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[17]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[18]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[19]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[20]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[21]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[22]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[23]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[24]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[25]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[26]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[27]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[28]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[29]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[30]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[31]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[32]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[33]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[34]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[35]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[36]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[37]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[38]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[39]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[40]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[41]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[42]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[43]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[44]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[45]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[46]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[47]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[48]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[49]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[50]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[51]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[52]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[53]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[54]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[55]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[56]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[57]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[58]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[59]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[60]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[61]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[62]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[63]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[64]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[65]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[66]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[67]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[68]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[69]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[70]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[71]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[72]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[73]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[74]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[75]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[76]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[77]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[78]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[79]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[80]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[81]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[82]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[83]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[84]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[85]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[86]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[87]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[88]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[89]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[90]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[91]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[92]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[93]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[94]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[95]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[96]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[97]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[98]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[99]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[100]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[101]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[102]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[103]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[104]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[105]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[106]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[107]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[108]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[109]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[110]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[111]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[112]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[113]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[114]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[115]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[116]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[117]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[118]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[119]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[120]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[121]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[122]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[123]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[124]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[125]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[126]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[127]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[128]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.002"/>
  <testcase name="quadrantComputedCorrectly[129]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[130]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[131]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[132]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[133]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[134]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[135]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[136]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[137]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[138]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[139]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[140]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[141]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[142]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[143]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[144]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[145]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[146]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[147]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[148]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[149]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[150]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[151]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[152]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[153]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[154]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[155]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[156]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[157]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[158]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[159]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[160]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[161]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[162]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[163]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[164]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[165]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[166]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[167]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[168]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[169]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[170]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[171]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[172]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[173]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[174]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[175]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[176]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[177]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[178]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[179]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[180]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[181]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[182]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[183]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[184]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[185]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[186]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[187]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[188]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[189]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[190]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[191]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[192]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[193]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[194]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[195]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[196]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[197]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[198]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[199]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[200]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[201]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[202]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[203]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[204]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[205]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[206]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[207]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[208]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[209]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[210]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[211]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[212]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[213]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[214]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[215]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[216]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[217]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[218]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[219]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[220]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[221]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[222]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[223]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[224]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[225]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[226]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[227]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[228]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[229]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[230]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[231]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[232]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[233]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[234]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[235]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[236]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[237]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[238]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[239]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[240]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[241]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[242]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[243]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[244]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.005"/>
  <testcase name="quadrantComputedCorrectly[245]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[246]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[247]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[248]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[249]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[250]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[251]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[252]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[253]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[254]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[255]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[256]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[257]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[258]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[259]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[260]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[261]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[262]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[263]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[264]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[265]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[266]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[267]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[268]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[269]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[270]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[271]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[272]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[273]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[274]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[275]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[276]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[277]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[278]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[279]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[280]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[281]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[282]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[283]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[284]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[285]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[286]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[287]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[288]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[289]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[290]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[291]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[292]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[293]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[294]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[295]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[296]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[297]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[298]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[299]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[300]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[301]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[302]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[303]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[304]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[305]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[306]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[307]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[308]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[309]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[310]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[311]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[312]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[313]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[314]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[315]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[316]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[317]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[318]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[319]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[320]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[321]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[322]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[323]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[324]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[325]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[326]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[327]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[328]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[329]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[330]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[331]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[332]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[333]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[334]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[335]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[336]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[337]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[338]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[339]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[340]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[341]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[342]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[343]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[344]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[345]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[346]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[347]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[348]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[349]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[350]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[351]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[352]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[353]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[354]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[355]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[356]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[357]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[358]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[359]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[360]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[361]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[362]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[363]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[364]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[365]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[366]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[367]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[368]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[369]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[370]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[371]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[372]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[373]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[374]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[375]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[376]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[377]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[378]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[379]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[380]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[381]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[382]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[383]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[384]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[385]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[386]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[387]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[388]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[389]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[390]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[391]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[392]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[393]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[394]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[395]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[396]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[397]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[398]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[399]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[400]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[401]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[402]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[403]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[404]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[405]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[406]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[407]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[408]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[409]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[410]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[411]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[412]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[413]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[414]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[415]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[416]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[417]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[418]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[419]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[420]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[421]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[422]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[423]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[424]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[425]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[426]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[427]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[428]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[429]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[430]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[431]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[432]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[433]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[434]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[435]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[436]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[437]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[438]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[439]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[440]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[441]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[442]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[443]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[444]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[445]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[446]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[447]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[448]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[449]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[450]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[451]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[452]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[453]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[454]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[455]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[456]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[457]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[458]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[459]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[460]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[461]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[462]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[463]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[464]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[465]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[466]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[467]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[468]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[469]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[470]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[471]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[472]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[473]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[474]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[475]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[476]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[477]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[478]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[479]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[480]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[481]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[482]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[483]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[484]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[485]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[486]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[487]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[488]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[489]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[490]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[491]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[492]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[493]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[494]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[495]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[496]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[497]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[498]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[499]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[500]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[501]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[502]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[503]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[504]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[505]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[506]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[507]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[508]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[509]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[510]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[511]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[512]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[513]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[514]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[515]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[516]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[517]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[518]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[519]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[520]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[521]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[522]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[523]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[524]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[525]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[526]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[527]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[528]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[529]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[530]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[531]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[532]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[533]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[534]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[535]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[536]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[537]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[538]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[539]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[540]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[541]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[542]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[543]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[544]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[545]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[546]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[547]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[548]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[549]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[550]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[551]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[552]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[553]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[554]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[555]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[556]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[557]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[558]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[559]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[560]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[561]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[562]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[563]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[564]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[565]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[566]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[567]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[568]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[569]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[570]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[571]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[572]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[573]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[574]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[575]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[576]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[577]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[578]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[579]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[580]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[581]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[582]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[583]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[584]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[585]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[586]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[587]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[588]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[589]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[590]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[591]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[592]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[593]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[594]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[595]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[596]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[597]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[598]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[599]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[600]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[601]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[602]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[603]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[604]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[605]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[606]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[607]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[608]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[609]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[610]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[611]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[612]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[613]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[614]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[615]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[616]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[617]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[618]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[619]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[620]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[621]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[622]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[623]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[624]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[625]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[626]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[627]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[628]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[629]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[630]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[631]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[632]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[633]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[634]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[635]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[636]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[637]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[638]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[639]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[640]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[641]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[642]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[643]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[644]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[645]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[646]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[647]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[648]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[649]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[650]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[651]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[652]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[653]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[654]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[655]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[656]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[657]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[658]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[659]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[660]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[661]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[662]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[663]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[664]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[665]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[666]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[667]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[668]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[669]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[670]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[671]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[672]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[673]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[674]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[675]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[676]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[677]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[678]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[679]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[680]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[681]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[682]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[683]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[684]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[685]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[686]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[687]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[688]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[689]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[690]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[691]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[692]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[693]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[694]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[695]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[696]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[697]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[698]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[699]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[700]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[701]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[702]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[703]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[704]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[705]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[706]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[707]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[708]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[709]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[710]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[711]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[712]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[713]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[714]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[715]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[716]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[717]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.003"/>
  <testcase name="quadrantComputedCorrectly[718]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[719]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[720]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[721]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[722]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[723]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[724]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[725]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[726]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[727]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[728]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[729]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[730]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[731]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[732]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[733]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[734]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[735]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[736]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[737]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[738]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[739]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[740]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[741]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[742]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[743]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[744]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[745]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[746]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[747]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[748]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[749]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[750]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[751]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[752]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[753]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[754]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[755]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[756]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[757]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[758]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[759]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[760]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[761]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[762]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[763]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[764]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[765]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[766]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[767]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[768]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[769]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[770]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[771]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[772]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[773]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[774]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[775]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[776]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[777]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[778]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[779]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[780]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[781]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[782]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[783]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[784]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[785]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[786]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[787]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[788]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[789]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[790]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[791]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[792]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[793]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[794]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[795]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[796]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[797]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[798]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[799]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[800]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[801]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[802]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[803]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[804]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[805]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[806]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[807]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[808]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[809]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[810]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[811]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[812]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[813]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[814]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[815]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[816]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[817]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[818]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[819]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[820]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[821]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[822]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[823]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[824]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[825]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[826]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[827]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[828]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[829]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[830]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[831]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[832]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[833]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[834]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[835]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[836]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[837]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[838]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[839]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[840]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[841]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[842]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[843]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[844]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[845]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[846]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[847]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[848]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[849]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[850]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[851]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[852]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[853]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[854]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[855]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[856]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[857]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[858]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[859]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[860]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[861]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[862]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[863]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[864]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[865]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[866]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[867]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[868]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[869]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[870]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[871]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[872]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[873]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[874]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[875]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[876]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[877]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[878]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[879]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[880]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[881]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[882]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[883]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[884]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[885]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[886]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[887]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[888]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[889]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[890]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[891]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[892]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.004"/>
  <testcase name="quadrantComputedCorrectly[893]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[894]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[895]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[896]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[897]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[898]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[899]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[900]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[901]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[902]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[903]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[904]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[905]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[906]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[907]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[908]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[909]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[910]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[911]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[912]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[913]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[914]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[915]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[916]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[917]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[918]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[919]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[920]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[921]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[922]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[923]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[924]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[925]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[926]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[927]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[928]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[929]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[930]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[931]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[932]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[933]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[934]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[935]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[936]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[937]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[938]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[939]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[940]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[941]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[942]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[943]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[944]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[945]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[946]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[947]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[948]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[949]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[950]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[951]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[952]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[953]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[954]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[955]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[956]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[957]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[958]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[959]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[960]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[961]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[962]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[963]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[964]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[965]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[966]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[967]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[968]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[969]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[970]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[971]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[972]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[973]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[974]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[975]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[976]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[977]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[978]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[979]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[980]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[981]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[982]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[983]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[984]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[985]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[986]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[987]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[988]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[989]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[990]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[991]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[992]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[993]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[994]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[995]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[996]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[997]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[998]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[999]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.002"/>
  <testcase name="quadrantComputedCorrectly[1000]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1001]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1002]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1003]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1004]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1005]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1006]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1007]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1008]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1009]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1010]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1011]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1012]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1013]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1014]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1015]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1016]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1017]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1018]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1019]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1020]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1021]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1022]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1023]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1024]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1025]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1026]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1027]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1028]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1029]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1030]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1031]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1032]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1033]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1034]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1035]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1036]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1037]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1038]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1039]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1040]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1041]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1042]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1043]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1044]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1045]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1046]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1047]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1048]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1049]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1050]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1051]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1052]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1053]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1054]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1055]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1056]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1057]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1058]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1059]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1060]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1061]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1062]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1063]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1064]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1065]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1066]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1067]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1068]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1069]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1070]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1071]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1072]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1073]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1074]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1075]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1076]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1077]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1078]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1079]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1080]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1081]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1082]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1083]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1084]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1085]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1086]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1087]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1088]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1089]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.004"/>
  <testcase name="quadrantComputedCorrectly[1090]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1091]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1092]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1093]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1094]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1095]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1096]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1097]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1098]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1099]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1100]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1101]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1102]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1103]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1104]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1105]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1106]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1107]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1108]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1109]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1110]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1111]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1112]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1113]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1114]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1115]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1116]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1117]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1118]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1119]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1120]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1121]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1122]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1123]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1124]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1125]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1126]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1127]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1128]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1129]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1130]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1131]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1132]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1133]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1134]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1135]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1136]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1137]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1138]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1139]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1140]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1141]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1142]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1143]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1144]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1145]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1146]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1147]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1148]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1149]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1150]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1151]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1152]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1153]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1154]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1155]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1156]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1157]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1158]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1159]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1160]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1161]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1162]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1163]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1164]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1165]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1166]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1167]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1168]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1169]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1170]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1171]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1172]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1173]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1174]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1175]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1176]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1177]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1178]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1179]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1180]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1181]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1182]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1183]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1184]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1185]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1186]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1187]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1188]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1189]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1190]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1191]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1192]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1193]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1194]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1195]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1196]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1197]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1198]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1199]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1200]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1201]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1202]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1203]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1204]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1205]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1206]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1207]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1208]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1209]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1210]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1211]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1212]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1213]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1214]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1215]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1216]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1217]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1218]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1219]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1220]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1221]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1222]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1223]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1224]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1225]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1226]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1227]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1228]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1229]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1230]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1231]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1232]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1233]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1234]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1235]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1236]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1237]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1238]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1239]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1240]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1241]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1242]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1243]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1244]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1245]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1246]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1247]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1248]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1249]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1250]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1251]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1252]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1253]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1254]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1255]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1256]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1257]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1258]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1259]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1260]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1261]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1262]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1263]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1264]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1265]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1266]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1267]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1268]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1269]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1270]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1271]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1272]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1273]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1274]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1275]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1276]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1277]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1278]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1279]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1280]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1281]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1282]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1283]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1284]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1285]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1286]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1287]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1288]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1289]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1290]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1291]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1292]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1293]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1294]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1295]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1296]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1297]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1298]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1299]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1300]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1301]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1302]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1303]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1304]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1305]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1306]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1307]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1308]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1309]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1310]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1311]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1312]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1313]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1314]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1315]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1316]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1317]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1318]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1319]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1320]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.003"/>
  <testcase name="quadrantComputedCorrectly[1321]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1322]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1323]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1324]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1325]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1326]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1327]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1328]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1329]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1330]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1331]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1332]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1333]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1334]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1335]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1336]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1337]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1338]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1339]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1340]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1341]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1342]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1343]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1344]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1345]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1346]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1347]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1348]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1349]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1350]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1351]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1352]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1353]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1354]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1355]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1356]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1357]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1358]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1359]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1360]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1361]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1362]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1363]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1364]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1365]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1366]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1367]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1368]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1369]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1370]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1371]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1372]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1373]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1374]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1375]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1376]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1377]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1378]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1379]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1380]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1381]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1382]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1383]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1384]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1385]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1386]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1387]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1388]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1389]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1390]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1391]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1392]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1393]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1394]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1395]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1396]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1397]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1398]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1399]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1400]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1401]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1402]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1403]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1404]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1405]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1406]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1407]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1408]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.003"/>
  <testcase name="quadrantComputedCorrectly[1409]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1410]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1411]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1412]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1413]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1414]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1415]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1416]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1417]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1418]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1419]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1420]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1421]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1422]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1423]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1424]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1425]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1426]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1427]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1428]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1429]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1430]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1431]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1432]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1433]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1434]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1435]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1436]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1437]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1438]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1439]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1440]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1441]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1442]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1443]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1444]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1445]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1446]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1447]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1448]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1449]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1450]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1451]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1452]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1453]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1454]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1455]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1456]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1457]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1458]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1459]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1460]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1461]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1462]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1463]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1464]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1465]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1466]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1467]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1468]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1469]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1470]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1471]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1472]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1473]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1474]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1475]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1476]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1477]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1478]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1479]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1480]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1481]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1482]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1483]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1484]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1485]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1486]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1487]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1488]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1489]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1490]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1491]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1492]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1493]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1494]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1495]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1496]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1497]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1498]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1499]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1500]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1501]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1502]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1503]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1504]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1505]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1506]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1507]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1508]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1509]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1510]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1511]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1512]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1513]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1514]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1515]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1516]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1517]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1518]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1519]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1520]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1521]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1522]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1523]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1524]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1525]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1526]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1527]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1528]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1529]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1530]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1531]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1532]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1533]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1534]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1535]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1536]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1537]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1538]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1539]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1540]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1541]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1542]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1543]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1544]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1545]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1546]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1547]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1548]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1549]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.006"/>
  <testcase name="quadrantComputedCorrectly[1550]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1551]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1552]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1553]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1554]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1555]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1556]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1557]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1558]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1559]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1560]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1561]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1562]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1563]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1564]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1565]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1566]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1567]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1568]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1569]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1570]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1571]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1572]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1573]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1574]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1575]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1576]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1577]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1578]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1579]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1580]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1581]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1582]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1583]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1584]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1585]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1586]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1587]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1588]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1589]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1590]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1591]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1592]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1593]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1594]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1595]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1596]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1597]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1598]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1599]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1600]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1601]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1602]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1603]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1604]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1605]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1606]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1607]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1608]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1609]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1610]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1611]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0.001"/>
  <testcase name="quadrantComputedCorrectly[1612]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1613]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1614]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1615]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1616]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1617]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1618]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1619]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1620]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1621]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1622]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1623]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1624]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1625]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1626]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1627]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1628]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1629]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1630]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="quadrantComputedCorrectly[1631]" classname="org.jcvi.jillion.experimental.plate.TestWellQuadrant" time="0"/>
  <testcase name="newPlateShouldClearOutWhatHasBeenUsed" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0.004"/>
  <testcase name="nextWellShouldGetNextWellFromIndex" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0"/>
  <testcase name="useWithNullWellShouldThrowNPE" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0"/>
  <testcase name="constructorWithNullPlateFormatShouldThrowNPE" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0.001"/>
  <testcase name="useWell" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0"/>
  <testcase name="filledUpPlateWillThrowNoSuchExceptionIfCallNext" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0.001"/>
  <testcase name="constructorWithNullIndexOrderShouldThrowNPE" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0"/>
  <testcase name="tryingToReuseWellShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0"/>
  <testcase name="useUpFullPlateShouldMakeIsFullTrue" classname="org.jcvi.jillion.experimental.plate.TestPlatePopulator" time="0.003"/>
  <testcase name="parseThrowsException" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.013"/>
  <testcase name="skipAllGroups" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0"/>
  <testcase name="haltAtGroup2" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.008"/>
  <testcase name="skipGroup2" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.004"/>
  <testcase name="useMementoToRevisitGroup2And3" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.003"/>
  <testcase name="haltAtInsideGroup1End" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.005"/>
  <testcase name="haltAtInsideGroup3End" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.002"/>
  <testcase name="testInputStreamCanOnlyBeParsedOnce" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.002"/>
  <testcase name="notAnAlnFileThrowIOException" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.001"/>
  <testcase name="inputStreamCanNotCreateMementos" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0.001"/>
  <testcase name="testFileCanBeParsedMultipleTimes" classname="org.jcvi.jillion.experimental.align.TestAlnFileParser" time="0"/>
  <testcase name="validHeader" classname="org.jcvi.jillion.experimental.align.TestAlnUtil" time="0"/>
  <testcase name="invalidHeader" classname="org.jcvi.jillion.experimental.align.TestAlnUtil" time="0"/>
  <testcase name="nullHeaderShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.TestAlnUtil" time="0"/>
  <testcase name="parse" classname="org.jcvi.jillion.experimental.align.TestAminoAcidAlnParser" time="0.005"/>
  <testcase name="parse" classname="org.jcvi.jillion.experimental.align.TestAlnFileWithResidueCounts" time="0.002"/>
  <testcase name="lowercase" classname="org.jcvi.jillion.experimental.align.TestAlnFileParserLowercaseBases" time="0.002"/>
  <testcase name="differentValuesNotEqual" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0.004"/>
  <testcase name="buildFromTraceback" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="manymatchesAndMismatches" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="alignmentNotEqualToOtherObject" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="onlyOneMatch" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="manymatchesAndMismatchesAndGap" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="equalsSameRef" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="onlyOneMisMatch" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="alignmentNotEqualToNull" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="equalsSameValues" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0.001"/>
  <testcase name="noAlignmentShouldHave0PercentIdent" classname="org.jcvi.jillion.experimental.align.TestNucleotideSequenceAlignmentBuilder" time="0"/>
  <testcase name="getNumberOfRecords" classname="org.jcvi.jillion.experimental.align.TestGappedNucleotideAlignmentDataStore" time="0"/>
  <testcase name="getFirstRecord" classname="org.jcvi.jillion.experimental.align.TestGappedNucleotideAlignmentDataStore" time="0.001"/>
  <testcase name="getMiddleRecordWithSNPs" classname="org.jcvi.jillion.experimental.align.TestGappedNucleotideAlignmentDataStore" time="0"/>
  <testcase name="getLastRecord" classname="org.jcvi.jillion.experimental.align.TestGappedNucleotideAlignmentDataStore" time="0"/>
  <testcase name="writeDefaultNumberOfResidues" classname="org.jcvi.jillion.experimental.align.TestNucleotideAlnFileWriter" time="0.006"/>
  <testcase name="differentEOL" classname="org.jcvi.jillion.experimental.align.TestNucleotideAlnFileWriter" time="0.005"/>
  <testcase name="differentNumberOfGroups" classname="org.jcvi.jillion.experimental.align.TestNucleotideAlnFileWriter" time="0.008"/>
  <testcase name="nullIdShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.TestNucleotideAlnFileWriter" time="0.003"/>
  <testcase name="writeCumulativeResidueCounts" classname="org.jcvi.jillion.experimental.align.TestNucleotideAlnFileWriter" time="0.005"/>
  <testcase name="forceOnly1Group" classname="org.jcvi.jillion.experimental.align.TestNucleotideAlnFileWriter" time="0.006"/>
  <testcase name="writingSameIdTwiceShouldThrowException" classname="org.jcvi.jillion.experimental.align.TestNucleotideAlnFileWriter" time="0.001"/>
  <testcase name="nullSequenceShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.TestNucleotideAlnFileWriter" time="0"/>
  <testcase name="negativeEValueShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0.003"/>
  <testcase name="nullEVauleShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentNumGapOpeningsShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentAlignmentLengthShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentQueryIdShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="percentIdentityGreaterThanOneHundredShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="nullSubjectShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0.001"/>
  <testcase name="queryShouldGetWhitespaceTrimmed" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0.001"/>
  <testcase name="negativeBitScoreShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentSubjectIdShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="sameValuesShouldBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="negativeNumGapsShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="negativeAlignmentLengthShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentNumMismatchesShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="nullQueryShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="negativeNumMismatchesShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="whiteSpaceOnlyQueryShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="getters" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="whiteSpaceOnlySubjectShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0.001"/>
  <testcase name="subjectShouldGetWhitespaceTrimmed" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="nullBitScoreShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="negativePercentIdentityShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="nullQueryRangeShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="emptySubjectShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentBitScoreShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="nullSubjectRangeShouldThrowNPE" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0.001"/>
  <testcase name="differentEValueShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentQueryRangeShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="emptyQueryShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentPercentIdentityShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="differentSubjectRangeShouldNotBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="sameRefShouldBeEqual" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="notEqualToNonBlastHit" classname="org.jcvi.jillion.experimental.align.blast.TestBlastHit" time="0"/>
  <testcase name="parseFile" classname="org.jcvi.jillion.experimental.align.blast.TestTabularBlastParser" time="0.004"/>
  <testcase name="parseInputStream" classname="org.jcvi.jillion.experimental.align.blast.TestTabularBlastParser" time="0.002"/>
  <testcase name="parseBlastResults" classname="org.jcvi.jillion.experimental.align.blast.TestTabularRotaBlastResults" time="0.183"/>
  <testcase name="parseBlastResults" classname="org.jcvi.jillion.experimental.align.blast.TestXmlRotaBlastResults" time="0.4"/>
  <testcase name="shouldNotVisitHit" classname="org.jcvi.jillion.experimental.align.blast.TestBlastXmlWithNoHits" time="0.007"/>
  <testcase name="noDeflineShouldUseAccessionAsId" classname="org.jcvi.jillion.experimental.align.blast.TestBlastXmlNoDefLine" time="0.003"/>
  <testcase name="spotCheck" classname="org.jcvi.jillion.align.TestBlosum30" time="0"/>
  <testcase name="hasSequencesHaveStopCodon" classname="org.jcvi.jillion.align.TestBlosum30" time="0.008"/>
  <testcase name="PyrrolysinematchesLysine" classname="org.jcvi.jillion.align.TestBlosum30" time="0"/>
  <testcase name="alignSimilarSequences" classname="org.jcvi.jillion.align.TestBlosum30" time="0.001"/>
  <testcase name="spotCheck" classname="org.jcvi.jillion.align.TestBlosum40" time="0"/>
  <testcase name="hasSequencesHaveStopCodon" classname="org.jcvi.jillion.align.TestBlosum40" time="0.001"/>
  <testcase name="PyrrolysinematchesLysine" classname="org.jcvi.jillion.align.TestBlosum40" time="0"/>
  <testcase name="alignSimilarSequences" classname="org.jcvi.jillion.align.TestBlosum40" time="0.001"/>
  <testcase name="spotCheck" classname="org.jcvi.jillion.align.TestBlosum50" time="0"/>
  <testcase name="hasSequencesHaveStopCodon" classname="org.jcvi.jillion.align.TestBlosum50" time="0.001"/>
  <testcase name="PyrrolysinematchesLysine" classname="org.jcvi.jillion.align.TestBlosum50" time="0"/>
  <testcase name="alignSimilarSequences" classname="org.jcvi.jillion.align.TestBlosum50" time="0"/>
  <testcase name="spotCheck" classname="org.jcvi.jillion.align.TestBlosum62" time="0.003"/>
  <testcase name="hasSequencesHaveStopCodon" classname="org.jcvi.jillion.align.TestBlosum62" time="0"/>
  <testcase name="PyrrolysinematchesLysine" classname="org.jcvi.jillion.align.TestBlosum62" time="0.001"/>
  <testcase name="alignSimilarSequences" classname="org.jcvi.jillion.align.TestBlosum62" time="0"/>
  <testcase name="spotCheck" classname="org.jcvi.jillion.align.TestBlosum90" time="0"/>
  <testcase name="hasSequencesHaveStopCodon" classname="org.jcvi.jillion.align.TestBlosum90" time="0"/>
  <testcase name="PyrrolysinematchesLysine" classname="org.jcvi.jillion.align.TestBlosum90" time="0"/>
  <testcase name="alignSimilarSequences" classname="org.jcvi.jillion.align.TestBlosum90" time="0"/>
  <testcase name="withAmbiguityCodes" classname="org.jcvi.jillion.align.pairwise.TestNucleotideSmithWatermanAligner" time="0"/>
  <testcase name="oneBase" classname="org.jcvi.jillion.align.pairwise.TestNucleotideSmithWatermanAligner" time="0.001"/>
  <testcase name="testSubSequenceExactMatch" classname="org.jcvi.jillion.align.pairwise.TestNucleotideSmithWatermanAligner" time="0"/>
  <testcase name="twoSeparateIndels" classname="org.jcvi.jillion.align.pairwise.TestNucleotideSmithWatermanAligner" time="0"/>
  <testcase name="oneSequenceLongerThanOtherShouldPickShorterLength" classname="org.jcvi.jillion.align.pairwise.TestNucleotideSmithWatermanAligner" time="0"/>
  <testcase name="oneIndel" classname="org.jcvi.jillion.align.pairwise.TestNucleotideSmithWatermanAligner" time="0"/>
  <testcase name="exactMatch" classname="org.jcvi.jillion.align.pairwise.TestNucleotideSmithWatermanAligner" time="0"/>
  <testcase name="exampleFromBook" classname="org.jcvi.jillion.align.pairwise.TestProteinSmithWaterman" time="0.002"/>
  <testcase name="regressionAlignment" classname="org.jcvi.jillion.align.pairwise.TestNucleotideNeedlemanWunschAligner" time="0.001"/>
  <testcase name="oneBase" classname="org.jcvi.jillion.align.pairwise.TestNucleotideNeedlemanWunschAligner" time="0"/>
  <testcase name="wikipediaExample" classname="org.jcvi.jillion.align.pairwise.TestNucleotideNeedlemanWunschAligner" time="0"/>
  <testcase name="shouldIgnoreInputGaps" classname="org.jcvi.jillion.align.pairwise.TestNucleotideNeedlemanWunschAligner" time="0"/>
  <testcase name="oneSequenceLongerThanOtherAddGapsToShorterSeq" classname="org.jcvi.jillion.align.pairwise.TestNucleotideNeedlemanWunschAligner" time="0.001"/>
  <testcase name="twoBases" classname="org.jcvi.jillion.align.pairwise.TestNucleotideNeedlemanWunschAligner" time="0"/>
  <testcase name="exactMatch" classname="org.jcvi.jillion.align.pairwise.TestNucleotideNeedlemanWunschAligner" time="0"/>
  <testcase name="exampleFromBook" classname="org.jcvi.jillion.align.pairwise.TestProteinNeedlemanWunschAligner" time="0.004"/>
  <testcase name="multipleLocalNucleotideMatches" classname="org.jcvi.jillion.align.pairwise.TestMultipleLocalAlignment" time="0.007"/>
  <testcase name="multipleProteins" classname="org.jcvi.jillion.align.pairwise.TestMultipleLocalAlignment" time="0.342"/>
  <testcase name="parseScaffold" classname="org.jcvi.jillion.experimental.assembly.agp.TestAgpParser" time="0.025"/>
  <testcase name="oneElement" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0.004"/>
  <testcase name="notEqualToDifferentClass" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="testToString" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="nullExtendedDataShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="notEqualToNull" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="notEqualtoDifferentNumberOfElements" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="extendedData" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="nullMapShouldThrowIllegalArgumentException" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="equalsSameRefShouldBeEqual" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="emptyMap" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="twoElements" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecord" time="0"/>
  <testcase name="notAddingAnythingShouldCreateEmptyRecord" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecordBuilder" time="0"/>
  <testcase name="removeExtendedData" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecordBuilder" time="0"/>
  <testcase name="putAll" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecordBuilder" time="0"/>
  <testcase name="remove" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecordBuilder" time="0"/>
  <testcase name="removeFromEmptyMapShouldDoNothing" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecordBuilder" time="0"/>
  <testcase name="twoRecords" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecordBuilder" time="0"/>
  <testcase name="oneRecord" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecordBuilder" time="0"/>
  <testcase name="addExtendedData" classname="org.jcvi.jillion.experimental.trace.archive2.TestDefaultTraceArchiveRecordBuilder" time="0"/>
  <testcase name="numRecords" classname="org.jcvi.jillion.experimental.trace.archive2.TestXmlTraceInfoFactory" time="0"/>
  <testcase name="fastaRecordsExist" classname="org.jcvi.jillion.experimental.trace.archive2.TestXmlTraceInfoFactory" time="0"/>
  <testcase name="parseTraceInfo" classname="org.jcvi.jillion.experimental.trace.archive2.TestTraceArchiveWriter" time="0.053"/>
</testsuite>