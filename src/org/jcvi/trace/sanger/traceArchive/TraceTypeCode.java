/*
 * Created on Sep 3, 2009
 *
 * @author dkatzel
 */
package org.jcvi.trace.sanger.traceArchive;

import java.util.HashMap;
import java.util.Map;
/**
 * {@code TraceTypeCode} is all possible
 * values for {@link TraceInfoField#TRACE_TYPE_CODE}.
 * @author dkatzel
 *
 *
 */
public enum TraceTypeCode {
    
    
    /**
     * Sequences obtained using microarrays (also called DNA chips or gene
     * chips)
     */
    CHIP,
    /**
     * Sequences generated from the end of a large insert (BAC/PAC/Fosmid) or
     * cDNA clone
     */
    CLONEEND,
    /**
     * Single Pass Expressed Sequence Tag
     */
    EST,
    /**
     * High throughput SELEX
     */
    HTP_SELEX("HTP SELEX"),
    /**
     * Other than PCR, PrimerWalk, SHOTGUN or TRANSPOSON for FINISHING STRATEGY
     */
    OTHER,
    /**
     * Sequences obtained using templates generated by genomic Polymerase Chain
     * Reaction
     */
    PCR,
    /**
     * Sequences generated through a primer walking step
     */
    PrimerWalk,
    /**
     * Sequences obtained using templates generated by Reverse Transcriptase
     * Polymerase Chain Reaction
     */
    RT_PCR("RT-PCR"),
    /**
     * Shotgun sequencing of clones (genomic or cDNA)
     */
    SHOTGUN,
    /**
     * Sequences obtained using templates generated by transposons
     */
    TRANSPOSON,
    /**
     * Whole Chromosome Shotgun
     */
    WCS,
    /**
     * Whole Genome Shotgun
     */
    WGS,

    /**
     * Sequences obtained using 454 technology.
     * @deprecated Trace Archive RFC considers this code Obsolete
     */
    @Deprecated
    FOUR_FIVE_FOUR("454");
    
    
    private static final Map<String, TraceTypeCode> NAME_TO_TRACE_TYPE;
    static{
        NAME_TO_TRACE_TYPE = new HashMap<String, TraceTypeCode>();
        for(TraceTypeCode code : TraceTypeCode.values()){
            NAME_TO_TRACE_TYPE.put(code.toString().toUpperCase(), code);
        }
    }
    private final String actualName;
    private TraceTypeCode(){
        this(null);
    }
    private TraceTypeCode(String name){
        this.actualName = name;
    }
    
    public String toString(){
        if(actualName !=null){
            return actualName;
        }
        return this.name();
    }
    /**
     * Get the TraceTypeCode for the given string.
     * @param traceTypeCode (not null) string respesentation of a TraceTypeCode.
     * @return a TraceTypeCode
     * @throws NullPointerException if traceTypeCode is null.
     * @throws IllegalArgumentException if no TraceTypeCode could be found.
     */
    public static TraceTypeCode getTraceTypeCodeFor(String traceTypeCode){
        String code = traceTypeCode.toUpperCase();
        if(!NAME_TO_TRACE_TYPE.containsKey(code)){
            throw new IllegalArgumentException("unknown trace type code "+ traceTypeCode);
        }
        return NAME_TO_TRACE_TYPE.get(code);
    }
}
