package org.jcvi.jillion.trace.sff;

import java.io.IOException;

import org.jcvi.jillion.trace.sff.SffVisitorCallback.SffVisitorMemento;

/**
 * {@code SffParser} is an interface that will
 * parse a SFF formatted structure and call the appropriate 
 * visit methods on the given {@link SffVisitor}.
 * @author dkatzel
 *
 */
public interface SffParser {

	/**
	 * Can this handler accept new parse requests
	 * via parse() calls.
	 * 
	 * Some implementations of {@link SffParser}
	 * may only allow one parse call in its lifetime 
	 * (for example, if the sff structure is being parsed via
	 * an InputStream).
	 * @return {@code true} if this handler can handle 
	 * new visit requests; {@code false} otherwise.
	 */
	boolean canParse();
	
	/**
	 * Parse the sff structure 
	 * and call the visit methods on the given visitor.
	 * @param visitor the visitor to call the visit methods on.
	 * @throws IOException if there is a problem parsing the file.
	 * @throws NullPointerException if visitor is null.
	 * @throws IllegalStateException if this handler can not accept
	 * any new parse requests.
	 * @see #canParse()
	 */
	void parse(SffVisitor visitor) throws IOException;
	/**
	 * Parse the sff structure starting from the portion
	 * specified by the given {@link SffVisitorMemento}.
	 * and call the visit methods on the given visitor.
	 * 
	 * @param visitor the visitor to call the visit methods on.
	 * @param memento the {@link SffVisitorMemento} instance which will
	 * tell the parser where to start parsing.  Only {@link SffVisitorMemento}s
	 * generated by this parser instance are valid.
	 * @throws IOException if there is a problem parsing the file.
	 * @throws NullPointerException if visitor is null.
	 * @throws UnsupportedOperationException if this parser
	 * was created with an {@link InputStream} instead of a File.
	 * @throws IllegalStateException if this handler can not accept
	 * any new parse requests.
	 * @see #canParse()
	 */
	void parse(SffVisitor visitor, SffVisitorMemento memento) throws IOException;
	
}
