Change Log:

This document lists all changes and refactoring made that either:
add new features, break the old API or fix known bugs.  There will
often be many more source code changes that aren't listed if they don't
change the behavior in any public API classes.


================
Jillion 4.0 RC 3 - Most changes address performance improvements.
================

API Changes
------------
1. Created new TranslationTable interface to translate NucleotideSequence
   into AminoAcidSequence.
   
2. Created new IupacTranslationTables enum which has the common Genbank Translation tables.
   Class contains methods to get by name and by genbank table number.
   
3. Removed old Codon class.

4. Removed SequenceBuilder.build(Range) since it was never used.

5. Refactored AminoAcid classes moved AminoAcids helper class to test
   directory and renamed it AminoAcidUtil.
   
6. Removed GlyphCodec.encode(Collection<T> ) and pushed it down to sub-interfaces.

7. Removed NucleotideCodec.encode(Collection<T> ) and all its uses 
   outside of tests.  Created new helper method in test area to perform
   function so it doesn't pollute public API.

8. Created AminoAcidCodec interface, previously was just GlyphCodec<AminoAcid>.

9. Added sortedInsert(value) and sortedRemove(value) to the growableArrays.

10. Made GrowableArrays implement Iterable, created new classes to Iterate over primitive arrays.

11. DefaultAssembledReadBuilder equals() and hashcode() have been changed
    to use only readId and direction which are the only immutable fields.
    Previously used reference field which is mutable and could breaks the
    equals and hashcode contract.
    
12. Changed AssembledReadBuilder to no longer have methods to programatically set the
    reference since it is now done during build time.
    
13. Added support for creating "denovo" contigs without first providing an
    initial consensus sequence.  So far only supported in AceContigBuilders.
    Will add support for others later.
    
14. Changed StreamingIteator.close() to no longer throw IOException this cleans up a
    lot code that uses the new Java 7 try-with-resource.
 
15. Added sortedInsert( int[]) to GrowableIntArray and equivalents to 
    GrowableByteArray, GrowableShortArray and GrowableLongArray.
    
16. Changed ScfChromatogramWriter to accept Chromatogram objects not
    just ScfChromatogram objects.  If the Chromatogram is not
    an ScfChromatogram, then the writer pretends the scf-specific
    fields are blank.
    
17. Deleted AbstractConsensusCaller class; pushed used methods down
    to AbstractChurchhillWatermanConsensusCaller.
    
18. Added TraceArchiveWriter.getNumberOfTracesWritten().
   
Performance Improvements
------------------------
1.  Changed NucleotideSequenceBuilder to track sorted gap offsets while building.
    This takes up slightly more memory when building but will enable optimized object
    creation during the build() step.
    
2.  Performance improvement changed endian of 2 bit nucleotide encodings to
    reduce the amount of computations.

3.  Changed NucleotideSequenceBuilder to use new added 
    sortedInsert(value) and sortedRemove(value) on the growableArrays.

4.  To improve speed of cas2consed, changed casAlignmentBuilder from random
    access into reference sequence to see if value is gap to
    caching the gap offsets and then doing binary search on them. 
    
5.  Improved fake quality ace writing output.

6.  Performance improvement to NucleotideSequenceBuilder.ungap().

7.  Changed DefaultAssembledReadBuilder to no longer store the
    original NucleotideSequence reference field. Since it is no longer
    used outside of the build() method.  This reduces memory footprint
    as well since there are millions of builder objects in memory all 
    with 1 fewer reference saving either 4 or 8 bytes each.
    
8.  Added QualityCodec.toQualityArray() to efficiently create byte array
    where array[i] is the ith quality score.  
    Changed EncodedQualitySequnce.equasl() to be based on
    array which should be faster most of the time (at least for reads).
    
9.  Performance improvement for NucleotideSequenceBuilder.insert() append()
    and prepend() methods when a NucleotideSequence is passed in.  
    Previously method took an Iterable<Nucletoide> to accept both
    Sequences and Collections.  However since NucleotideSequence
    knows how its length and how many gaps it has we can use that 
    information to pre-allocate the internal structures instead of
    possibly re-allocating them many times as the structures grow.
    
10. Performance improvement for NucleotideSequence : 
    changed Sequence gap computation methods to be more efficient.
    NucleotideCodec now computes those values which should be faster 
    than converting to a List<Integer> then iterating over them. 
    Also stops looking as soon as the current gap offset > offset 
    we care about. Which will make it faster to convert between gap 
    and ungapped offsets for low valued offsets where the sequence 
    is very gappy downstream.

11. Performance improvement for NucleotideSequenceBuilder:
    no longer uses BitSet to internally store data since that was very slow.
    Now use GrowableByteArray which is more than 2x faster but
    takes up 2x the memory.  Now each base is 1 byte instead of 
    4 bits while building.  (But when build() is called the base 
    will be 2 or 4 bits depending on context).  
    We can later implement a GrowableHalfByteArray or 
    something similar to do our own bit masking which will
    reduce the memory footprint if memory becomes a problem.
    
12. TextLineParser no longer uses a pushback inputstream but
    instead keeps the extra byte it read in its own memory.  
    This takes up less memory than a pushback inputstream and 
    we only need to check the unread byte once at the beginning
    of every nextLine() instead of while reading each byte with in.read().
     
13. Changed PairwiseAligner TraceBack matrix to pack 4 tracebacks into a single byte.
    This should reduce memory of smith-waterman and needleman wunsch alignments 
    by a factor of 4.  Previously aligning two 30k sequences to each 
    other took almost 2 GB, now its 400MB.
     
14. Changed NucleotideSequenceBuilder.NewValues.insert() to use
    new growableArray.sortedInsert() instead of growableArray.append(int[]); 
    growableArray.sort().  This was revealed to be bottleneck when using a profiler.

Bug Fixes
------------
1. AminoAcidSequenceBuilder.toString() to actually print
   sequence instead of object ref to growable array.

2. BlosomMatrix - Added support for Stop codon.

3. bug fix to GapQualityValueStrategy to fix quality values of reverse complemented reads.

================
Jillion 4.0 RC 2
================

New Features
------------
1.  Added support for new version of CLC .cas file format produced
    by new version of CLC software "clc_mapper".  Previously
    Jillion only supported cas files produced by CLC ref_assemble 
    software.

API Changes
------------
1.  Created ZtrChromatogramParser class to replace old ZtrChromatogramFileParser
    class so the Chromatogram parsers match the other Jillion parser and visitor 
    classes.
    
2.  Created ScfChromatogramParser and AbiChromatogramParser classes to replace
    old ScfChromatogramFileParser and AbiChromatogramParser classes so the 
    Chromatogram parsers match the other Jillion parser and visitor classes.
    
3.  Renamed ChromatogramFileVisitor.visitEndOfTrace() to visitEnd() to be consistent 
    with other Jillion visitors
    
4.  Changed Chromatogram equals contract to require quality values and id are equal as well.

5.  Removed ChromatogramFileVisitor.visitNewTrace() since it was never used by any chromatogram 
    implementations other than as a no-op.
    
6.  Changed Chromatogram.getPositionSequence() to getPeakSequence().

7.  Changed ChromatogramBuilder methods to get /set confidence to get/set qualities.

8.  Changed TasmBuilder.withAvgCoverage(Double) method to be 
    setCoverageInfo(Integer numReads, Double avgCov) so we also set number of reads.  
    Setting numReads to non-null will override the Contig.getNumberOfReads() methods 
    to be whatever you set it to. (helpful for annotation contigs)
    
9.  Changed AbstractTasmFileParser to set coverage info when parsing tasm header 
    and reset it if any reads parsed.  This allows annotation contigs to retain their
    correct # seqs and avgCoverage levels.

10. Added new method TasmContig.isAnnotationContig() to denote if the numRecords and 
    avg coverage or if it was explicitly set or was computed from underlying read info.
    
11. Changed FastaDataStoreBuilder classes to take InputStreams as well as Files.

12. Changed Slice.equals() to allow for SliceElements to be in any order as long as all present.  
    Previously order of elements mattered.

13. renamed Phd.getPositionSequence() Phd.getPeakSequence()

14. Removed TraceDecoderException and TraceEncoderException, 
    everywhere that used these classes now throw./catch IOException instead.

15. Changed AssembledRead.toReferenceOffset() and AssembledRead.toGappedValidRangeOffset()
    to throw IndexOutOfBoundsExceptions instead of IllegalArgumentExceptions if given invalid offsets.
    
16. Added TextLineParser.peekNextLine()

17. Renamed CtgFileWriter to TigrContigFileWriter.

18. Made DefaultPlacedContig package private since it is only 
    created internally by the ScaffoldBuilder objects.
    
19. Moved ScaffoldUtils class out of Jillion since it was never used except by other higher up modules 
    internal to JCVI (it was moved to  one of those modules )
    
20. Added new method Slice.getConsensusCall() which optionally stores the consensus call for that slice needed 
    for new consensus caller implementations, if consensus is not set, then this method returns null.
    Changed SliceMapBuilder with Contig constructors to set each Slice's consensus call to the
    contig consensus.

21. Added method SliceBuilder.getCurrentCoverageDepth().

22. Added constructors and methods to SliceBuilder that take SliceElementFilter to more simply filter elements.

23. Changed CasFileParser constructor to be private added new create static factory method to use instead.

24. Added sort() and binarySerarch() methods to GrowableArrays. 

25. Added clear() method to SequenceBuilders so the same object can be re-used without having
    to create new objects or gc'ing old objects.
    
26. Changed GapQualityValueStrategy to return entire gapped complemented quality sequence all at once instead of one offset at a time since it is computationally intensive
    and most of the time you need the entire sequence anyway (for slice map building).
    
27. Renamed AceFileContigDataStore interface AceFileDataStore to match the respective builder

Performance Improvements
------------------------
1.  Improved performance of gap calculations for NucletoideSequence implementation that only contains ACGTN

2.  Added constant Nucleotide.VALUES which stores a copy of values() as an unmodifiable List so we don't 
    keep having to clone it every time.

3.  improved NucleotideSequence and NucleotideSequenceBuilder processing by
    optimizing bottlenecks detected with profiler.
    
4.  Improved Fastq parsing by reducing the number of objects created during parsing.

5.  Modified ContigBuilders to use new GapQualityValue methods which can compute quality values
    faster than old method. 

6.  Performance improvements to Range construction.

7.  Rewrote NucleotideCodec implementations so that the class that stores each base
    in 4 bits can take advantage of the 'book keeping' information in the header that was
    used in the 2 bit implementations.  This makes computing gapped and ungapped 
    coordinates much faster with only a slight increase in memory usage.  
    This improves cas2consed times by 33%.

Bug Fixes
------------
1. Fixed internal TextLineParser class to correctly compute the 
   current position offset into a file that uses Windows '\r\n' EOLs.  
   This broke index offset datastore implementations on Windows machines.
   
2. MostFrequentBasecallConsensusCaller now uses cumulative quality scores 
   in the event of a tie.
   
3. Fixed bug in ACGTNucleotideCodec which incorrectly computed ungappedLength.

4. Bug fix LargeTasmContigDataStore.iterator() method to return TasmContig instances 
   instead of TasmContigBuilder instances

5. Fixed Bug in Range.iterator() if Range.getEnd() was Long.MAX_VALUE.

6. Fixed bug in DefaultAsmContig to not delete readbuilders during build().  
   This will now let users call built multiple times without errors.
   
7.  Fixed PhdParser and Writer to correctly handle read tags in all allowed locations.

8.  Fixed bug in PhdWriter to write "UNPADDED_READ_POS" instead of "UNGAPPED_READ_POS"

9.  Fixed bugs in AbstractAlignedReadCasVisitor to correctly handle interleaved records.

10. Fixed for phdBall writer to not write out comment "null" if there wasn't any comment.

11. Bug fix for sff parser if sff read did not have quality trimming applied to it.

12.  Fixed Cas2consed to correctly trim sff reads correctly.

13.  Bug fix in NucleotideSequenceBuilder which incorrectly counted N's as 
     ambiguities when determining the codec to use.

14.  Fixed bugs in GapQualityValueStrategy to correctly compute reverse complemented gap values. 

15.  Bug fix to cas2consed to take qualities into account when computing consensus.


